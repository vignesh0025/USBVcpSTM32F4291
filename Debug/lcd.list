
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800a010  0800a010  0001a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b4  0800a1b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1bc  0800a1bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006268  200001e0  0800a3a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006448  0800a3a4  00026448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e9e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048f3  00000000  00000000  000440ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  000489a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  0004a228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029276  00000000  00000000  0004b890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017008  00000000  00000000  00074b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3f02  00000000  00000000  0008bb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016fa10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c70  00000000  00000000  0016fa8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ff8 	.word	0x08009ff8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009ff8 	.word	0x08009ff8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <MX_FREERTOS_Init+0x28>)
 8000596:	2100      	movs	r1, #0
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <MX_FREERTOS_Init+0x2c>)
 800059a:	f005 fc3d 	bl	8005e18 <osThreadNew>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_FREERTOS_Init+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  guiTaskHandle = osThreadNew(GuiTask, NULL, &guiTask_attributes);
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_FREERTOS_Init+0x34>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <MX_FREERTOS_Init+0x38>)
 80005aa:	f005 fc35 	bl	8005e18 <osThreadNew>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_FREERTOS_Init+0x3c>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800a0bc 	.word	0x0800a0bc
 80005bc:	080005d1 	.word	0x080005d1
 80005c0:	20004b14 	.word	0x20004b14
 80005c4:	0800a0e0 	.word	0x0800a0e0
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	20004b18 	.word	0x20004b18

080005d0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005d8:	f008 f8b8 	bl	800874c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <StartDefaultTask+0x20>)
 80005e2:	f000 fdd6 	bl	8001192 <HAL_GPIO_TogglePin>
	 //printf("summa");
	 //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
	 osDelay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f005 fcbf 	bl	8005f6c <osDelay>
	 HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80005ee:	e7f5      	b.n	80005dc <StartDefaultTask+0xc>
 80005f0:	40021800 	.word	0x40021800

080005f4 <GuiTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void GuiTask(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80005fc:	2101      	movs	r1, #1
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <GuiTask+0x34>)
 8000600:	f000 fd96 	bl	8001130 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d106      	bne.n	8000618 <GuiTask+0x24>
	  {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <GuiTask+0x38>)
 8000612:	f000 fda5 	bl	8001160 <HAL_GPIO_WritePin>
 8000616:	e7f1      	b.n	80005fc <GuiTask+0x8>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <GuiTask+0x38>)
 8000620:	f000 fd9e 	bl	8001160 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000624:	e7ea      	b.n	80005fc <GuiTask+0x8>
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000
 800062c:	40021800 	.word	0x40021800

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a25      	ldr	r2, [pc, #148]	; (8000700 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006be:	f000 fd4f 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_GPIO_Init+0xd8>)
 80006d6:	f000 fb81 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fb72 	bl	8000ddc <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40021800 	.word	0x40021800
 8000708:	40020000 	.word	0x40020000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fa1e 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f80a 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff8a 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800071c:	f005 fb14 	bl	8005d48 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000720:	f7ff ff36 	bl	8000590 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8000724:	f005 fb44 	bl	8005db0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x1c>
	...

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fd25 	bl	800918a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fe8a 	bl	80024cc <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007be:	f000 f831 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2105      	movs	r1, #5
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f8b5 	bl	8002950 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ec:	f000 f81a 	bl	8000824 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 f9bf 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40002000 	.word	0x40002000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fa85 	bl	8000d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	202d      	movs	r0, #45	; 0x2d
 80008a2:	f000 fa71 	bl	8000d88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80008a6:	202d      	movs	r0, #45	; 0x2d
 80008a8:	f000 fa8a 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_InitTick+0xa4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <HAL_InitTick+0xa4>)
 80008b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_InitTick+0xa4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c8:	f107 0210 	add.w	r2, r7, #16
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fa16 	bl	8002d04 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008d8:	f002 fa00 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80008dc:	4603      	mov	r3, r0
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <HAL_InitTick+0xa8>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	0c9b      	lsrs	r3, r3, #18
 80008ec:	3b01      	subs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_InitTick+0xac>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <HAL_InitTick+0xb0>)
 80008f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_InitTick+0xac>)
 80008f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_InitTick+0xac>)
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_InitTick+0xac>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_InitTick+0xac>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_InitTick+0xac>)
 8000912:	f002 fa29 	bl	8002d68 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d104      	bne.n	8000926 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <HAL_InitTick+0xac>)
 800091e:	f002 fa58 	bl	8002dd2 <HAL_TIM_Base_Start_IT>
 8000922:	4603      	mov	r3, r0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	431bde83 	.word	0x431bde83
 8000938:	20004b1c 	.word	0x20004b1c
 800093c:	40002000 	.word	0x40002000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800097a:	f002 fa4e 	bl	8002e1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20004b1c 	.word	0x20004b1c

08000988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <OTG_FS_IRQHandler+0x10>)
 800098e:	f000 fd5f 	bl	8001450 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000603c 	.word	0x2000603c

0800099c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
	}

return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
	}
	return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x50>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x16>
		heap_end = &end;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <_sbrk+0x50>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <_sbrk+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_sbrk+0x50>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_sbrk+0x50>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	466a      	mov	r2, sp
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d907      	bls.n	8000ab2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aa2:	f008 fb2d 	bl	8009100 <__errno>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	e006      	b.n	8000ac0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <_sbrk+0x50>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <_sbrk+0x50>)
 8000abc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200001fc 	.word	0x200001fc
 8000acc:	20006448 	.word	0x20006448

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <SystemInit+0x28>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <SystemInit+0x28>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SystemInit+0x28>)
 8000ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aea:	609a      	str	r2, [r3, #8]
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b02:	e003      	b.n	8000b0c <LoopCopyDataInit>

08000b04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b0a:	3104      	adds	r1, #4

08000b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b14:	d3f6      	bcc.n	8000b04 <CopyDataInit>
  ldr  r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b18:	e002      	b.n	8000b20 <LoopFillZerobss>

08000b1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b1c:	f842 3b04 	str.w	r3, [r2], #4

08000b20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b24:	d3f9      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b26:	f7ff ffd3 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f008 faef 	bl	800910c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fded 	bl	800070c <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b34:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b38:	0800a1c4 	.word	0x0800a1c4
  ldr  r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b40:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000b44:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000b48:	20006448 	.word	0x20006448

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f8fa 	bl	8000d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fe84 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe56 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	20004b5c 	.word	0x20004b5c

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20004b5c 	.word	0x20004b5c

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_Delay+0x40>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000004 	.word	0x20000004

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff4c 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff ffb1 	bl	8000d0c <NVIC_EncodePriority>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff80 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff54 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e177      	b.n	80010e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8166 	bne.w	80010e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x4a>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	69b9      	ldr	r1, [r7, #24]
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_GPIO_Init+0xe6>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	2b11      	cmp	r3, #17
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80c0 	beq.w	80010e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a64      	ldr	r2, [pc, #400]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a60      	ldr	r2, [pc, #384]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_GPIO_Init+0x328>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d037      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a56      	ldr	r2, [pc, #344]	; (8001108 <HAL_GPIO_Init+0x32c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_GPIO_Init+0x330>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a54      	ldr	r2, [pc, #336]	; (8001110 <HAL_GPIO_Init+0x334>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a53      	ldr	r2, [pc, #332]	; (8001114 <HAL_GPIO_Init+0x338>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x33c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x22a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <HAL_GPIO_Init+0x340>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a50      	ldr	r2, [pc, #320]	; (8001120 <HAL_GPIO_Init+0x344>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_GPIO_Init+0x348>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_GPIO_Init+0x34c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e012      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e010      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e00e      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001002:	2306      	movs	r3, #6
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x240>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102c:	4934      	ldr	r1, [pc, #208]	; (8001100 <HAL_GPIO_Init+0x324>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <HAL_GPIO_Init+0x350>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105e:	4a33      	ldr	r2, [pc, #204]	; (800112c <HAL_GPIO_Init+0x350>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_GPIO_Init+0x350>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <HAL_GPIO_Init+0x350>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_GPIO_Init+0x350>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_GPIO_Init+0x350>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_GPIO_Init+0x350>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_GPIO_Init+0x350>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f ae84 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	3724      	adds	r7, #36	; 0x24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40022000 	.word	0x40022000
 8001128:	40022400 	.word	0x40022400
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	401a      	ands	r2, r3
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d104      	bne.n	80011b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	041a      	lsls	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b08f      	sub	sp, #60	; 0x3c
 80011cc:	af0a      	add	r7, sp, #40	; 0x28
 80011ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e103      	b.n	80013e2 <HAL_PCD_Init+0x21a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f007 fc78 	bl	8008ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 f904 	bl	800340e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	687e      	ldr	r6, [r7, #4]
 800120e:	466d      	mov	r5, sp
 8001210:	f106 0410 	add.w	r4, r6, #16
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001220:	e885 0003 	stmia.w	r5, {r0, r1}
 8001224:	1d33      	adds	r3, r6, #4
 8001226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f001 ffdb 	bl	80031e4 <USB_CoreInit>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0d0      	b.n	80013e2 <HAL_PCD_Init+0x21a>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f002 f8f2 	bl	8003430 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e04a      	b.n	80012e8 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	333d      	adds	r3, #61	; 0x3d
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	333c      	adds	r3, #60	; 0x3c
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	b298      	uxth	r0, r3
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3342      	adds	r3, #66	; 0x42
 800128e:	4602      	mov	r2, r0
 8001290:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	333f      	adds	r3, #63	; 0x3f
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3344      	adds	r3, #68	; 0x44
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	3348      	adds	r3, #72	; 0x48
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3350      	adds	r3, #80	; 0x50
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3af      	bcc.n	8001252 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e044      	b.n	8001382 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3301      	adds	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3b5      	bcc.n	80012f8 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	687e      	ldr	r6, [r7, #4]
 8001394:	466d      	mov	r5, sp
 8001396:	f106 0410 	add.w	r4, r6, #16
 800139a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013aa:	1d33      	adds	r3, r6, #4
 80013ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f002 f868 	bl	8003484 <USB_DevInit>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00d      	b.n	80013e2 <HAL_PCD_Init+0x21a>
  }

  hpcd->USB_Address = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f817 	bl	800440e <USB_DevDisconnect>

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_PCD_Start+0x1c>
 8001402:	2302      	movs	r3, #2
 8001404:	e020      	b.n	8001448 <HAL_PCD_Start+0x5e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	2b01      	cmp	r3, #1
 8001414:	d109      	bne.n	800142a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 ffd5 	bl	80043de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f001 ffd7 	bl	80033ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b08d      	sub	sp, #52	; 0x34
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f003 f87a 	bl	8004564 <USB_GetMode>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 8390 	bne.w	8001b98 <HAL_PCD_IRQHandler+0x748>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 ffde 	bl	800443e <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8386 	beq.w	8001b96 <HAL_PCD_IRQHandler+0x746>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 ffd5 	bl	800443e <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f002 0202 	and.w	r2, r2, #2
 80014ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ffc3 	bl	800443e <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014c2:	d17b      	bne.n	80015bc <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 ffc9 	bl	8004464 <USB_ReadDevAllOutEpInterrupt>
 80014d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014d4:	e06f      	b.n	80015b6 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d064      	beq.n	80015aa <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 ffee 	bl	80044cc <USB_ReadDevOutEPInterrupt>
 80014f0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2301      	movs	r3, #1
 800150c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800150e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fe0f 	bl	8002134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 ff0e 	bl	8002344 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001534:	461a      	mov	r2, r3
 8001536:	2308      	movs	r3, #8
 8001538:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001550:	461a      	mov	r2, r3
 8001552:	2310      	movs	r3, #16
 8001554:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001572:	461a      	mov	r2, r3
 8001574:	2101      	movs	r1, #1
 8001576:	f003 f839 	bl	80045ec <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001586:	461a      	mov	r2, r3
 8001588:	2320      	movs	r3, #32
 800158a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a2:	461a      	mov	r2, r3
 80015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	3301      	adds	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d18c      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 ff3c 	bl	800443e <USB_ReadInterrupts>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015d0:	f040 80c4 	bne.w	800175c <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 ff5d 	bl	8004498 <USB_ReadDevAllInEpInterrupt>
 80015de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015e4:	e0b6      	b.n	8001754 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80ab 	beq.w	8001748 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 ff83 	bl	8004508 <USB_ReadDevInEPInterrupt>
 8001602:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d05b      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	2201      	movs	r2, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	43db      	mvns	r3, r3
 8001628:	69f9      	ldr	r1, [r7, #28]
 800162a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800162e:	4013      	ands	r3, r2
 8001630:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163e:	461a      	mov	r2, r3
 8001640:	2301      	movs	r3, #1
 8001642:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d11b      	bne.n	8001684 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3348      	adds	r3, #72	; 0x48
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4403      	add	r3, r0
 800166c:	3344      	adds	r3, #68	; 0x44
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4419      	add	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4403      	add	r3, r0
 8001680:	3348      	adds	r3, #72	; 0x48
 8001682:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 fab9 	bl	8008c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d116      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	d113      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x276>
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3350      	adds	r3, #80	; 0x50
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d108      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016be:	461a      	mov	r2, r3
 80016c0:	2101      	movs	r1, #1
 80016c2:	f002 ff93 	bl	80045ec <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016dc:	461a      	mov	r2, r3
 80016de:	2308      	movs	r3, #8
 80016e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f8:	461a      	mov	r2, r3
 80016fa:	2310      	movs	r3, #16
 80016fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001714:	461a      	mov	r2, r3
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001730:	461a      	mov	r2, r3
 8001732:	2302      	movs	r3, #2
 8001734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fc69 	bl	800201a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	3301      	adds	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f af45 	bne.w	80015e6 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fe6c 	bl	800443e <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800176c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001770:	d122      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001798:	2100      	movs	r1, #0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fe8a 	bl	80024b4 <HAL_PCDEx_LPM_Callback>
 80017a0:	e002      	b.n	80017a8 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f007 faa4 	bl	8008cf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fe3e 	bl	800443e <USB_ReadInterrupts>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017cc:	d112      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f007 fa60 	bl	8008ca4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fe20 	bl	800443e <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001808:	f040 80a7 	bne.w	800195a <HAL_PCD_IRQHandler+0x50a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2110      	movs	r1, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f001 ff9e 	bl	8003768 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001830:	e036      	b.n	80018a0 <HAL_PCD_IRQHandler+0x450>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800183e:	461a      	mov	r2, r3
 8001840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001844:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	0151      	lsls	r1, r2, #5
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	440a      	add	r2, r1
 800185c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001860:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001864:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001872:	461a      	mov	r2, r3
 8001874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001878:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	0151      	lsls	r1, r2, #5
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	440a      	add	r2, r1
 8001890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001898:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	3301      	adds	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3c3      	bcc.n	8001832 <HAL_PCD_IRQHandler+0x3e2>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x4a4>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f043 030b 	orr.w	r3, r3, #11
 80018da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ec:	f043 030b 	orr.w	r3, r3, #11
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	e015      	b.n	8001920 <HAL_PCD_IRQHandler+0x4d0>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001906:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800190a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191a:	f043 030b 	orr.w	r3, r3, #11
 800191e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001932:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001944:	461a      	mov	r2, r3
 8001946:	f002 fe51 	bl	80045ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fd6d 	bl	800443e <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196e:	d12a      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x576>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fe03 	bl	8004580 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f001 ff53 	bl	800382a <USB_GetDevSpeed>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d103      	bne.n	8001992 <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	e002      	b.n	8001998 <HAL_PCD_IRQHandler+0x548>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	f001 f992 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 80019a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4620      	mov	r0, r4
 80019ac:	f001 fc7c 	bl	80032a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f007 f94e 	bl	8008c52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fd37 	bl	800443e <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d161      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x64e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0210 	bic.w	r2, r2, #16
 80019e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 020f 	and.w	r2, r3, #15
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	0c5b      	lsrs	r3, r3, #17
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d124      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x610>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d035      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x63e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	6a38      	ldr	r0, [r7, #32]
 8001a36:	f002 fbaf 	bl	8004198 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a46:	441a      	add	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a58:	441a      	add	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	e016      	b.n	8001a8e <HAL_PCD_IRQHandler+0x63e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	0c5b      	lsrs	r3, r3, #17
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d110      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x63e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a72:	2208      	movs	r2, #8
 8001a74:	4619      	mov	r1, r3
 8001a76:	6a38      	ldr	r0, [r7, #32]
 8001a78:	f002 fb8e 	bl	8004198 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a88:	441a      	add	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0210 	orr.w	r2, r2, #16
 8001a9c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fccb 	bl	800443e <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x678>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f007 f8bf 	bl	8008c36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f002 0208 	and.w	r2, r2, #8
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fcb6 	bl	800443e <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001adc:	d10d      	bne.n	8001afa <HAL_PCD_IRQHandler+0x6aa>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f007 f923 	bl	8008d30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fc9d 	bl	800443e <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b0e:	d10d      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x6dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f007 f8f8 	bl	8008d0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fc84 	bl	800443e <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b40:	d10a      	bne.n	8001b58 <HAL_PCD_IRQHandler+0x708>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f007 f906 	bl	8008d54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fc6e 	bl	800443e <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d115      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x748>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_PCD_IRQHandler+0x734>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f007 f8f6 	bl	8008d70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	e000      	b.n	8001b98 <HAL_PCD_IRQHandler+0x748>
      return;
 8001b96:	bf00      	nop
    }
  }
}
 8001b98:	3734      	adds	r7, #52	; 0x34
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}

08001b9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_SetAddress+0x1a>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e013      	b.n	8001be0 <HAL_PCD_SetAddress+0x42>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fbde 	bl	8004392 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	70fb      	strb	r3, [r7, #3]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	803b      	strh	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0f      	bge.n	8001c2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3338      	adds	r3, #56	; 0x38
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	705a      	strb	r2, [r3, #1]
 8001c2c:	e00f      	b.n	8001c4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c5a:	883a      	ldrh	r2, [r7, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	78ba      	ldrb	r2, [r7, #2]
 8001c64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c78:	78bb      	ldrb	r3, [r7, #2]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d102      	bne.n	8001c84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_EP_Open+0xaa>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e00e      	b.n	8001cb0 <HAL_PCD_EP_Open+0xc8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68f9      	ldr	r1, [r7, #12]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fde7 	bl	8003874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001cae:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0f      	bge.n	8001cec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00f      	b.n	8001d0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_PCD_EP_Close+0x6e>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e00e      	b.n	8001d44 <HAL_PCD_EP_Close+0x8c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 fe25 	bl	8003984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6979      	ldr	r1, [r7, #20]
 8001dc0:	f002 f872 	bl	8003ea8 <USB_EP0StartXfer>
 8001dc4:	e008      	b.n	8001dd8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6979      	ldr	r1, [r7, #20]
 8001dd4:	f001 fe5a 	bl	8003a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e04:	681b      	ldr	r3, [r3, #0]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3338      	adds	r3, #56	; 0x38
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6979      	ldr	r1, [r7, #20]
 8001e84:	f002 f810 	bl	8003ea8 <USB_EP0StartXfer>
 8001e88:	e008      	b.n	8001e9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	6979      	ldr	r1, [r7, #20]
 8001e98:	f001 fdf8 	bl	8003a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d901      	bls.n	8001ec4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e050      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da0f      	bge.n	8001eec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3338      	adds	r3, #56	; 0x38
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	705a      	strb	r2, [r3, #1]
 8001eea:	e00d      	b.n	8001f08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_SetStall+0x82>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e01e      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xc0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 f957 	bl	80041ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	b2d9      	uxtb	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f56:	461a      	mov	r2, r3
 8001f58:	f002 fb48 	bl	80045ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d901      	bls.n	8001f8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e042      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da0f      	bge.n	8001fb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3338      	adds	r3, #56	; 0x38
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	705a      	strb	r2, [r3, #1]
 8001fb2:	e00f      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_PCD_EP_ClrStall+0x86>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e00e      	b.n	8002012 <HAL_PCD_EP_ClrStall+0xa4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 f95f 	bl	80042c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b08a      	sub	sp, #40	; 0x28
 800201e:	af02      	add	r7, sp, #8
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3338      	adds	r3, #56	; 0x38
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06c      	b.n	800212c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	429a      	cmp	r2, r3
 8002066:	d902      	bls.n	800206e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3303      	adds	r3, #3
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002076:	e02b      	b.n	80020d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	429a      	cmp	r2, r3
 800208c:	d902      	bls.n	8002094 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3303      	adds	r3, #3
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68d9      	ldr	r1, [r3, #12]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4603      	mov	r3, r0
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f002 f83b 	bl	800412e <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d809      	bhi.n	80020fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d203      	bcs.n	80020fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1be      	bne.n	8002078 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	429a      	cmp	r2, r3
 8002104:	d811      	bhi.n	800212a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	2201      	movs	r2, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	43db      	mvns	r3, r3
 8002120:	6939      	ldr	r1, [r7, #16]
 8002122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002126:	4013      	ands	r3, r2
 8002128:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	3304      	adds	r3, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 80b3 	bne.w	80022d2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d028      	beq.n	80021c8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a70      	ldr	r2, [pc, #448]	; (800233c <PCD_EP_OutXfrComplete_int+0x208>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d90e      	bls.n	800219c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f006 fd03 	bl	8008ba8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021ac:	461a      	mov	r2, r3
 80021ae:	2101      	movs	r1, #1
 80021b0:	f002 fa1c 	bl	80045ec <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	2308      	movs	r3, #8
 80021c4:	6093      	str	r3, [r2, #8]
 80021c6:	e0b3      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	461a      	mov	r2, r3
 80021e0:	2320      	movs	r3, #32
 80021e2:	6093      	str	r3, [r2, #8]
 80021e4:	e0a4      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 809f 	bne.w	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a51      	ldr	r2, [pc, #324]	; (800233c <PCD_EP_OutXfrComplete_int+0x208>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d90f      	bls.n	800221a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002216:	6093      	str	r3, [r2, #8]
 8002218:	e08a      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800222c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	0159      	lsls	r1, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	440b      	add	r3, r1
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002240:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4403      	add	r3, r0
 8002250:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002254:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4403      	add	r3, r0
 8002278:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4419      	add	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4403      	add	r3, r0
 800228e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002292:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f006 fc96 	bl	8008bcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d144      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d138      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c8:	461a      	mov	r2, r3
 80022ca:	2101      	movs	r1, #1
 80022cc:	f002 f98e 	bl	80045ec <USB_EP0_OutStart>
 80022d0:	e02e      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <PCD_EP_OutXfrComplete_int+0x20c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d124      	bne.n	8002324 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	e01a      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	2320      	movs	r3, #32
 8002314:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fc55 	bl	8008bcc <HAL_PCD_DataOutStageCallback>
 8002322:	e005      	b.n	8002330 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f006 fc4e 	bl	8008bcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	4f54300a 	.word	0x4f54300a
 8002340:	4f54310a 	.word	0x4f54310a

08002344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	333c      	adds	r3, #60	; 0x3c
 800235c:	3304      	adds	r3, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d113      	bne.n	80023a2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <PCD_EP_OutSetupPacket_int+0xb8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d922      	bls.n	80023c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01d      	beq.n	80023c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	e012      	b.n	80023c8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <PCD_EP_OutSetupPacket_int+0xbc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10e      	bne.n	80023c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f006 fbed 	bl	8008ba8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <PCD_EP_OutSetupPacket_int+0xb8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90c      	bls.n	80023f0 <PCD_EP_OutSetupPacket_int+0xac>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023e8:	461a      	mov	r2, r3
 80023ea:	2101      	movs	r1, #1
 80023ec:	f002 f8fe 	bl	80045ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	4f54300a 	.word	0x4f54300a
 8002400:	4f54310a 	.word	0x4f54310a

08002404 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
 8002410:	4613      	mov	r3, r2
 8002412:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002422:	883b      	ldrh	r3, [r7, #0]
 8002424:	0419      	lsls	r1, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	430a      	orrs	r2, r1
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
 8002430:	e028      	b.n	8002484 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e00d      	b.n	8002462 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	3b01      	subs	r3, #1
 8002468:	429a      	cmp	r2, r3
 800246a:	d3ec      	bcc.n	8002446 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800246c:	883b      	ldrh	r3, [r7, #0]
 800246e:	0418      	lsls	r0, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	3b01      	subs	r3, #1
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4302      	orrs	r2, r0
 800247c:	3340      	adds	r3, #64	; 0x40
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e22d      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d075      	beq.n	80025d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d00c      	beq.n	8002510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f6:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d112      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b9d      	ldr	r3, [pc, #628]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250e:	d10b      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05b      	beq.n	80025d4 <HAL_RCC_OscConfig+0x108>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d157      	bne.n	80025d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e208      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x74>
 8002532:	4b91      	ldr	r3, [pc, #580]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a90      	ldr	r2, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x98>
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a8a      	ldr	r2, [pc, #552]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a83      	ldr	r2, [pc, #524]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a80      	ldr	r2, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fb1a 	bl	8000bbc <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fb16 	bl	8000bbc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1cd      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xc0>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fb06 	bl	8000bbc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fb02 	bl	8000bbc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1b9      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0xe8>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e18d      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4952      	ldr	r1, [pc, #328]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_RCC_OscConfig+0x2b0>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fabb 	bl	8000bbc <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fab7 	bl	8000bbc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e16e      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4940      	ldr	r1, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x2b0>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fa9a 	bl	8000bbc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fa96 	bl	8000bbc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e14d      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d030      	beq.n	8002718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x2b4>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fa7a 	bl	8000bbc <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fa76 	bl	8000bbc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e12d      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x200>
 80026ea:	e015      	b.n	8002718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x2b4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa63 	bl	8000bbc <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fa:	f7fe fa5f 	bl	8000bbc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e116      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a0 	beq.w	8002866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d121      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fe fa25 	bl	8000bbc <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e011      	b.n	800279a <HAL_RCC_OscConfig+0x2ce>
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
 8002784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fa18 	bl	8000bbc <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0cf      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_OscConfig+0x478>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x2f0>
 80027ae:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e01c      	b.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x312>
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a5f      	ldr	r2, [pc, #380]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027de:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a59      	ldr	r2, [pc, #356]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a56      	ldr	r2, [pc, #344]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe f9dd 	bl	8000bbc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe f9d9 	bl	8000bbc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e08e      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCC_OscConfig+0x33a>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282a:	f7fe f9c7 	bl	8000bbc <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe f9c3 	bl	8000bbc <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e078      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a3a      	ldr	r2, [pc, #232]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d064      	beq.n	8002938 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d05c      	beq.n	8002934 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d141      	bne.n	8002906 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x480>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f998 	bl	8000bbc <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe f994 	bl	8000bbc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04b      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
 80028d2:	491d      	ldr	r1, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_RCC_OscConfig+0x480>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f96d 	bl	8000bbc <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f969 	bl	8000bbc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e020      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x41a>
 8002904:	e018      	b.n	8002938 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_RCC_OscConfig+0x480>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe f956 	bl	8000bbc <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe f952 	bl	8000bbc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e009      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_RCC_OscConfig+0x47c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x448>
 8002932:	e001      	b.n	8002938 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	40023800 	.word	0x40023800
 800294c:	42470060 	.word	0x42470060

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0ca      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d90c      	bls.n	800298c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b62      	ldr	r3, [pc, #392]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0b6      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a4:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029bc:	4b52      	ldr	r3, [pc, #328]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	494c      	ldr	r1, [pc, #304]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d044      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07d      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06d      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e065      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4933      	ldr	r1, [pc, #204]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a40:	f7fe f8bc 	bl	8000bbc <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe f8b8 	bl	8000bbc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04d      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d20c      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e030      	b.n	8002afa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4915      	ldr	r1, [pc, #84]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490d      	ldr	r1, [pc, #52]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad6:	f000 f81d 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ada:	4601      	mov	r1, r0
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	fa21 f303 	lsr.w	r3, r1, r3
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fd feca 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	0800a104 	.word	0x0800a104
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d007      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x32>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d008      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x38>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 80b4 	bne.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b42:	60bb      	str	r3, [r7, #8]
       break;
 8002b44:	e0b3      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b48:	60bb      	str	r3, [r7, #8]
      break;
 8002b4a:	e0b0      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d04a      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	f04f 0400 	mov.w	r4, #0
 8002b6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	ea03 0501 	and.w	r5, r3, r1
 8002b78:	ea04 0602 	and.w	r6, r4, r2
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4632      	mov	r2, r6
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	0154      	lsls	r4, r2, #5
 8002b8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b8e:	014b      	lsls	r3, r1, #5
 8002b90:	4619      	mov	r1, r3
 8002b92:	4622      	mov	r2, r4
 8002b94:	1b49      	subs	r1, r1, r5
 8002b96:	eb62 0206 	sbc.w	r2, r2, r6
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	0194      	lsls	r4, r2, #6
 8002ba4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ba8:	018b      	lsls	r3, r1, #6
 8002baa:	1a5b      	subs	r3, r3, r1
 8002bac:	eb64 0402 	sbc.w	r4, r4, r2
 8002bb0:	f04f 0100 	mov.w	r1, #0
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	00e2      	lsls	r2, r4, #3
 8002bba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bbe:	00d9      	lsls	r1, r3, #3
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	195b      	adds	r3, r3, r5
 8002bc6:	eb44 0406 	adc.w	r4, r4, r6
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	0262      	lsls	r2, r4, #9
 8002bd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bd8:	0259      	lsls	r1, r3, #9
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	4621      	mov	r1, r4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	461a      	mov	r2, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	f7fd fb50 	bl	8000290 <__aeabi_uldivmod>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	460c      	mov	r4, r1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e049      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	ea03 0501 	and.w	r5, r3, r1
 8002c0e:	ea04 0602 	and.w	r6, r4, r2
 8002c12:	4629      	mov	r1, r5
 8002c14:	4632      	mov	r2, r6
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	f04f 0400 	mov.w	r4, #0
 8002c1e:	0154      	lsls	r4, r2, #5
 8002c20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c24:	014b      	lsls	r3, r1, #5
 8002c26:	4619      	mov	r1, r3
 8002c28:	4622      	mov	r2, r4
 8002c2a:	1b49      	subs	r1, r1, r5
 8002c2c:	eb62 0206 	sbc.w	r2, r2, r6
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	0194      	lsls	r4, r2, #6
 8002c3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c3e:	018b      	lsls	r3, r1, #6
 8002c40:	1a5b      	subs	r3, r3, r1
 8002c42:	eb64 0402 	sbc.w	r4, r4, r2
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	00e2      	lsls	r2, r4, #3
 8002c50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c54:	00d9      	lsls	r1, r3, #3
 8002c56:	460b      	mov	r3, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	195b      	adds	r3, r3, r5
 8002c5c:	eb44 0406 	adc.w	r4, r4, r6
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	02a2      	lsls	r2, r4, #10
 8002c6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c6e:	0299      	lsls	r1, r3, #10
 8002c70:	460b      	mov	r3, r1
 8002c72:	4614      	mov	r4, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	4621      	mov	r1, r4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4623      	mov	r3, r4
 8002c82:	f7fd fb05 	bl	8000290 <__aeabi_uldivmod>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	60bb      	str	r3, [r7, #8]
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002caa:	60bb      	str	r3, [r7, #8]
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	68bb      	ldr	r3, [r7, #8]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	0800a114 	.word	0x0800a114

08002d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220f      	movs	r2, #15
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCC_GetClockConfig+0x60>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e01d      	b.n	8002db6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f815 	bl	8002dbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 f968 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d122      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d11b      	bne.n	8002e76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0202 	mvn.w	r2, #2
 8002e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8ee 	bl	800303e <HAL_TIM_IC_CaptureCallback>
 8002e62:	e005      	b.n	8002e70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8e0 	bl	800302a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8f1 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d122      	bne.n	8002eca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d11b      	bne.n	8002eca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0204 	mvn.w	r2, #4
 8002e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8c4 	bl	800303e <HAL_TIM_IC_CaptureCallback>
 8002eb6:	e005      	b.n	8002ec4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8b6 	bl	800302a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8c7 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d122      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d11b      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0208 	mvn.w	r2, #8
 8002eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f89a 	bl	800303e <HAL_TIM_IC_CaptureCallback>
 8002f0a:	e005      	b.n	8002f18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f88c 	bl	800302a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f89d 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d122      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d11b      	bne.n	8002f72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0210 	mvn.w	r2, #16
 8002f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2208      	movs	r2, #8
 8002f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f870 	bl	800303e <HAL_TIM_IC_CaptureCallback>
 8002f5e:	e005      	b.n	8002f6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f862 	bl	800302a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f873 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10e      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0201 	mvn.w	r2, #1
 8002f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fc31 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d10e      	bne.n	8002fca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f903 	bl	80031d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d107      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f838 	bl	8003066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d10e      	bne.n	8003022 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b20      	cmp	r3, #32
 8003010:	d107      	bne.n	8003022 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0220 	mvn.w	r2, #32
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8cd 	bl	80031bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a40      	ldr	r2, [pc, #256]	; (8003190 <TIM_Base_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d00f      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <TIM_Base_SetConfig+0x118>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00b      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <TIM_Base_SetConfig+0x11c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3b      	ldr	r2, [pc, #236]	; (800319c <TIM_Base_SetConfig+0x120>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d108      	bne.n	80030ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <TIM_Base_SetConfig+0x114>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d027      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIM_Base_SetConfig+0x118>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d023      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <TIM_Base_SetConfig+0x11c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <TIM_Base_SetConfig+0x120>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d017      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <TIM_Base_SetConfig+0x128>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <TIM_Base_SetConfig+0x12c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00f      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <TIM_Base_SetConfig+0x130>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <TIM_Base_SetConfig+0x134>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <TIM_Base_SetConfig+0x138>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <TIM_Base_SetConfig+0x13c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d108      	bne.n	8003140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <TIM_Base_SetConfig+0x114>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0xf8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	615a      	str	r2, [r3, #20]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40010400 	.word	0x40010400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800
 80031b0:	40001800 	.word	0x40001800
 80031b4:	40001c00 	.word	0x40001c00
 80031b8:	40002000 	.word	0x40002000

080031bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031e4:	b084      	sub	sp, #16
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	f107 001c 	add.w	r0, r7, #28
 80031f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d122      	bne.n	8003242 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 fa36 	bl	80046a8 <USB_CoreReset>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e01a      	b.n	8003278 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 fa2a 	bl	80046a8 <USB_CoreReset>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
 800326a:	e005      	b.n	8003278 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10b      	bne.n	8003296 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f043 0206 	orr.w	r2, r3, #6
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032a2:	b004      	add	sp, #16
 80032a4:	4770      	bx	lr
	...

080032a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d165      	bne.n	8003388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4a41      	ldr	r2, [pc, #260]	; (80033c4 <USB_SetTurnaroundTime+0x11c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d906      	bls.n	80032d2 <USB_SetTurnaroundTime+0x2a>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4a40      	ldr	r2, [pc, #256]	; (80033c8 <USB_SetTurnaroundTime+0x120>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d802      	bhi.n	80032d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032cc:	230f      	movs	r3, #15
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e062      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <USB_SetTurnaroundTime+0x120>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d906      	bls.n	80032e8 <USB_SetTurnaroundTime+0x40>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <USB_SetTurnaroundTime+0x124>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d802      	bhi.n	80032e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80032e2:	230e      	movs	r3, #14
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	e057      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a38      	ldr	r2, [pc, #224]	; (80033cc <USB_SetTurnaroundTime+0x124>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d906      	bls.n	80032fe <USB_SetTurnaroundTime+0x56>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <USB_SetTurnaroundTime+0x128>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d802      	bhi.n	80032fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032f8:	230d      	movs	r3, #13
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e04c      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a33      	ldr	r2, [pc, #204]	; (80033d0 <USB_SetTurnaroundTime+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d906      	bls.n	8003314 <USB_SetTurnaroundTime+0x6c>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <USB_SetTurnaroundTime+0x12c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800330e:	230c      	movs	r3, #12
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e041      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <USB_SetTurnaroundTime+0x12c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d906      	bls.n	800332a <USB_SetTurnaroundTime+0x82>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4a2e      	ldr	r2, [pc, #184]	; (80033d8 <USB_SetTurnaroundTime+0x130>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d802      	bhi.n	800332a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003324:	230b      	movs	r3, #11
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e036      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <USB_SetTurnaroundTime+0x130>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d906      	bls.n	8003340 <USB_SetTurnaroundTime+0x98>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <USB_SetTurnaroundTime+0x134>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d802      	bhi.n	8003340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800333a:	230a      	movs	r3, #10
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e02b      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a26      	ldr	r2, [pc, #152]	; (80033dc <USB_SetTurnaroundTime+0x134>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d906      	bls.n	8003356 <USB_SetTurnaroundTime+0xae>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <USB_SetTurnaroundTime+0x138>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d802      	bhi.n	8003356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003350:	2309      	movs	r3, #9
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e020      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <USB_SetTurnaroundTime+0x138>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d906      	bls.n	800336c <USB_SetTurnaroundTime+0xc4>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <USB_SetTurnaroundTime+0x13c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d802      	bhi.n	800336c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003366:	2308      	movs	r3, #8
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e015      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <USB_SetTurnaroundTime+0x13c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d906      	bls.n	8003382 <USB_SetTurnaroundTime+0xda>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <USB_SetTurnaroundTime+0x140>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d802      	bhi.n	8003382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800337c:	2307      	movs	r3, #7
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e00a      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003382:	2306      	movs	r3, #6
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e007      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800338e:	2309      	movs	r3, #9
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e001      	b.n	8003398 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003394:	2309      	movs	r3, #9
 8003396:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	00d8acbf 	.word	0x00d8acbf
 80033c8:	00e4e1bf 	.word	0x00e4e1bf
 80033cc:	00f423ff 	.word	0x00f423ff
 80033d0:	0106737f 	.word	0x0106737f
 80033d4:	011a499f 	.word	0x011a499f
 80033d8:	01312cff 	.word	0x01312cff
 80033dc:	014ca43f 	.word	0x014ca43f
 80033e0:	016e35ff 	.word	0x016e35ff
 80033e4:	01a6ab1f 	.word	0x01a6ab1f
 80033e8:	01e847ff 	.word	0x01e847ff

080033ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d106      	bne.n	800345c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e00b      	b.n	8003474 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	e001      	b.n	8003474 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e003      	b.n	800347c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003474:	2032      	movs	r0, #50	; 0x32
 8003476:	f7fd fbad 	bl	8000bd4 <HAL_Delay>

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003484:	b084      	sub	sp, #16
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e009      	b.n	80034b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3340      	adds	r3, #64	; 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3301      	adds	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b0e      	cmp	r3, #14
 80034bc:	d9f2      	bls.n	80034a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
 80034e8:	e00b      	b.n	8003502 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003508:	461a      	mov	r2, r3
 800350a:	2300      	movs	r3, #0
 800350c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003514:	4619      	mov	r1, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	461a      	mov	r2, r3
 800351e:	680b      	ldr	r3, [r1, #0]
 8003520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <USB_DevInit+0xb4>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800352e:	2100      	movs	r1, #0
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f961 	bl	80037f8 <USB_SetDevSpeed>
 8003536:	e008      	b.n	800354a <USB_DevInit+0xc6>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003538:	2101      	movs	r1, #1
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f95c 	bl	80037f8 <USB_SetDevSpeed>
 8003540:	e003      	b.n	800354a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003542:	2103      	movs	r1, #3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f957 	bl	80037f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800354a:	2110      	movs	r1, #16
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f90b 	bl	8003768 <USB_FlushTxFifo>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f929 	bl	80037b4 <USB_FlushRxFifo>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e043      	b.n	800361e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ac:	d118      	bne.n	80035e0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	461a      	mov	r2, r3
 80035c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e013      	b.n	80035f2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e008      	b.n	80035f2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	461a      	mov	r2, r3
 80035ee:	2300      	movs	r3, #0
 80035f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3301      	adds	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3b7      	bcc.n	8003596 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	e043      	b.n	80036b4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003642:	d118      	bne.n	8003676 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e013      	b.n	8003688 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e008      	b.n	8003688 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	461a      	mov	r2, r3
 8003696:	2300      	movs	r3, #0
 8003698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3301      	adds	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3b7      	bcc.n	800362c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ce:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d111      	bne.n	80036fa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	461a      	mov	r2, r3
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <USB_DevInit+0x2dc>)
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	f043 0303 	orr.w	r3, r3, #3
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003706:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <USB_DevInit+0x2e0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f043 0208 	orr.w	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800375a:	b004      	add	sp, #16
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	00800100 	.word	0x00800100
 8003764:	803c3800 	.word	0x803c3800

08003768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <USB_FlushTxFifo+0x48>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e006      	b.n	80037a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d0f0      	beq.n	8003782 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	00030d40 	.word	0x00030d40

080037b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2210      	movs	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3301      	adds	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <USB_FlushRxFifo+0x40>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e006      	b.n	80037e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d0f0      	beq.n	80037c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	00030d40 	.word	0x00030d40

080037f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
 800384e:	e00a      	b.n	8003866 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d002      	beq.n	800385c <USB_GetDevSpeed+0x32>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d102      	bne.n	8003862 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 800385c:	2303      	movs	r3, #3
 800385e:	75fb      	strb	r3, [r7, #23]
 8003860:	e001      	b.n	8003866 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d13a      	bne.n	8003906 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d155      	bne.n	8003974 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	78db      	ldrb	r3, [r3, #3]
 80038e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	059b      	lsls	r3, r3, #22
 80038ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038ec:	4313      	orrs	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e036      	b.n	8003974 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11a      	bne.n	8003974 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	78db      	ldrb	r3, [r3, #3]
 8003958:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800395a:	430b      	orrs	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d135      	bne.n	8003a0c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c0:	4013      	ands	r3, r2
 80039c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e4:	4013      	ands	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0159      	lsls	r1, r3, #5
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	4619      	mov	r1, r3
 8003a04:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <USB_DeactivateEndpoint+0x100>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	e034      	b.n	8003a76 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	041b      	lsls	r3, r3, #16
 8003a24:	43db      	mvns	r3, r3
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a50:	4013      	ands	r3, r2
 8003a52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	0159      	lsls	r1, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <USB_DeactivateEndpoint+0x104>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	ec337800 	.word	0xec337800
 8003a88:	eff37800 	.word	0xeff37800

08003a8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f040 8126 	bne.w	8003cfa <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d132      	bne.n	8003b1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	0151      	lsls	r1, r2, #5
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	440a      	add	r2, r1
 8003acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b14:	0cdb      	lsrs	r3, r3, #19
 8003b16:	04db      	lsls	r3, r3, #19
 8003b18:	6113      	str	r3, [r2, #16]
 8003b1a:	e074      	b.n	8003c06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b36:	0cdb      	lsrs	r3, r3, #19
 8003b38:	04db      	lsls	r3, r3, #19
 8003b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	0151      	lsls	r1, r2, #5
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	440a      	add	r2, r1
 8003b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6959      	ldr	r1, [r3, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	440b      	add	r3, r1
 8003b78:	1e59      	subs	r1, r3, #1
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b82:	04d9      	lsls	r1, r3, #19
 8003b84:	4b82      	ldr	r3, [pc, #520]	; (8003d90 <USB_EPStartXfer+0x304>)
 8003b86:	400b      	ands	r3, r1
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	0148      	lsls	r0, r1, #5
 8003b8c:	69f9      	ldr	r1, [r7, #28]
 8003b8e:	4401      	add	r1, r0
 8003b90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b94:	4313      	orrs	r3, r2
 8003b96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	0148      	lsls	r0, r1, #5
 8003bb2:	69f9      	ldr	r1, [r7, #28]
 8003bb4:	4401      	add	r1, r0
 8003bb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	78db      	ldrb	r3, [r3, #3]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d11f      	bne.n	8003c06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003be4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10e      	bne.n	8003c2a <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d022      	beq.n	8003c5a <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	6153      	str	r3, [r2, #20]
 8003c28:	e017      	b.n	8003c5a <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	78db      	ldrb	r3, [r3, #3]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d013      	beq.n	8003c5a <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00f      	beq.n	8003c5a <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c56:	4313      	orrs	r3, r2
 8003c58:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	78db      	ldrb	r3, [r3, #3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d128      	bne.n	8003cb4 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d110      	bne.n	8003c94 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00f      	b.n	8003cb4 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	0151      	lsls	r1, r2, #5
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	440a      	add	r2, r1
 8003caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd2:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	78db      	ldrb	r3, [r3, #3]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 80dd 	bne.w	8003e98 <USB_EPStartXfer+0x40c>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68d9      	ldr	r1, [r3, #12]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	b298      	uxth	r0, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa1b 	bl	800412e <USB_WritePacket>
 8003cf8:	e0ce      	b.n	8003e98 <USB_EPStartXfer+0x40c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d14:	0cdb      	lsrs	r3, r3, #19
 8003d16:	04db      	lsls	r3, r3, #19
 8003d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d126      	bne.n	8003d94 <USB_EPStartXfer+0x308>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	0148      	lsls	r0, r1, #5
 8003d60:	69f9      	ldr	r1, [r7, #28]
 8003d62:	4401      	add	r1, r0
 8003d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d8a:	6113      	str	r3, [r2, #16]
 8003d8c:	e036      	b.n	8003dfc <USB_EPStartXfer+0x370>
 8003d8e:	bf00      	nop
 8003d90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	8afb      	ldrh	r3, [r7, #22]
 8003dba:	04d9      	lsls	r1, r3, #19
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <USB_EPStartXfer+0x418>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	0148      	lsls	r0, r1, #5
 8003dc4:	69f9      	ldr	r1, [r7, #28]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	8af9      	ldrh	r1, [r7, #22]
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	0148      	lsls	r0, r1, #5
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	4401      	add	r1, r0
 8003df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d10d      	bne.n	8003e1e <USB_EPStartXfer+0x392>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <USB_EPStartXfer+0x392>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	78db      	ldrb	r3, [r3, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d128      	bne.n	8003e78 <USB_EPStartXfer+0x3ec>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d110      	bne.n	8003e58 <USB_EPStartXfer+0x3cc>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00f      	b.n	8003e78 <USB_EPStartXfer+0x3ec>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	1ff80000 	.word	0x1ff80000

08003ea8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 80bd 	bne.w	8004044 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d132      	bne.n	8003f38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f30:	0cdb      	lsrs	r3, r3, #19
 8003f32:	04db      	lsls	r3, r3, #19
 8003f34:	6113      	str	r3, [r2, #16]
 8003f36:	e04e      	b.n	8003fd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f52:	0cdb      	lsrs	r3, r3, #19
 8003f54:	04db      	lsls	r3, r3, #19
 8003f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d903      	bls.n	8003f90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	0148      	lsls	r0, r1, #5
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	4401      	add	r1, r0
 8003fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10e      	bne.n	8003ffa <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01e      	beq.n	8004022 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	6153      	str	r3, [r2, #20]
 8003ff8:	e013      	b.n	8004022 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00f      	beq.n	8004022 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	2101      	movs	r1, #1
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800401e:	4313      	orrs	r3, r2
 8004020:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	440a      	add	r2, r1
 8004038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e06d      	b.n	8004120 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405e:	0cdb      	lsrs	r3, r3, #19
 8004060:	04db      	lsls	r3, r3, #19
 8004062:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004086:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ce:	6939      	ldr	r1, [r7, #16]
 80040d0:	0148      	lsls	r0, r1, #5
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	4401      	add	r1, r0
 80040d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10d      	bne.n	8004100 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	68d9      	ldr	r1, [r3, #12]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	460a      	mov	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800411e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800412e:	b480      	push	{r7}
 8004130:	b089      	sub	sp, #36	; 0x24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	4611      	mov	r1, r2
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	71fb      	strb	r3, [r7, #7]
 8004140:	4613      	mov	r3, r2
 8004142:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800414c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11a      	bne.n	800418a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004154:	88bb      	ldrh	r3, [r7, #4]
 8004156:	3303      	adds	r3, #3
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e00f      	b.n	8004182 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	031a      	lsls	r2, r3, #12
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	461a      	mov	r2, r3
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3304      	adds	r3, #4
 800417a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	3301      	adds	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3eb      	bcc.n	8004162 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3724      	adds	r7, #36	; 0x24
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	3303      	adds	r3, #3
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e00b      	b.n	80041d4 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3304      	adds	r3, #4
 80041cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d3ef      	bcc.n	80041bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80041dc:	69fb      	ldr	r3, [r7, #28]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d12c      	bne.n	8004260 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db12      	blt.n	800423e <USB_EPSetStall+0x54>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00f      	beq.n	800423e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800423c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e02b      	b.n	80042b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db12      	blt.n	8004298 <USB_EPSetStall+0xae>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00f      	beq.n	8004298 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004296:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d128      	bne.n	8004334 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d003      	beq.n	8004312 <USB_EPClearStall+0x4c>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	78db      	ldrb	r3, [r3, #3]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d138      	bne.n	8004384 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e027      	b.n	8004384 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004352:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d003      	beq.n	8004364 <USB_EPClearStall+0x9e>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	78db      	ldrb	r3, [r3, #3]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d10f      	bne.n	8004384 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f8:	f023 0302 	bic.w	r3, r3, #2
 80043fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80043fe:	2003      	movs	r0, #3
 8004400:	f7fc fbe8 	bl	8000bd4 <HAL_Delay>

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800442e:	2003      	movs	r0, #3
 8004430:	f7fc fbd0 	bl	8000bd4 <HAL_Delay>

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0c1b      	lsrs	r3, r3, #16
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	b29b      	uxth	r3, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044fa:	68bb      	ldr	r3, [r7, #8]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	b2db      	uxtb	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004556:	68bb      	ldr	r3, [r7, #8]
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0301 	and.w	r3, r3, #1
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0306 	and.w	r3, r3, #6
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d109      	bne.n	80045c8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c2:	f043 0303 	orr.w	r3, r3, #3
 80045c6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	460b      	mov	r3, r1
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	333c      	adds	r3, #60	; 0x3c
 8004602:	3304      	adds	r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <USB_EP0_OutStart+0xb8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d90a      	bls.n	8004626 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800461c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004620:	d101      	bne.n	8004626 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e037      	b.n	8004696 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	2300      	movs	r3, #0
 8004630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f043 0318 	orr.w	r3, r3, #24
 8004658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004668:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800466c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800466e:	7afb      	ldrb	r3, [r7, #11]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10f      	bne.n	8004694 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	4f54300a 	.word	0x4f54300a

080046a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a13      	ldr	r2, [pc, #76]	; (800470c <USB_CoreReset+0x64>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e01b      	b.n	80046fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	daf2      	bge.n	80046b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <USB_CoreReset+0x64>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e006      	b.n	80046fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d0f0      	beq.n	80046de <USB_CoreReset+0x36>

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	00030d40 	.word	0x00030d40

08004710 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7c1b      	ldrb	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d115      	bne.n	8004754 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472c:	2202      	movs	r2, #2
 800472e:	2181      	movs	r1, #129	; 0x81
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f004 fb92 	bl	8008e5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800473c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004740:	2202      	movs	r2, #2
 8004742:	2101      	movs	r1, #1
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f004 fb88 	bl	8008e5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004752:	e012      	b.n	800477a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	2202      	movs	r2, #2
 8004758:	2181      	movs	r1, #129	; 0x81
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f004 fb7d 	bl	8008e5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	2202      	movs	r2, #2
 800476a:	2101      	movs	r1, #1
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f004 fb74 	bl	8008e5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800477a:	2308      	movs	r3, #8
 800477c:	2203      	movs	r2, #3
 800477e:	2182      	movs	r1, #130	; 0x82
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f004 fb6a 	bl	8008e5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800478c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004790:	f004 fce0 	bl	8009154 <malloc>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
 80047ac:	e026      	b.n	80047fc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7c1b      	ldrb	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e2:	2101      	movs	r1, #1
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f004 fc29 	bl	800903c <USBD_LL_PrepareReceive>
 80047ea:	e007      	b.n	80047fc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047f2:	2340      	movs	r3, #64	; 0x40
 80047f4:	2101      	movs	r1, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f004 fc20 	bl	800903c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004816:	2181      	movs	r1, #129	; 0x81
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f004 fb44 	bl	8008ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004824:	2101      	movs	r1, #1
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f004 fb3d 	bl	8008ea6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004834:	2182      	movs	r1, #130	; 0x82
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f004 fb35 	bl	8008ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800485c:	4618      	mov	r0, r3
 800485e:	f004 fc81 	bl	8009164 <free>
    pdev->pClassData = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004884:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800489a:	2b00      	cmp	r3, #0
 800489c:	d039      	beq.n	8004912 <USBD_CDC_Setup+0x9e>
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d17c      	bne.n	800499c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	88db      	ldrh	r3, [r3, #6]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d029      	beq.n	80048fe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da11      	bge.n	80048d8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80048c0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	88d2      	ldrh	r2, [r2, #6]
 80048c6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048c8:	6939      	ldr	r1, [r7, #16]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	88db      	ldrh	r3, [r3, #6]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 f9b5 	bl	8005c40 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80048d6:	e068      	b.n	80049aa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785a      	ldrb	r2, [r3, #1]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	88db      	ldrh	r3, [r3, #6]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	88db      	ldrh	r3, [r3, #6]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f001 f9d0 	bl	8005c9c <USBD_CtlPrepareRx>
    break;
 80048fc:	e055      	b.n	80049aa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	7850      	ldrb	r0, [r2, #1]
 800490a:	2200      	movs	r2, #0
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	4798      	blx	r3
    break;
 8004910:	e04b      	b.n	80049aa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b0a      	cmp	r3, #10
 8004918:	d017      	beq.n	800494a <USBD_CDC_Setup+0xd6>
 800491a:	2b0b      	cmp	r3, #11
 800491c:	d029      	beq.n	8004972 <USBD_CDC_Setup+0xfe>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d133      	bne.n	800498a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004928:	2b03      	cmp	r3, #3
 800492a:	d107      	bne.n	800493c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	2202      	movs	r2, #2
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 f983 	bl	8005c40 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800493a:	e02e      	b.n	800499a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 f913 	bl	8005b6a <USBD_CtlError>
			  ret = USBD_FAIL;
 8004944:	2302      	movs	r3, #2
 8004946:	75fb      	strb	r3, [r7, #23]
      break;
 8004948:	e027      	b.n	800499a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004950:	2b03      	cmp	r3, #3
 8004952:	d107      	bne.n	8004964 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004954:	f107 030f 	add.w	r3, r7, #15
 8004958:	2201      	movs	r2, #1
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f001 f96f 	bl	8005c40 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004962:	e01a      	b.n	800499a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 f8ff 	bl	8005b6a <USBD_CtlError>
			  ret = USBD_FAIL;
 800496c:	2302      	movs	r3, #2
 800496e:	75fb      	strb	r3, [r7, #23]
      break;
 8004970:	e013      	b.n	800499a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004978:	2b03      	cmp	r3, #3
 800497a:	d00d      	beq.n	8004998 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 f8f3 	bl	8005b6a <USBD_CtlError>
			  ret = USBD_FAIL;
 8004984:	2302      	movs	r3, #2
 8004986:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004988:	e006      	b.n	8004998 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 f8ec 	bl	8005b6a <USBD_CtlError>
      ret = USBD_FAIL;
 8004992:	2302      	movs	r3, #2
 8004994:	75fb      	strb	r3, [r7, #23]
      break;
 8004996:	e000      	b.n	800499a <USBD_CDC_Setup+0x126>
      break;
 8004998:	bf00      	nop
    }
    break;
 800499a:	e006      	b.n	80049aa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 f8e3 	bl	8005b6a <USBD_CtlError>
    ret = USBD_FAIL;
 80049a4:	2302      	movs	r3, #2
 80049a6:	75fb      	strb	r3, [r7, #23]
    break;
 80049a8:	bf00      	nop
  }

  return ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80049c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80049ce:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d03a      	beq.n	8004a50 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	331c      	adds	r3, #28
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d029      	beq.n	8004a44 <USBD_CDC_DataIn+0x90>
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	331c      	adds	r3, #28
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	78f9      	ldrb	r1, [r7, #3]
 8004a04:	68b8      	ldr	r0, [r7, #8]
 8004a06:	460b      	mov	r3, r1
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	1a5b      	subs	r3, r3, r1
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4403      	add	r3, r0
 8004a10:	3344      	adds	r3, #68	; 0x44
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a18:	fb03 f301 	mul.w	r3, r3, r1
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d110      	bne.n	8004a44 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	331c      	adds	r3, #28
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004a36:	78f9      	ldrb	r1, [r7, #3]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f004 fada 	bl	8008ff6 <USBD_LL_Transmit>
 8004a42:	e003      	b.n	8004a4c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f004 fb05 	bl	8009082 <USBD_LL_GetRxDataSize>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4798      	blx	r3

    return USBD_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e000      	b.n	8004aa8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004abe:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d015      	beq.n	8004af6 <USBD_CDC_EP0_RxReady+0x46>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ad0:	2bff      	cmp	r3, #255	; 0xff
 8004ad2:	d010      	beq.n	8004af6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004ae2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004aea:	b292      	uxth	r2, r2
 8004aec:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2243      	movs	r2, #67	; 0x43
 8004b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004b0e:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000090 	.word	0x20000090

08004b20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2243      	movs	r2, #67	; 0x43
 8004b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004b2e:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000004c 	.word	0x2000004c

08004b40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2243      	movs	r2, #67	; 0x43
 8004b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004b4e:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	200000d4 	.word	0x200000d4

08004b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	220a      	movs	r2, #10
 8004b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	20000008 	.word	0x20000008

08004b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004bc2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004bf2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d017      	beq.n	8004c54 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7c1b      	ldrb	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c36:	2101      	movs	r1, #1
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f004 f9ff 	bl	800903c <USBD_LL_PrepareReceive>
 8004c3e:	e007      	b.n	8004c50 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c46:	2340      	movs	r3, #64	; 0x40
 8004c48:	2101      	movs	r1, #1
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f004 f9f6 	bl	800903c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e000      	b.n	8004c56 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004c54:	2302      	movs	r3, #2
  }
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8004c74:	4814      	ldr	r0, [pc, #80]	; (8004cc8 <USBD_Init+0x68>)
 8004c76:	f004 fb39 	bl	80092ec <iprintf>
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <USBD_Init+0x6c>)
 8004c7c:	f004 fb36 	bl	80092ec <iprintf>
 8004c80:	200a      	movs	r0, #10
 8004c82:	f004 fb4b 	bl	800931c <putchar>
#endif
    return USBD_FAIL;
 8004c86:	2302      	movs	r3, #2
 8004c88:	e01a      	b.n	8004cc0 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	79fa      	ldrb	r2, [r7, #7]
 8004cb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f004 f867 	bl	8008d8c <USBD_LL_Init>

  return USBD_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	0800a024 	.word	0x0800a024
 8004ccc:	0800a02c 	.word	0x0800a02c

08004cd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	e00a      	b.n	8004d08 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8004cf2:	4808      	ldr	r0, [pc, #32]	; (8004d14 <USBD_RegisterClass+0x44>)
 8004cf4:	f004 fafa 	bl	80092ec <iprintf>
 8004cf8:	4807      	ldr	r0, [pc, #28]	; (8004d18 <USBD_RegisterClass+0x48>)
 8004cfa:	f004 faf7 	bl	80092ec <iprintf>
 8004cfe:	200a      	movs	r0, #10
 8004d00:	f004 fb0c 	bl	800931c <putchar>
#endif
    status = USBD_FAIL;
 8004d04:	2302      	movs	r3, #2
 8004d06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	0800a024 	.word	0x0800a024
 8004d18:	0800a044 	.word	0x0800a044

08004d1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f004 f87d 	bl	8008e24 <USBD_LL_Start>

  return USBD_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004d56:	2302      	movs	r3, #2
 8004d58:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
  return USBD_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fe95 	bl	8005af0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d00c      	beq.n	8004e04 <USBD_LL_SetupStage+0x56>
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d302      	bcc.n	8004df4 <USBD_LL_SetupStage+0x46>
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d010      	beq.n	8004e14 <USBD_LL_SetupStage+0x66>
 8004df2:	e017      	b.n	8004e24 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fa05 	bl	800520c <USBD_StdDevReq>
    break;
 8004e02:	e01a      	b.n	8004e3a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fa67 	bl	80052e0 <USBD_StdItfReq>
    break;
 8004e12:	e012      	b.n	8004e3a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 faa5 	bl	800536c <USBD_StdEPReq>
    break;
 8004e22:	e00a      	b.n	8004e3a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f004 f856 	bl	8008ee4 <USBD_LL_StallEP>
    break;
 8004e38:	bf00      	nop
  }

  return USBD_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004e52:	7afb      	ldrb	r3, [r7, #11]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d14b      	bne.n	8004ef0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004e5e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d134      	bne.n	8004ed4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d919      	bls.n	8004eaa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d203      	bcs.n	8004e98 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	e002      	b.n	8004e9e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 ff18 	bl	8005cd8 <USBD_CtlContinueRx>
 8004ea8:	e038      	b.n	8004f1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d105      	bne.n	8004ecc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 ff15 	bl	8005cfc <USBD_CtlSendStatus>
 8004ed2:	e023      	b.n	8004f1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d11e      	bne.n	8004f1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f003 fffb 	bl	8008ee4 <USBD_LL_StallEP>
 8004eee:	e015      	b.n	8004f1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d108      	bne.n	8004f18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	7afa      	ldrb	r2, [r7, #11]
 8004f10:	4611      	mov	r1, r2
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	4798      	blx	r3
 8004f16:	e001      	b.n	8004f1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e000      	b.n	8004f1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d17f      	bne.n	800503a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d15c      	bne.n	8005004 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d915      	bls.n	8004f82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fe82 	bl	8005c78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f004 f85e 	bl	800903c <USBD_LL_PrepareReceive>
 8004f80:	e04e      	b.n	8005020 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	6912      	ldr	r2, [r2, #16]
 8004f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f8e:	fb02 f201 	mul.w	r2, r2, r1
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11c      	bne.n	8004fd2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d316      	bcc.n	8004fd2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d20f      	bcs.n	8004fd2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fe5e 	bl	8005c78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f004 f836 	bl	800903c <USBD_LL_PrepareReceive>
 8004fd0:	e026      	b.n	8005020 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d105      	bne.n	8004ff4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f003 ff74 	bl	8008ee4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fe90 	bl	8005d22 <USBD_CtlReceiveStatus>
 8005002:	e00d      	b.n	8005020 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800500a:	2b04      	cmp	r3, #4
 800500c:	d004      	beq.n	8005018 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f003 ff62 	bl	8008ee4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005026:	2b01      	cmp	r3, #1
 8005028:	d11d      	bne.n	8005066 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fe82 	bl	8004d34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005038:	e015      	b.n	8005066 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800504c:	2b03      	cmp	r3, #3
 800504e:	d108      	bne.n	8005062 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	7afa      	ldrb	r2, [r7, #11]
 800505a:	4611      	mov	r1, r2
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	4798      	blx	r3
 8005060:	e001      	b.n	8005066 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005062:	2302      	movs	r3, #2
 8005064:	e000      	b.n	8005068 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f003 feeb 	bl	8008e5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	2200      	movs	r2, #0
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f003 fedd 	bl	8008e5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2240      	movs	r2, #64	; 0x40
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6852      	ldr	r2, [r2, #4]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	4611      	mov	r1, r2
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
  }

  return USBD_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2204      	movs	r2, #4
 800512a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800516c:	2b03      	cmp	r3, #3
 800516e:	d10b      	bne.n	8005188 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6852      	ldr	r2, [r2, #4]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3

  return USBD_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005222:	2b20      	cmp	r3, #32
 8005224:	d004      	beq.n	8005230 <USBD_StdDevReq+0x24>
 8005226:	2b40      	cmp	r3, #64	; 0x40
 8005228:	d002      	beq.n	8005230 <USBD_StdDevReq+0x24>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <USBD_StdDevReq+0x34>
 800522e:	e04c      	b.n	80052ca <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
    break;
 800523e:	e049      	b.n	80052d4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b09      	cmp	r3, #9
 8005246:	d83a      	bhi.n	80052be <USBD_StdDevReq+0xb2>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <USBD_StdDevReq+0x44>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080052b5 	.word	0x080052b5
 8005258:	080052bf 	.word	0x080052bf
 800525c:	080052ab 	.word	0x080052ab
 8005260:	080052bf 	.word	0x080052bf
 8005264:	08005283 	.word	0x08005283
 8005268:	08005279 	.word	0x08005279
 800526c:	080052bf 	.word	0x080052bf
 8005270:	08005297 	.word	0x08005297
 8005274:	0800528d 	.word	0x0800528d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9d2 	bl	8005624 <USBD_GetDescriptor>
      break;
 8005280:	e022      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fac7 	bl	8005818 <USBD_SetAddress>
      break;
 800528a:	e01d      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fb04 	bl	800589c <USBD_SetConfig>
      break;
 8005294:	e018      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb8d 	bl	80059b8 <USBD_GetConfig>
      break;
 800529e:	e013      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fbbc 	bl	8005a20 <USBD_GetStatus>
      break;
 80052a8:	e00e      	b.n	80052c8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fbea 	bl	8005a86 <USBD_SetFeature>
      break;
 80052b2:	e009      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fbf9 	bl	8005aae <USBD_ClrFeature>
      break;
 80052bc:	e004      	b.n	80052c8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fc52 	bl	8005b6a <USBD_CtlError>
      break;
 80052c6:	bf00      	nop
    }
    break;
 80052c8:	e004      	b.n	80052d4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc4c 	bl	8005b6a <USBD_CtlError>
    break;
 80052d2:	bf00      	nop
  }

  return ret;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop

080052e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d003      	beq.n	8005302 <USBD_StdItfReq+0x22>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d001      	beq.n	8005302 <USBD_StdItfReq+0x22>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d12a      	bne.n	8005358 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005308:	3b01      	subs	r3, #1
 800530a:	2b02      	cmp	r3, #2
 800530c:	d81d      	bhi.n	800534a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	889b      	ldrh	r3, [r3, #4]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d813      	bhi.n	8005340 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	88db      	ldrh	r3, [r3, #6]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d110      	bne.n	8005354 <USBD_StdItfReq+0x74>
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fcdf 	bl	8005cfc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800533e:	e009      	b.n	8005354 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fc11 	bl	8005b6a <USBD_CtlError>
      break;
 8005348:	e004      	b.n	8005354 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc0c 	bl	8005b6a <USBD_CtlError>
      break;
 8005352:	e000      	b.n	8005356 <USBD_StdItfReq+0x76>
      break;
 8005354:	bf00      	nop
    }
    break;
 8005356:	e004      	b.n	8005362 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fc05 	bl	8005b6a <USBD_CtlError>
    break;
 8005360:	bf00      	nop
  }

  return USBD_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	889b      	ldrh	r3, [r3, #4]
 800537e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005388:	2b20      	cmp	r3, #32
 800538a:	d004      	beq.n	8005396 <USBD_StdEPReq+0x2a>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d002      	beq.n	8005396 <USBD_StdEPReq+0x2a>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <USBD_StdEPReq+0x3a>
 8005394:	e13b      	b.n	800560e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
    break;
 80053a4:	e138      	b.n	8005618 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d10a      	bne.n	80053c8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	e128      	b.n	800561a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d03e      	beq.n	800544e <USBD_StdEPReq+0xe2>
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d002      	beq.n	80053da <USBD_StdEPReq+0x6e>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d070      	beq.n	80054ba <USBD_StdEPReq+0x14e>
 80053d8:	e113      	b.n	8005602 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d002      	beq.n	80053ea <USBD_StdEPReq+0x7e>
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d015      	beq.n	8005414 <USBD_StdEPReq+0xa8>
 80053e8:	e02b      	b.n	8005442 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00c      	beq.n	800540a <USBD_StdEPReq+0x9e>
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d009      	beq.n	800540a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f003 fd72 	bl	8008ee4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f003 fd6e 	bl	8008ee4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005408:	e020      	b.n	800544c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fbac 	bl	8005b6a <USBD_CtlError>
        break;
 8005412:	e01b      	b.n	800544c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	885b      	ldrh	r3, [r3, #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10e      	bne.n	800543a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <USBD_StdEPReq+0xce>
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d008      	beq.n	800543a <USBD_StdEPReq+0xce>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	88db      	ldrh	r3, [r3, #6]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f003 fd55 	bl	8008ee4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fc5e 	bl	8005cfc <USBD_CtlSendStatus>

        break;
 8005440:	e004      	b.n	800544c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fb90 	bl	8005b6a <USBD_CtlError>
        break;
 800544a:	bf00      	nop
      }
      break;
 800544c:	e0de      	b.n	800560c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005454:	2b02      	cmp	r3, #2
 8005456:	d002      	beq.n	800545e <USBD_StdEPReq+0xf2>
 8005458:	2b03      	cmp	r3, #3
 800545a:	d015      	beq.n	8005488 <USBD_StdEPReq+0x11c>
 800545c:	e026      	b.n	80054ac <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <USBD_StdEPReq+0x112>
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	d009      	beq.n	800547e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f003 fd38 	bl	8008ee4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005474:	2180      	movs	r1, #128	; 0x80
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f003 fd34 	bl	8008ee4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800547c:	e01c      	b.n	80054b8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb72 	bl	8005b6a <USBD_CtlError>
        break;
 8005486:	e017      	b.n	80054b8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	885b      	ldrh	r3, [r3, #2]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d112      	bne.n	80054b6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f003 fd3f 	bl	8008f22 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fc29 	bl	8005cfc <USBD_CtlSendStatus>
        }
        break;
 80054aa:	e004      	b.n	80054b6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fb5b 	bl	8005b6a <USBD_CtlError>
        break;
 80054b4:	e000      	b.n	80054b8 <USBD_StdEPReq+0x14c>
        break;
 80054b6:	bf00      	nop
      }
      break;
 80054b8:	e0a8      	b.n	800560c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d002      	beq.n	80054ca <USBD_StdEPReq+0x15e>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d031      	beq.n	800552c <USBD_StdEPReq+0x1c0>
 80054c8:	e095      	b.n	80055f6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <USBD_StdEPReq+0x174>
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d004      	beq.n	80054e0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fb46 	bl	8005b6a <USBD_CtlError>
          break;
 80054de:	e08f      	b.n	8005600 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80054e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da0b      	bge.n	8005500 <USBD_StdEPReq+0x194>
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	3310      	adds	r3, #16
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	e00a      	b.n	8005516 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2202      	movs	r2, #2
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb8b 	bl	8005c40 <USBD_CtlSendData>
          break;
 800552a:	e069      	b.n	8005600 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800552c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da11      	bge.n	8005558 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3318      	adds	r3, #24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d117      	bne.n	800557e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb0a 	bl	8005b6a <USBD_CtlError>
            break;
 8005556:	e053      	b.n	8005600 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005558:	7bbb      	ldrb	r3, [r7, #14]
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 faf7 	bl	8005b6a <USBD_CtlError>
            break;
 800557c:	e040      	b.n	8005600 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800557e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0b      	bge.n	800559e <USBD_StdEPReq+0x232>
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	e00a      	b.n	80055b4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <USBD_StdEPReq+0x256>
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d103      	bne.n	80055ca <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e00e      	b.n	80055e8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f003 fcc6 	bl	8008f60 <USBD_LL_IsStallEP>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e002      	b.n	80055e8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2202      	movs	r2, #2
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fb26 	bl	8005c40 <USBD_CtlSendData>
          break;
 80055f4:	e004      	b.n	8005600 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fab6 	bl	8005b6a <USBD_CtlError>
        break;
 80055fe:	bf00      	nop
      }
      break;
 8005600:	e004      	b.n	800560c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fab0 	bl	8005b6a <USBD_CtlError>
      break;
 800560a:	bf00      	nop
    }
    break;
 800560c:	e004      	b.n	8005618 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 faaa 	bl	8005b6a <USBD_CtlError>
    break;
 8005616:	bf00      	nop
  }

  return ret;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	885b      	ldrh	r3, [r3, #2]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	2b06      	cmp	r3, #6
 800563a:	f200 80c9 	bhi.w	80057d0 <USBD_GetDescriptor+0x1ac>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <USBD_GetDescriptor+0x20>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005661 	.word	0x08005661
 8005648:	08005679 	.word	0x08005679
 800564c:	080056b9 	.word	0x080056b9
 8005650:	080057d1 	.word	0x080057d1
 8005654:	080057d1 	.word	0x080057d1
 8005658:	0800577d 	.word	0x0800577d
 800565c:	080057a3 	.word	0x080057a3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	7c12      	ldrb	r2, [r2, #16]
 800566c:	f107 010a 	add.w	r1, r7, #10
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
 8005674:	60f8      	str	r0, [r7, #12]
    break;
 8005676:	e0b0      	b.n	80057da <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7c1b      	ldrb	r3, [r3, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10d      	bne.n	800569c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f107 020a 	add.w	r2, r7, #10
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800569a:	e09e      	b.n	80057da <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f107 020a 	add.w	r2, r7, #10
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
 80056ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	2202      	movs	r2, #2
 80056b4:	701a      	strb	r2, [r3, #0]
    break;
 80056b6:	e090      	b.n	80057da <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	885b      	ldrh	r3, [r3, #2]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d856      	bhi.n	8005770 <USBD_GetDescriptor+0x14c>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <USBD_GetDescriptor+0xa4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	08005711 	.word	0x08005711
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005741 	.word	0x08005741
 80056dc:	08005759 	.word	0x08005759
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7c12      	ldrb	r2, [r2, #16]
 80056ec:	f107 010a 	add.w	r1, r7, #10
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
 80056f4:	60f8      	str	r0, [r7, #12]
      break;
 80056f6:	e040      	b.n	800577a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	7c12      	ldrb	r2, [r2, #16]
 8005704:	f107 010a 	add.w	r1, r7, #10
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	60f8      	str	r0, [r7, #12]
      break;
 800570e:	e034      	b.n	800577a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	7c12      	ldrb	r2, [r2, #16]
 800571c:	f107 010a 	add.w	r1, r7, #10
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	60f8      	str	r0, [r7, #12]
      break;
 8005726:	e028      	b.n	800577a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	7c12      	ldrb	r2, [r2, #16]
 8005734:	f107 010a 	add.w	r1, r7, #10
 8005738:	4610      	mov	r0, r2
 800573a:	4798      	blx	r3
 800573c:	60f8      	str	r0, [r7, #12]
      break;
 800573e:	e01c      	b.n	800577a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	7c12      	ldrb	r2, [r2, #16]
 800574c:	f107 010a 	add.w	r1, r7, #10
 8005750:	4610      	mov	r0, r2
 8005752:	4798      	blx	r3
 8005754:	60f8      	str	r0, [r7, #12]
      break;
 8005756:	e010      	b.n	800577a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	7c12      	ldrb	r2, [r2, #16]
 8005764:	f107 010a 	add.w	r1, r7, #10
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3
 800576c:	60f8      	str	r0, [r7, #12]
      break;
 800576e:	e004      	b.n	800577a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9f9 	bl	8005b6a <USBD_CtlError>
      return;
 8005778:	e04b      	b.n	8005812 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800577a:	e02e      	b.n	80057da <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	7c1b      	ldrb	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	f107 020a 	add.w	r2, r7, #10
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
 8005794:	60f8      	str	r0, [r7, #12]
      break;
 8005796:	e020      	b.n	80057da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9e5 	bl	8005b6a <USBD_CtlError>
      return;
 80057a0:	e037      	b.n	8005812 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7c1b      	ldrb	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f107 020a 	add.w	r2, r7, #10
 80057b6:	4610      	mov	r0, r2
 80057b8:	4798      	blx	r3
 80057ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	2207      	movs	r2, #7
 80057c2:	701a      	strb	r2, [r3, #0]
      break;
 80057c4:	e009      	b.n	80057da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9ce 	bl	8005b6a <USBD_CtlError>
      return;
 80057ce:	e020      	b.n	8005812 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9c9 	bl	8005b6a <USBD_CtlError>
    return;
 80057d8:	e01b      	b.n	8005812 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80057da:	897b      	ldrh	r3, [r7, #10]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <USBD_GetDescriptor+0x1e0>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00d      	beq.n	8005804 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	88da      	ldrh	r2, [r3, #6]
 80057ec:	897b      	ldrh	r3, [r7, #10]
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bf28      	it	cs
 80057f2:	4613      	movcs	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80057f8:	897b      	ldrh	r3, [r7, #10]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa1e 	bl	8005c40 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa75 	bl	8005cfc <USBD_CtlSendStatus>
  }
}
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	889b      	ldrh	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d130      	bne.n	800588c <USBD_SetAddress+0x74>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	88db      	ldrh	r3, [r3, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12c      	bne.n	800588c <USBD_SetAddress+0x74>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	885b      	ldrh	r3, [r3, #2]
 8005836:	2b7f      	cmp	r3, #127	; 0x7f
 8005838:	d828      	bhi.n	800588c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	885b      	ldrh	r3, [r3, #2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800584c:	2b03      	cmp	r3, #3
 800584e:	d104      	bne.n	800585a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f989 	bl	8005b6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005858:	e01c      	b.n	8005894 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f003 fba6 	bl	8008fb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa45 	bl	8005cfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	e008      	b.n	8005894 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588a:	e003      	b.n	8005894 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f96b 	bl	8005b6a <USBD_CtlError>
  }
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	885b      	ldrh	r3, [r3, #2]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b41      	ldr	r3, [pc, #260]	; (80059b4 <USBD_SetConfig+0x118>)
 80058ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058b0:	4b40      	ldr	r3, [pc, #256]	; (80059b4 <USBD_SetConfig+0x118>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d904      	bls.n	80058c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f955 	bl	8005b6a <USBD_CtlError>
 80058c0:	e075      	b.n	80059ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d002      	beq.n	80058d2 <USBD_SetConfig+0x36>
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d023      	beq.n	8005918 <USBD_SetConfig+0x7c>
 80058d0:	e062      	b.n	8005998 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80058d2:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <USBD_SetConfig+0x118>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01a      	beq.n	8005910 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <USBD_SetConfig+0x118>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2203      	movs	r2, #3
 80058e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058ec:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <USBD_SetConfig+0x118>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fa29 	bl	8004d4a <USBD_SetClassConfig>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d104      	bne.n	8005908 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f932 	bl	8005b6a <USBD_CtlError>
          return;
 8005906:	e052      	b.n	80059ae <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f9f7 	bl	8005cfc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800590e:	e04e      	b.n	80059ae <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f9f3 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 8005916:	e04a      	b.n	80059ae <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <USBD_SetConfig+0x118>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d112      	bne.n	8005946 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005928:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <USBD_SetConfig+0x118>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <USBD_SetConfig+0x118>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fa25 	bl	8004d88 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f9dc 	bl	8005cfc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005944:	e033      	b.n	80059ae <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005946:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <USBD_SetConfig+0x118>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d01d      	beq.n	8005990 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fa13 	bl	8004d88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <USBD_SetConfig+0x118>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <USBD_SetConfig+0x118>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff f9e9 	bl	8004d4a <USBD_SetClassConfig>
 8005978:	4603      	mov	r3, r0
 800597a:	2b02      	cmp	r3, #2
 800597c:	d104      	bne.n	8005988 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8f2 	bl	8005b6a <USBD_CtlError>
          return;
 8005986:	e012      	b.n	80059ae <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9b7 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 800598e:	e00e      	b.n	80059ae <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9b3 	bl	8005cfc <USBD_CtlSendStatus>
      break;
 8005996:	e00a      	b.n	80059ae <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8e5 	bl	8005b6a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <USBD_SetConfig+0x118>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff f9ee 	bl	8004d88 <USBD_ClrClassConfig>
      break;
 80059ac:	bf00      	nop
    }
  }
}
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000200 	.word	0x20000200

080059b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	88db      	ldrh	r3, [r3, #6]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d004      	beq.n	80059d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8cc 	bl	8005b6a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80059d2:	e021      	b.n	8005a18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059da:	2b01      	cmp	r3, #1
 80059dc:	db17      	blt.n	8005a0e <USBD_GetConfig+0x56>
 80059de:	2b02      	cmp	r3, #2
 80059e0:	dd02      	ble.n	80059e8 <USBD_GetConfig+0x30>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d00b      	beq.n	80059fe <USBD_GetConfig+0x46>
 80059e6:	e012      	b.n	8005a0e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3308      	adds	r3, #8
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f922 	bl	8005c40 <USBD_CtlSendData>
      break;
 80059fc:	e00c      	b.n	8005a18 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3304      	adds	r3, #4
 8005a02:	2201      	movs	r2, #1
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f91a 	bl	8005c40 <USBD_CtlSendData>
      break;
 8005a0c:	e004      	b.n	8005a18 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8aa 	bl	8005b6a <USBD_CtlError>
      break;
 8005a16:	bf00      	nop
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005a30:	3b01      	subs	r3, #1
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d81e      	bhi.n	8005a74 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d004      	beq.n	8005a48 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f892 	bl	8005b6a <USBD_CtlError>
      break;
 8005a46:	e01a      	b.n	8005a7e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f043 0202 	orr.w	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	330c      	adds	r3, #12
 8005a68:	2202      	movs	r2, #2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f8e7 	bl	8005c40 <USBD_CtlSendData>
    break;
 8005a72:	e004      	b.n	8005a7e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f877 	bl	8005b6a <USBD_CtlError>
    break;
 8005a7c:	bf00      	nop
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	885b      	ldrh	r3, [r3, #2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f92b 	bl	8005cfc <USBD_CtlSendStatus>
  }

}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d80b      	bhi.n	8005adc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	885b      	ldrh	r3, [r3, #2]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10c      	bne.n	8005ae6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f911 	bl	8005cfc <USBD_CtlSendStatus>
    }
    break;
 8005ada:	e004      	b.n	8005ae6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f843 	bl	8005b6a <USBD_CtlError>
    break;
 8005ae4:	e000      	b.n	8005ae8 <USBD_ClrFeature+0x3a>
    break;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	785a      	ldrb	r2, [r3, #1]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	3303      	adds	r3, #3
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	3305      	adds	r3, #5
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	3306      	adds	r3, #6
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	80da      	strh	r2, [r3, #6]

}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f003 f9b4 	bl	8008ee4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f003 f9b0 	bl	8008ee4 <USBD_LL_StallEP>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d032      	beq.n	8005c08 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f834 	bl	8005c10 <USBD_GetLen>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	75fa      	strb	r2, [r7, #23]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	75fa      	strb	r2, [r7, #23]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005bd8:	e012      	b.n	8005c00 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	60fa      	str	r2, [r7, #12]
 8005be0:	7dfa      	ldrb	r2, [r7, #23]
 8005be2:	1c51      	adds	r1, r2, #1
 8005be4:	75f9      	strb	r1, [r7, #23]
 8005be6:	4611      	mov	r1, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	440a      	add	r2, r1
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	75fa      	strb	r2, [r7, #23]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e8      	bne.n	8005bda <USBD_GetString+0x4e>
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8005c1c:	e005      	b.n	8005c2a <USBD_GetLen+0x1a>
    {
        len++;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	3301      	adds	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f5      	bne.n	8005c1e <USBD_GetLen+0xe>
    }

    return len;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	2100      	movs	r1, #0
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f003 f9c4 	bl	8008ff6 <USBD_LL_Transmit>

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f003 f9b2 	bl	8008ff6 <USBD_LL_Transmit>

  return USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005cba:	88fa      	ldrh	r2, [r7, #6]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f003 f9b7 	bl	800903c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	2100      	movs	r1, #0
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f003 f9a5 	bl	800903c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f003 f96f 	bl	8008ff6 <USBD_LL_Transmit>

  return USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005d32:	2300      	movs	r3, #0
 8005d34:	2200      	movs	r2, #0
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f003 f97f 	bl	800903c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4e:	f3ef 8305 	mrs	r3, IPSR
 8005d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <osKernelInitialize+0x32>
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <osKernelInitialize+0x64>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d109      	bne.n	8005d82 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d72:	603b      	str	r3, [r7, #0]
  return(result);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005d7a:	f06f 0305 	mvn.w	r3, #5
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e00c      	b.n	8005d9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <osKernelInitialize+0x64>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d105      	bne.n	8005d96 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <osKernelInitialize+0x64>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e002      	b.n	8005d9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000204 	.word	0x20000204

08005db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <osKernelStart+0x32>
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <osKernelStart+0x64>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d109      	bne.n	8005dea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	603b      	str	r3, [r7, #0]
  return(result);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8005de2:	f06f 0305 	mvn.w	r3, #5
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e00e      	b.n	8005e08 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <osKernelStart+0x64>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d107      	bne.n	8005e02 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005df2:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <osKernelStart+0x64>)
 8005df4:	2202      	movs	r2, #2
 8005df6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005df8:	f001 f86a 	bl	8006ed0 <vTaskStartScheduler>
      stat = osOK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e002      	b.n	8005e08 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000204 	.word	0x20000204

08005e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b092      	sub	sp, #72	; 0x48
 8005e1c:	af04      	add	r7, sp, #16
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e28:	f3ef 8305 	mrs	r3, IPSR
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 8094 	bne.w	8005f5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e36:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 808d 	bne.w	8005f5e <osThreadNew+0x146>
 8005e44:	4b48      	ldr	r3, [pc, #288]	; (8005f68 <osThreadNew+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d106      	bne.n	8005e5a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8082 	bne.w	8005f5e <osThreadNew+0x146>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d07e      	beq.n	8005f5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005e64:	2318      	movs	r3, #24
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005e68:	2300      	movs	r3, #0
 8005e6a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005e6c:	f107 031b 	add.w	r3, r7, #27
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d045      	beq.n	8005f0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <osThreadNew+0x74>
        name = attr->name;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <osThreadNew+0x9a>
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	2b38      	cmp	r3, #56	; 0x38
 8005ea4:	d805      	bhi.n	8005eb2 <osThreadNew+0x9a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <osThreadNew+0x9e>
        return (NULL);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e054      	b.n	8005f60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <osThreadNew+0xd4>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8005ed4:	d90a      	bls.n	8005eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <osThreadNew+0xd4>
        mem = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eea:	e010      	b.n	8005f0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <osThreadNew+0xf6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <osThreadNew+0xf6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <osThreadNew+0xf6>
          mem = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f08:	e001      	b.n	8005f0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d110      	bne.n	8005f36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f1c:	9202      	str	r2, [sp, #8]
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fe08 	bl	8006b40 <xTaskCreateStatic>
 8005f30:	4603      	mov	r3, r0
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e013      	b.n	8005f5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d110      	bne.n	8005f5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fe4f 	bl	8006bf2 <xTaskCreate>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <osThreadNew+0x146>
          hTask = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3738      	adds	r7, #56	; 0x38
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000204 	.word	0x20000204

08005f6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f74:	f3ef 8305 	mrs	r3, IPSR
 8005f78:	613b      	str	r3, [r7, #16]
  return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f80:	f3ef 8310 	mrs	r3, PRIMASK
 8005f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <osDelay+0x34>
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <osDelay+0x58>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d109      	bne.n	8005fa8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f94:	f3ef 8311 	mrs	r3, BASEPRI
 8005f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <osDelay+0x3c>
    stat = osErrorISR;
 8005fa0:	f06f 0305 	mvn.w	r3, #5
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e007      	b.n	8005fb8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 ff58 	bl	8006e68 <vTaskDelay>
    }
  }

  return (stat);
 8005fb8:	697b      	ldr	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000204 	.word	0x20000204

08005fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a06      	ldr	r2, [pc, #24]	; (8005ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8005fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000208 	.word	0x20000208
 8005ff8:	20000264 	.word	0x20000264

08005ffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a07      	ldr	r2, [pc, #28]	; (8006028 <vApplicationGetTimerTaskMemory+0x2c>)
 800600c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4a06      	ldr	r2, [pc, #24]	; (800602c <vApplicationGetTimerTaskMemory+0x30>)
 8006012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601a:	601a      	str	r2, [r3, #0]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	20000464 	.word	0x20000464
 800602c:	200004c0 	.word	0x200004c0

08006030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f103 0208 	add.w	r2, r3, #8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f04f 32ff 	mov.w	r2, #4294967295
 8006048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f103 0208 	add.w	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 0208 	add.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d103      	bne.n	80060f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e00c      	b.n	800610c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3308      	adds	r3, #8
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e002      	b.n	8006100 <vListInsert+0x2e>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d2f6      	bcs.n	80060fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6892      	ldr	r2, [r2, #8]
 800615a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6852      	ldr	r2, [r2, #4]
 8006164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d103      	bne.n	8006178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	1e5a      	subs	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	e7fe      	b.n	80061be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80061c0:	f001 ffd4 	bl	800816c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	3b01      	subs	r3, #1
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	441a      	add	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	22ff      	movs	r2, #255	; 0xff
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d114      	bne.n	8006240 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01a      	beq.n	8006254 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f8da 	bl	80073dc <xTaskRemoveFromEventList>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d012      	beq.n	8006254 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <xQueueGenericReset+0xcc>)
 8006230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	e009      	b.n	8006254 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3310      	adds	r3, #16
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fef3 	bl	8006030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3324      	adds	r3, #36	; 0x24
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff feee 	bl	8006030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006254:	f001 ffb8 	bl	80081c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006258:	2301      	movs	r3, #1
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08e      	sub	sp, #56	; 0x38
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <xQueueGenericCreateStatic+0x28>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	e7fe      	b.n	800628e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <xQueueGenericCreateStatic+0x42>
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <xQueueGenericCreateStatic+0x4e>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <xQueueGenericCreateStatic+0x52>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueGenericCreateStatic+0x54>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <xQueueGenericCreateStatic+0x6c>
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	623b      	str	r3, [r7, #32]
 80062d2:	e7fe      	b.n	80062d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <xQueueGenericCreateStatic+0x78>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <xQueueGenericCreateStatic+0x7c>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <xQueueGenericCreateStatic+0x7e>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <xQueueGenericCreateStatic+0x96>
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062fe:	2350      	movs	r3, #80	; 0x50
 8006300:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b50      	cmp	r3, #80	; 0x50
 8006306:	d009      	beq.n	800631c <xQueueGenericCreateStatic+0xb4>
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e7fe      	b.n	800631a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800632e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f805 	bl	800634c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	e002      	b.n	800636e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800637a:	2101      	movs	r1, #1
 800637c:	69b8      	ldr	r0, [r7, #24]
 800637e:	f7ff ff0b 	bl	8006198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08e      	sub	sp, #56	; 0x38
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <xQueueGenericSend+0x30>
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c2:	e7fe      	b.n	80063c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x3e>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <xQueueGenericSend+0x42>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueGenericSend+0x44>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <xQueueGenericSend+0x5c>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e7fe      	b.n	80063ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x6a>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <xQueueGenericSend+0x6e>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericSend+0x70>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <xQueueGenericSend+0x88>
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
 800641a:	e7fe      	b.n	800641a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800641c:	f001 f99a 	bl	8007754 <xTaskGetSchedulerState>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <xQueueGenericSend+0x98>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <xQueueGenericSend+0x9c>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <xQueueGenericSend+0x9e>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <xQueueGenericSend+0xb6>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e7fe      	b.n	8006448 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800644a:	f001 fe8f 	bl	800816c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <xQueueGenericSend+0xcc>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d129      	bne.n	80064b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006466:	f000 f9ff 	bl	8006868 <prvCopyDataToQueue>
 800646a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	3324      	adds	r3, #36	; 0x24
 8006478:	4618      	mov	r0, r3
 800647a:	f000 ffaf 	bl	80073dc <xTaskRemoveFromEventList>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006484:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <xQueueGenericSend+0x1f0>)
 8006486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	e00a      	b.n	80064ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800649c:	4b39      	ldr	r3, [pc, #228]	; (8006584 <xQueueGenericSend+0x1f0>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064ac:	f001 fe8c 	bl	80081c8 <vPortExitCritical>
				return pdPASS;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e063      	b.n	800657c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064ba:	f001 fe85 	bl	80081c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	e05c      	b.n	800657c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ffe7 	bl	80074a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d6:	f001 fe77 	bl	80081c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064da:	f000 fd5d 	bl	8006f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064de:	f001 fe45 	bl	800816c <vPortEnterCritical>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d103      	bne.n	80064f8 <xQueueGenericSend+0x164>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d103      	bne.n	800650e <xQueueGenericSend+0x17a>
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800650e:	f001 fe5b 	bl	80081c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006512:	1d3a      	adds	r2, r7, #4
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f000 ffd6 	bl	80074cc <xTaskCheckForTimeOut>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d124      	bne.n	8006570 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006528:	f000 fa96 	bl	8006a58 <prvIsQueueFull>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	3310      	adds	r3, #16
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f000 ff00 	bl	8007340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fa21 	bl	8006988 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006546:	f000 fd35 	bl	8006fb4 <xTaskResumeAll>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f af7c 	bne.w	800644a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006552:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <xQueueGenericSend+0x1f0>)
 8006554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	e772      	b.n	800644a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006566:	f000 fa0f 	bl	8006988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800656a:	f000 fd23 	bl	8006fb4 <xTaskResumeAll>
 800656e:	e76c      	b.n	800644a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006572:	f000 fa09 	bl	8006988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006576:	f000 fd1d 	bl	8006fb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800657a:	2300      	movs	r3, #0
		}
	}
}
 800657c:	4618      	mov	r0, r3
 800657e:	3738      	adds	r7, #56	; 0x38
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	; 0x38
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d109      	bne.n	80065b4 <xQueueGenericSendFromISR+0x2c>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	e7fe      	b.n	80065b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x3a>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x3e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x40>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <xQueueGenericSendFromISR+0x58>
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	e7fe      	b.n	80065de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSendFromISR+0x66>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <xQueueGenericSendFromISR+0x6a>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericSendFromISR+0x6c>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <xQueueGenericSendFromISR+0x84>
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	e7fe      	b.n	800660a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800660c:	f001 fe8a 	bl	8008324 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006610:	f3ef 8211 	mrs	r2, BASEPRI
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	61ba      	str	r2, [r7, #24]
 8006626:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006628:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	429a      	cmp	r2, r3
 8006636:	d302      	bcc.n	800663e <xQueueGenericSendFromISR+0xb6>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d12c      	bne.n	8006698 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800664e:	f000 f90b 	bl	8006868 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006652:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665a:	d112      	bne.n	8006682 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d016      	beq.n	8006692 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	3324      	adds	r3, #36	; 0x24
 8006668:	4618      	mov	r0, r3
 800666a:	f000 feb7 	bl	80073dc <xTaskRemoveFromEventList>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e007      	b.n	8006692 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006686:	3301      	adds	r3, #1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	b25a      	sxtb	r2, r3
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006692:	2301      	movs	r3, #1
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006696:	e001      	b.n	800669c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006698:	2300      	movs	r3, #0
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3738      	adds	r7, #56	; 0x38
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	; 0x30
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066bc:	2300      	movs	r3, #0
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <xQueueReceive+0x2e>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	623b      	str	r3, [r7, #32]
 80066dc:	e7fe      	b.n	80066dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <xQueueReceive+0x3c>
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xQueueReceive+0x40>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <xQueueReceive+0x42>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <xQueueReceive+0x5a>
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	e7fe      	b.n	8006708 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800670a:	f001 f823 	bl	8007754 <xTaskGetSchedulerState>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <xQueueReceive+0x6a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <xQueueReceive+0x6e>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueReceive+0x70>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <xQueueReceive+0x88>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e7fe      	b.n	8006736 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006738:	f001 fd18 	bl	800816c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01f      	beq.n	8006788 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674c:	f000 f8f6 	bl	800693c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	1e5a      	subs	r2, r3, #1
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00f      	beq.n	8006780 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	3310      	adds	r3, #16
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe39 	bl	80073dc <xTaskRemoveFromEventList>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006770:	4b3c      	ldr	r3, [pc, #240]	; (8006864 <xQueueReceive+0x1b4>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006780:	f001 fd22 	bl	80081c8 <vPortExitCritical>
				return pdPASS;
 8006784:	2301      	movs	r3, #1
 8006786:	e069      	b.n	800685c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678e:	f001 fd1b 	bl	80081c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006792:	2300      	movs	r3, #0
 8006794:	e062      	b.n	800685c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800679c:	f107 0310 	add.w	r3, r7, #16
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fe7d 	bl	80074a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a6:	2301      	movs	r3, #1
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067aa:	f001 fd0d 	bl	80081c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ae:	f000 fbf3 	bl	8006f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067b2:	f001 fcdb 	bl	800816c <vPortEnterCritical>
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d103      	bne.n	80067cc <xQueueReceive+0x11c>
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d103      	bne.n	80067e2 <xQueueReceive+0x132>
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067e2:	f001 fcf1 	bl	80081c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e6:	1d3a      	adds	r2, r7, #4
 80067e8:	f107 0310 	add.w	r3, r7, #16
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fe6c 	bl	80074cc <xTaskCheckForTimeOut>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d123      	bne.n	8006842 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fc:	f000 f916 	bl	8006a2c <prvIsQueueEmpty>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	3324      	adds	r3, #36	; 0x24
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fd96 	bl	8007340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006816:	f000 f8b7 	bl	8006988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800681a:	f000 fbcb 	bl	8006fb4 <xTaskResumeAll>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d189      	bne.n	8006738 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <xQueueReceive+0x1b4>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	e780      	b.n	8006738 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006838:	f000 f8a6 	bl	8006988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800683c:	f000 fbba 	bl	8006fb4 <xTaskResumeAll>
 8006840:	e77a      	b.n	8006738 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006844:	f000 f8a0 	bl	8006988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006848:	f000 fbb4 	bl	8006fb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800684c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684e:	f000 f8ed 	bl	8006a2c <prvIsQueueEmpty>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	f43f af6f 	beq.w	8006738 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800685a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d14d      	bne.n	800692a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 ff7c 	bl	8007790 <xTaskPriorityDisinherit>
 8006898:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	e043      	b.n	800692a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d119      	bne.n	80068dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6898      	ldr	r0, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	461a      	mov	r2, r3
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	f002 fc5e 	bl	8009174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d32b      	bcc.n	800692a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	e026      	b.n	800692a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68d8      	ldr	r0, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	461a      	mov	r2, r3
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	f002 fc44 	bl	8009174 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	425b      	negs	r3, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d207      	bcs.n	8006918 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	425b      	negs	r3, r3
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d105      	bne.n	800692a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3b01      	subs	r3, #1
 8006928:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006932:	697b      	ldr	r3, [r7, #20]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	441a      	add	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d303      	bcc.n	8006970 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	461a      	mov	r2, r3
 800697a:	6838      	ldr	r0, [r7, #0]
 800697c:	f002 fbfa 	bl	8009174 <memcpy>
	}
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006990:	f001 fbec 	bl	800816c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800699a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800699c:	e011      	b.n	80069c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fd16 	bl	80073dc <xTaskRemoveFromEventList>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b6:	f000 fde9 	bl	800758c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	3b01      	subs	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dce9      	bgt.n	800699e <prvUnlockQueue+0x16>
 80069ca:	e000      	b.n	80069ce <prvUnlockQueue+0x46>
					break;
 80069cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069d6:	f001 fbf7 	bl	80081c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069da:	f001 fbc7 	bl	800816c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e6:	e011      	b.n	8006a0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3310      	adds	r3, #16
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fcf1 	bl	80073dc <xTaskRemoveFromEventList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a00:	f000 fdc4 	bl	800758c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dce9      	bgt.n	80069e8 <prvUnlockQueue+0x60>
 8006a14:	e000      	b.n	8006a18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	22ff      	movs	r2, #255	; 0xff
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a20:	f001 fbd2 	bl	80081c8 <vPortExitCritical>
}
 8006a24:	bf00      	nop
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a34:	f001 fb9a 	bl	800816c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e001      	b.n	8006a4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 fbbd 	bl	80081c8 <vPortExitCritical>

	return xReturn;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a60:	f001 fb84 	bl	800816c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d102      	bne.n	8006a76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e001      	b.n	8006a7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a7a:	f001 fba5 	bl	80081c8 <vPortExitCritical>

	return xReturn;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e014      	b.n	8006ac2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a98:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <vQueueAddToRegistry+0x4c>)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa4:	490b      	ldr	r1, [pc, #44]	; (8006ad4 <vQueueAddToRegistry+0x4c>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <vQueueAddToRegistry+0x4c>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006aba:	e005      	b.n	8006ac8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b07      	cmp	r3, #7
 8006ac6:	d9e7      	bls.n	8006a98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20004b60 	.word	0x20004b60

08006ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae8:	f001 fb40 	bl	800816c <vPortEnterCritical>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d103      	bne.n	8006b02 <vQueueWaitForMessageRestricted+0x2a>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b08:	b25b      	sxtb	r3, r3
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d103      	bne.n	8006b18 <vQueueWaitForMessageRestricted+0x40>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b18:	f001 fb56 	bl	80081c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fc2b 	bl	8007388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f7ff ff28 	bl	8006988 <prvUnlockQueue>
	}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08e      	sub	sp, #56	; 0x38
 8006b44:	af04      	add	r7, sp, #16
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <xTaskCreateStatic+0x28>
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	e7fe      	b.n	8006b66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <xTaskCreateStatic+0x42>
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e7fe      	b.n	8006b80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b82:	235c      	movs	r3, #92	; 0x5c
 8006b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b5c      	cmp	r3, #92	; 0x5c
 8006b8a:	d009      	beq.n	8006ba0 <xTaskCreateStatic+0x60>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e7fe      	b.n	8006b9e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01e      	beq.n	8006be4 <xTaskCreateStatic+0xa4>
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01b      	beq.n	8006be4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9303      	str	r3, [sp, #12]
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	9302      	str	r3, [sp, #8]
 8006bc6:	f107 0314 	add.w	r3, r7, #20
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f850 	bl	8006c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bde:	f000 f8d3 	bl	8006d88 <prvAddNewTaskToReadyList>
 8006be2:	e001      	b.n	8006be8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be8:	697b      	ldr	r3, [r7, #20]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3728      	adds	r7, #40	; 0x28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b08c      	sub	sp, #48	; 0x30
 8006bf6:	af04      	add	r7, sp, #16
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fbca 	bl	80083a0 <pvPortMalloc>
 8006c0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00e      	beq.n	8006c32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c14:	205c      	movs	r0, #92	; 0x5c
 8006c16:	f001 fbc3 	bl	80083a0 <pvPortMalloc>
 8006c1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
 8006c28:	e005      	b.n	8006c36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c2a:	6978      	ldr	r0, [r7, #20]
 8006c2c:	f001 fc7a 	bl	8008524 <vPortFree>
 8006c30:	e001      	b.n	8006c36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d017      	beq.n	8006c6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	9302      	str	r3, [sp, #8]
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f80e 	bl	8006c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c60:	69f8      	ldr	r0, [r7, #28]
 8006c62:	f000 f891 	bl	8006d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c66:	2301      	movs	r3, #1
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e002      	b.n	8006c72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c72:	69bb      	ldr	r3, [r7, #24]
	}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	461a      	mov	r2, r3
 8006c94:	21a5      	movs	r1, #165	; 0xa5
 8006c96:	f002 fa78 	bl	800918a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f023 0307 	bic.w	r3, r3, #7
 8006cb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <prvInitialiseNewTask+0x56>
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e7fe      	b.n	8006cd0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	e012      	b.n	8006cfe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	7819      	ldrb	r1, [r3, #0]
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3334      	adds	r3, #52	; 0x34
 8006ce8:	460a      	mov	r2, r1
 8006cea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b0f      	cmp	r3, #15
 8006d02:	d9e9      	bls.n	8006cd8 <prvInitialiseNewTask+0x5c>
 8006d04:	e000      	b.n	8006d08 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006d06:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2b37      	cmp	r3, #55	; 0x37
 8006d14:	d901      	bls.n	8006d1a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d16:	2337      	movs	r3, #55	; 0x37
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	2200      	movs	r2, #0
 8006d2a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff f99d 	bl	8006070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	3318      	adds	r3, #24
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff f998 	bl	8006070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2200      	movs	r2, #0
 8006d5a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	69b8      	ldr	r0, [r7, #24]
 8006d6a:	f001 f8db 	bl	8007f24 <pxPortInitialiseStack>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d80:	bf00      	nop
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d90:	f001 f9ec 	bl	800816c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d94:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9e:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dac:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d110      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db4:	f000 fc0e 	bl	80075d4 <prvInitialiseTaskLists>
 8006db8:	e00d      	b.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d802      	bhi.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <prvAddNewTaskToReadyList+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <prvAddNewTaskToReadyList+0xd4>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <prvAddNewTaskToReadyList+0xd8>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7ff f939 	bl	800608a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e18:	f001 f9d6 	bl	80081c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d207      	bcs.n	8006e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <prvAddNewTaskToReadyList+0xdc>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000d94 	.word	0x20000d94
 8006e50:	200008c0 	.word	0x200008c0
 8006e54:	20000da0 	.word	0x20000da0
 8006e58:	20000db0 	.word	0x20000db0
 8006e5c:	20000d9c 	.word	0x20000d9c
 8006e60:	200008c4 	.word	0x200008c4
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e7a:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <vTaskDelay+0x60>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <vTaskDelay+0x2e>
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	e7fe      	b.n	8006e94 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006e96:	f000 f87f 	bl	8006f98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fce3 	bl	8007868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ea2:	f000 f887 	bl	8006fb4 <xTaskResumeAll>
 8006ea6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <vTaskDelay+0x64>)
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000dbc 	.word	0x20000dbc
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ede:	463a      	mov	r2, r7
 8006ee0:	1d39      	adds	r1, r7, #4
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f86e 	bl	8005fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	9202      	str	r2, [sp, #8]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2300      	movs	r3, #0
 8006efc:	460a      	mov	r2, r1
 8006efe:	4920      	ldr	r1, [pc, #128]	; (8006f80 <vTaskStartScheduler+0xb0>)
 8006f00:	4820      	ldr	r0, [pc, #128]	; (8006f84 <vTaskStartScheduler+0xb4>)
 8006f02:	f7ff fe1d 	bl	8006b40 <xTaskCreateStatic>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <vTaskStartScheduler+0xb8>)
 8006f0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <vTaskStartScheduler+0xb8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e001      	b.n	8006f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f24:	f000 fcf4 	bl	8007910 <xTimerCreateTimerTask>
 8006f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d115      	bne.n	8006f5c <vTaskStartScheduler+0x8c>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <vTaskStartScheduler+0xbc>)
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <vTaskStartScheduler+0xc0>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f50:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <vTaskStartScheduler+0xc4>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f56:	f001 f86b 	bl	8008030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f5a:	e00d      	b.n	8006f78 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d109      	bne.n	8006f78 <vTaskStartScheduler+0xa8>
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e7fe      	b.n	8006f76 <vTaskStartScheduler+0xa6>
}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	0800a05c 	.word	0x0800a05c
 8006f84:	080075a5 	.word	0x080075a5
 8006f88:	20000db8 	.word	0x20000db8
 8006f8c:	20000db4 	.word	0x20000db4
 8006f90:	20000da0 	.word	0x20000da0
 8006f94:	20000d98 	.word	0x20000d98

08006f98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <vTaskSuspendAll+0x18>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a03      	ldr	r2, [pc, #12]	; (8006fb0 <vTaskSuspendAll+0x18>)
 8006fa4:	6013      	str	r3, [r2, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000dbc 	.word	0x20000dbc

08006fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fc2:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <xTaskResumeAll+0x114>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <xTaskResumeAll+0x2a>
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	e7fe      	b.n	8006fdc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fde:	f001 f8c5 	bl	800816c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fe2:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <xTaskResumeAll+0x114>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4a37      	ldr	r2, [pc, #220]	; (80070c8 <xTaskResumeAll+0x114>)
 8006fea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fec:	4b36      	ldr	r3, [pc, #216]	; (80070c8 <xTaskResumeAll+0x114>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d162      	bne.n	80070ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff4:	4b35      	ldr	r3, [pc, #212]	; (80070cc <xTaskResumeAll+0x118>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05e      	beq.n	80070ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ffc:	e02f      	b.n	800705e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ffe:	4b34      	ldr	r3, [pc, #208]	; (80070d0 <xTaskResumeAll+0x11c>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3318      	adds	r3, #24
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff f89a 	bl	8006144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff f895 	bl	8006144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	4b2d      	ldr	r3, [pc, #180]	; (80070d4 <xTaskResumeAll+0x120>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d903      	bls.n	800702e <xTaskResumeAll+0x7a>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <xTaskResumeAll+0x120>)
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <xTaskResumeAll+0x124>)
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7ff f820 	bl	800608a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4b23      	ldr	r3, [pc, #140]	; (80070dc <xTaskResumeAll+0x128>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	429a      	cmp	r2, r3
 8007056:	d302      	bcc.n	800705e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007058:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <xTaskResumeAll+0x12c>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705e:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <xTaskResumeAll+0x11c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1cb      	bne.n	8006ffe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800706c:	f000 fb4c 	bl	8007708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007070:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <xTaskResumeAll+0x130>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d010      	beq.n	800709e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800707c:	f000 f846 	bl	800710c <xTaskIncrementTick>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <xTaskResumeAll+0x12c>)
 8007088:	2201      	movs	r2, #1
 800708a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3b01      	subs	r3, #1
 8007090:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f1      	bne.n	800707c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <xTaskResumeAll+0x130>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xTaskResumeAll+0x12c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <xTaskResumeAll+0x134>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 f885 	bl	80081c8 <vPortExitCritical>

	return xAlreadyYielded;
 80070be:	68bb      	ldr	r3, [r7, #8]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000dbc 	.word	0x20000dbc
 80070cc:	20000d94 	.word	0x20000d94
 80070d0:	20000d54 	.word	0x20000d54
 80070d4:	20000d9c 	.word	0x20000d9c
 80070d8:	200008c4 	.word	0x200008c4
 80070dc:	200008c0 	.word	0x200008c0
 80070e0:	20000da8 	.word	0x20000da8
 80070e4:	20000da4 	.word	0x20000da4
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <xTaskGetTickCount+0x1c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f8:	687b      	ldr	r3, [r7, #4]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000d98 	.word	0x20000d98

0800710c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007116:	4b51      	ldr	r3, [pc, #324]	; (800725c <xTaskIncrementTick+0x150>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 808d 	bne.w	800723a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007120:	4b4f      	ldr	r3, [pc, #316]	; (8007260 <xTaskIncrementTick+0x154>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007128:	4a4d      	ldr	r2, [pc, #308]	; (8007260 <xTaskIncrementTick+0x154>)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11f      	bne.n	8007174 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <xTaskIncrementTick+0x158>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <xTaskIncrementTick+0x46>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	e7fe      	b.n	8007150 <xTaskIncrementTick+0x44>
 8007152:	4b44      	ldr	r3, [pc, #272]	; (8007264 <xTaskIncrementTick+0x158>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	4b43      	ldr	r3, [pc, #268]	; (8007268 <xTaskIncrementTick+0x15c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a41      	ldr	r2, [pc, #260]	; (8007264 <xTaskIncrementTick+0x158>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4a41      	ldr	r2, [pc, #260]	; (8007268 <xTaskIncrementTick+0x15c>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b41      	ldr	r3, [pc, #260]	; (800726c <xTaskIncrementTick+0x160>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a3f      	ldr	r2, [pc, #252]	; (800726c <xTaskIncrementTick+0x160>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	f000 faca 	bl	8007708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007174:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <xTaskIncrementTick+0x164>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	429a      	cmp	r2, r3
 800717c:	d34e      	bcc.n	800721c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717e:	4b39      	ldr	r3, [pc, #228]	; (8007264 <xTaskIncrementTick+0x158>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <xTaskIncrementTick+0x80>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <xTaskIncrementTick+0x82>
 800718c:	2300      	movs	r3, #0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	4b37      	ldr	r3, [pc, #220]	; (8007270 <xTaskIncrementTick+0x164>)
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	601a      	str	r2, [r3, #0]
					break;
 800719a:	e03f      	b.n	800721c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800719c:	4b31      	ldr	r3, [pc, #196]	; (8007264 <xTaskIncrementTick+0x158>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d203      	bcs.n	80071bc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071b4:	4a2e      	ldr	r2, [pc, #184]	; (8007270 <xTaskIncrementTick+0x164>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
						break;
 80071ba:	e02f      	b.n	800721c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe ffbf 	bl	8006144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe ffb6 	bl	8006144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <xTaskIncrementTick+0x168>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <xTaskIncrementTick+0xe0>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <xTaskIncrementTick+0x168>)
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <xTaskIncrementTick+0x16c>)
 80071fa:	441a      	add	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fe ff41 	bl	800608a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <xTaskIncrementTick+0x170>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	429a      	cmp	r2, r3
 8007214:	d3b3      	bcc.n	800717e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721a:	e7b0      	b.n	800717e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <xTaskIncrementTick+0x170>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	4915      	ldr	r1, [pc, #84]	; (8007278 <xTaskIncrementTick+0x16c>)
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d907      	bls.n	8007244 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e004      	b.n	8007244 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <xTaskIncrementTick+0x174>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <xTaskIncrementTick+0x174>)
 8007242:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xTaskIncrementTick+0x178>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007250:	697b      	ldr	r3, [r7, #20]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000dbc 	.word	0x20000dbc
 8007260:	20000d98 	.word	0x20000d98
 8007264:	20000d4c 	.word	0x20000d4c
 8007268:	20000d50 	.word	0x20000d50
 800726c:	20000dac 	.word	0x20000dac
 8007270:	20000db4 	.word	0x20000db4
 8007274:	20000d9c 	.word	0x20000d9c
 8007278:	200008c4 	.word	0x200008c4
 800727c:	200008c0 	.word	0x200008c0
 8007280:	20000da4 	.word	0x20000da4
 8007284:	20000da8 	.word	0x20000da8

08007288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800728e:	4b27      	ldr	r3, [pc, #156]	; (800732c <vTaskSwitchContext+0xa4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007296:	4b26      	ldr	r3, [pc, #152]	; (8007330 <vTaskSwitchContext+0xa8>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800729c:	e040      	b.n	8007320 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800729e:	4b24      	ldr	r3, [pc, #144]	; (8007330 <vTaskSwitchContext+0xa8>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80072a4:	4b23      	ldr	r3, [pc, #140]	; (8007334 <vTaskSwitchContext+0xac>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	e00f      	b.n	80072cc <vTaskSwitchContext+0x44>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <vTaskSwitchContext+0x3e>
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	e7fe      	b.n	80072c4 <vTaskSwitchContext+0x3c>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	491a      	ldr	r1, [pc, #104]	; (8007338 <vTaskSwitchContext+0xb0>)
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0e5      	beq.n	80072ac <vTaskSwitchContext+0x24>
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4a13      	ldr	r2, [pc, #76]	; (8007338 <vTaskSwitchContext+0xb0>)
 80072ec:	4413      	add	r3, r2
 80072ee:	60bb      	str	r3, [r7, #8]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	3308      	adds	r3, #8
 8007302:	429a      	cmp	r2, r3
 8007304:	d104      	bne.n	8007310 <vTaskSwitchContext+0x88>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <vTaskSwitchContext+0xb4>)
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	4a06      	ldr	r2, [pc, #24]	; (8007334 <vTaskSwitchContext+0xac>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	bf00      	nop
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000dbc 	.word	0x20000dbc
 8007330:	20000da8 	.word	0x20000da8
 8007334:	20000d9c 	.word	0x20000d9c
 8007338:	200008c4 	.word	0x200008c4
 800733c:	200008c0 	.word	0x200008c0

08007340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <vTaskPlaceOnEventList+0x24>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e7fe      	b.n	8007362 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <vTaskPlaceOnEventList+0x44>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3318      	adds	r3, #24
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fe feb0 	bl	80060d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007372:	2101      	movs	r1, #1
 8007374:	6838      	ldr	r0, [r7, #0]
 8007376:	f000 fa77 	bl	8007868 <prvAddCurrentTaskToDelayedList>
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	200008c0 	.word	0x200008c0

08007388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <vTaskPlaceOnEventListRestricted+0x26>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e7fe      	b.n	80073ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3318      	adds	r3, #24
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7fe fe67 	bl	800608a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68b8      	ldr	r0, [r7, #8]
 80073cc:	f000 fa4c 	bl	8007868 <prvAddCurrentTaskToDelayedList>
	}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	200008c0 	.word	0x200008c0

080073dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <xTaskRemoveFromEventList+0x2a>
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e7fe      	b.n	8007404 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3318      	adds	r3, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fe9a 	bl	8006144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007410:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <xTaskRemoveFromEventList+0xac>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11d      	bne.n	8007454 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3304      	adds	r3, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fe91 	bl	8006144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <xTaskRemoveFromEventList+0xb0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d903      	bls.n	8007436 <xTaskRemoveFromEventList+0x5a>
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <xTaskRemoveFromEventList+0xb0>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4a13      	ldr	r2, [pc, #76]	; (8007490 <xTaskRemoveFromEventList+0xb4>)
 8007444:	441a      	add	r2, r3
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe fe1c 	bl	800608a <vListInsertEnd>
 8007452:	e005      	b.n	8007460 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3318      	adds	r3, #24
 8007458:	4619      	mov	r1, r3
 800745a:	480e      	ldr	r0, [pc, #56]	; (8007494 <xTaskRemoveFromEventList+0xb8>)
 800745c:	f7fe fe15 	bl	800608a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <xTaskRemoveFromEventList+0xbc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	429a      	cmp	r2, r3
 800746c:	d905      	bls.n	800747a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <xTaskRemoveFromEventList+0xc0>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e001      	b.n	800747e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800747e:	697b      	ldr	r3, [r7, #20]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000dbc 	.word	0x20000dbc
 800748c:	20000d9c 	.word	0x20000d9c
 8007490:	200008c4 	.word	0x200008c4
 8007494:	20000d54 	.word	0x20000d54
 8007498:	200008c0 	.word	0x200008c0
 800749c:	20000da8 	.word	0x20000da8

080074a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <vTaskInternalSetTimeOutState+0x24>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <vTaskInternalSetTimeOutState+0x28>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	20000dac 	.word	0x20000dac
 80074c8:	20000d98 	.word	0x20000d98

080074cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <xTaskCheckForTimeOut+0x24>
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	e7fe      	b.n	80074ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <xTaskCheckForTimeOut+0x3e>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e7fe      	b.n	8007508 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800750a:	f000 fe2f 	bl	800816c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800750e:	4b1d      	ldr	r3, [pc, #116]	; (8007584 <xTaskCheckForTimeOut+0xb8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d102      	bne.n	800752e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	e023      	b.n	8007576 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <xTaskCheckForTimeOut+0xbc>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d007      	beq.n	800754a <xTaskCheckForTimeOut+0x7e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	429a      	cmp	r2, r3
 8007542:	d302      	bcc.n	800754a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e015      	b.n	8007576 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	429a      	cmp	r2, r3
 8007552:	d20b      	bcs.n	800756c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ff9d 	bl	80074a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	e004      	b.n	8007576 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007576:	f000 fe27 	bl	80081c8 <vPortExitCritical>

	return xReturn;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000d98 	.word	0x20000d98
 8007588:	20000dac 	.word	0x20000dac

0800758c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007590:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <vTaskMissedYield+0x14>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
}
 8007596:	bf00      	nop
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000da8 	.word	0x20000da8

080075a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075ac:	f000 f852 	bl	8007654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <prvIdleTask+0x28>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d9f9      	bls.n	80075ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <prvIdleTask+0x2c>)
 80075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075c8:	e7f0      	b.n	80075ac <prvIdleTask+0x8>
 80075ca:	bf00      	nop
 80075cc:	200008c4 	.word	0x200008c4
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	e00c      	b.n	80075fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a12      	ldr	r2, [pc, #72]	; (8007634 <prvInitialiseTaskLists+0x60>)
 80075ec:	4413      	add	r3, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd1e 	bl	8006030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3301      	adds	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b37      	cmp	r3, #55	; 0x37
 80075fe:	d9ef      	bls.n	80075e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007600:	480d      	ldr	r0, [pc, #52]	; (8007638 <prvInitialiseTaskLists+0x64>)
 8007602:	f7fe fd15 	bl	8006030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007606:	480d      	ldr	r0, [pc, #52]	; (800763c <prvInitialiseTaskLists+0x68>)
 8007608:	f7fe fd12 	bl	8006030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800760c:	480c      	ldr	r0, [pc, #48]	; (8007640 <prvInitialiseTaskLists+0x6c>)
 800760e:	f7fe fd0f 	bl	8006030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007612:	480c      	ldr	r0, [pc, #48]	; (8007644 <prvInitialiseTaskLists+0x70>)
 8007614:	f7fe fd0c 	bl	8006030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007618:	480b      	ldr	r0, [pc, #44]	; (8007648 <prvInitialiseTaskLists+0x74>)
 800761a:	f7fe fd09 	bl	8006030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800761e:	4b0b      	ldr	r3, [pc, #44]	; (800764c <prvInitialiseTaskLists+0x78>)
 8007620:	4a05      	ldr	r2, [pc, #20]	; (8007638 <prvInitialiseTaskLists+0x64>)
 8007622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvInitialiseTaskLists+0x7c>)
 8007626:	4a05      	ldr	r2, [pc, #20]	; (800763c <prvInitialiseTaskLists+0x68>)
 8007628:	601a      	str	r2, [r3, #0]
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200008c4 	.word	0x200008c4
 8007638:	20000d24 	.word	0x20000d24
 800763c:	20000d38 	.word	0x20000d38
 8007640:	20000d54 	.word	0x20000d54
 8007644:	20000d68 	.word	0x20000d68
 8007648:	20000d80 	.word	0x20000d80
 800764c:	20000d4c 	.word	0x20000d4c
 8007650:	20000d50 	.word	0x20000d50

08007654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800765a:	e019      	b.n	8007690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800765c:	f000 fd86 	bl	800816c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvCheckTasksWaitingTermination+0x4c>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fd69 	bl	8006144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <prvCheckTasksWaitingTermination+0x50>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <prvCheckTasksWaitingTermination+0x50>)
 800767a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3b01      	subs	r3, #1
 8007682:	4a09      	ldr	r2, [pc, #36]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 8007684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007686:	f000 fd9f 	bl	80081c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f80e 	bl	80076ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <prvCheckTasksWaitingTermination+0x54>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e1      	bne.n	800765c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20000d68 	.word	0x20000d68
 80076a4:	20000d94 	.word	0x20000d94
 80076a8:	20000d7c 	.word	0x20000d7c

080076ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff2e 	bl	8008524 <vPortFree>
				vPortFree( pxTCB );
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 ff2b 	bl	8008524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076ce:	e017      	b.n	8007700 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d103      	bne.n	80076e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 ff22 	bl	8008524 <vPortFree>
	}
 80076e0:	e00e      	b.n	8007700 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d009      	beq.n	8007700 <prvDeleteTCB+0x54>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e7fe      	b.n	80076fe <prvDeleteTCB+0x52>
	}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <prvResetNextTaskUnblockTime+0x44>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <prvResetNextTaskUnblockTime+0x14>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <prvResetNextTaskUnblockTime+0x16>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <prvResetNextTaskUnblockTime+0x48>)
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800772a:	e008      	b.n	800773e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <prvResetNextTaskUnblockTime+0x44>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4a05      	ldr	r2, [pc, #20]	; (8007750 <prvResetNextTaskUnblockTime+0x48>)
 800773c:	6013      	str	r3, [r2, #0]
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20000d4c 	.word	0x20000d4c
 8007750:	20000db4 	.word	0x20000db4

08007754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <xTaskGetSchedulerState+0x34>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007762:	2301      	movs	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	e008      	b.n	800777a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007768:	4b08      	ldr	r3, [pc, #32]	; (800778c <xTaskGetSchedulerState+0x38>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007770:	2302      	movs	r3, #2
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e001      	b.n	800777a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800777a:	687b      	ldr	r3, [r7, #4]
	}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000da0 	.word	0x20000da0
 800778c:	20000dbc 	.word	0x20000dbc

08007790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d054      	beq.n	8007850 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077a6:	4b2d      	ldr	r3, [pc, #180]	; (800785c <xTaskPriorityDisinherit+0xcc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d009      	beq.n	80077c4 <xTaskPriorityDisinherit+0x34>
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e7fe      	b.n	80077c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <xTaskPriorityDisinherit+0x50>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	e7fe      	b.n	80077de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d02c      	beq.n	8007850 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d128      	bne.n	8007850 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fc9e 	bl	8006144 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <xTaskPriorityDisinherit+0xd0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskPriorityDisinherit+0xa0>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <xTaskPriorityDisinherit+0xd0>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a09      	ldr	r2, [pc, #36]	; (8007864 <xTaskPriorityDisinherit+0xd4>)
 800783e:	441a      	add	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fc1f 	bl	800608a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007850:	697b      	ldr	r3, [r7, #20]
	}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200008c0 	.word	0x200008c0
 8007860:	20000d9c 	.word	0x20000d9c
 8007864:	200008c4 	.word	0x200008c4

08007868 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007872:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007878:	4b20      	ldr	r3, [pc, #128]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3304      	adds	r3, #4
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fc60 	bl	8006144 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788a:	d10a      	bne.n	80078a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007892:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4819      	ldr	r0, [pc, #100]	; (8007900 <prvAddCurrentTaskToDelayedList+0x98>)
 800789c:	f7fe fbf5 	bl	800608a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078a0:	e026      	b.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d209      	bcs.n	80078ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fe fc03 	bl	80060d2 <vListInsert>
}
 80078cc:	e010      	b.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe fbf9 	bl	80060d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d202      	bcs.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6013      	str	r3, [r2, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000d98 	.word	0x20000d98
 80078fc:	200008c0 	.word	0x200008c0
 8007900:	20000d80 	.word	0x20000d80
 8007904:	20000d50 	.word	0x20000d50
 8007908:	20000d4c 	.word	0x20000d4c
 800790c:	20000db4 	.word	0x20000db4

08007910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800791a:	f000 fac3 	bl	8007ea4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800791e:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <xTimerCreateTimerTask+0x80>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d021      	beq.n	800796a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800792e:	1d3a      	adds	r2, r7, #4
 8007930:	f107 0108 	add.w	r1, r7, #8
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fb5f 	bl	8005ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	9202      	str	r2, [sp, #8]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	2302      	movs	r3, #2
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	2300      	movs	r3, #0
 800794e:	460a      	mov	r2, r1
 8007950:	4910      	ldr	r1, [pc, #64]	; (8007994 <xTimerCreateTimerTask+0x84>)
 8007952:	4811      	ldr	r0, [pc, #68]	; (8007998 <xTimerCreateTimerTask+0x88>)
 8007954:	f7ff f8f4 	bl	8006b40 <xTaskCreateStatic>
 8007958:	4602      	mov	r2, r0
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <xTimerCreateTimerTask+0x8c>)
 800795c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <xTimerCreateTimerTask+0x8c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <xTimerCreateTimerTask+0x74>
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	e7fe      	b.n	8007982 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007984:	697b      	ldr	r3, [r7, #20]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000df0 	.word	0x20000df0
 8007994:	0800a064 	.word	0x0800a064
 8007998:	08007ab9 	.word	0x08007ab9
 800799c:	20000df4 	.word	0x20000df4

080079a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <xTimerGenericCommand+0x2c>
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	623b      	str	r3, [r7, #32]
 80079ca:	e7fe      	b.n	80079ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <xTimerGenericCommand+0x94>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02a      	beq.n	8007a2a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	dc18      	bgt.n	8007a18 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079e6:	f7ff feb5 	bl	8007754 <xTaskGetSchedulerState>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d109      	bne.n	8007a04 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079f0:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <xTimerGenericCommand+0x94>)
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	f107 0110 	add.w	r1, r7, #16
 80079f8:	2300      	movs	r3, #0
 80079fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fc:	f7fe fcca 	bl	8006394 <xQueueGenericSend>
 8007a00:	6278      	str	r0, [r7, #36]	; 0x24
 8007a02:	e012      	b.n	8007a2a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <xTimerGenericCommand+0x94>)
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	f107 0110 	add.w	r1, r7, #16
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f7fe fcc0 	bl	8006394 <xQueueGenericSend>
 8007a14:	6278      	str	r0, [r7, #36]	; 0x24
 8007a16:	e008      	b.n	8007a2a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <xTimerGenericCommand+0x94>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	f107 0110 	add.w	r1, r7, #16
 8007a20:	2300      	movs	r3, #0
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f7fe fdb0 	bl	8006588 <xQueueGenericSendFromISR>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000df0 	.word	0x20000df0

08007a38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <prvProcessExpiredTimer+0x7c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fb77 	bl	8006144 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d121      	bne.n	8007aa2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	18d1      	adds	r1, r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f000 f8c8 	bl	8007c00 <prvInsertTimerInActiveList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d015      	beq.n	8007aa2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a76:	2300      	movs	r3, #0
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7ff ff8d 	bl	80079a0 <xTimerGenericCommand>
 8007a86:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <prvProcessExpiredTimer+0x6a>
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e7fe      	b.n	8007aa0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	4798      	blx	r3
}
 8007aaa:	bf00      	nop
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000de8 	.word	0x20000de8

08007ab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f857 	bl	8007b78 <prvGetNextExpireTime>
 8007aca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f803 	bl	8007adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ad6:	f000 f8d5 	bl	8007c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ada:	e7f1      	b.n	8007ac0 <prvTimerTask+0x8>

08007adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ae6:	f7ff fa57 	bl	8006f98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f866 	bl	8007bc0 <prvSampleTimeNow>
 8007af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d130      	bne.n	8007b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <prvProcessTimerOrBlockTask+0x3c>
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d806      	bhi.n	8007b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b0a:	f7ff fa53 	bl	8006fb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff ff91 	bl	8007a38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b16:	e024      	b.n	8007b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <prvProcessTimerOrBlockTask+0x90>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <prvProcessTimerOrBlockTask+0x94>)
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f7fe ffcb 	bl	8006ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b42:	f7ff fa37 	bl	8006fb4 <xTaskResumeAll>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <prvProcessTimerOrBlockTask+0x98>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
}
 8007b5c:	e001      	b.n	8007b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b5e:	f7ff fa29 	bl	8006fb4 <xTaskResumeAll>
}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000dec 	.word	0x20000dec
 8007b70:	20000df0 	.word	0x20000df0
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b80:	4b0e      	ldr	r3, [pc, #56]	; (8007bbc <prvGetNextExpireTime+0x44>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf0c      	ite	eq
 8007b8a:	2301      	moveq	r3, #1
 8007b8c:	2300      	movne	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <prvGetNextExpireTime+0x44>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e001      	b.n	8007bae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	20000de8 	.word	0x20000de8

08007bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bc8:	f7ff fa90 	bl	80070ec <xTaskGetTickCount>
 8007bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <prvSampleTimeNow+0x3c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d205      	bcs.n	8007be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bd8:	f000 f904 	bl	8007de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e002      	b.n	8007bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bea:	4a04      	ldr	r2, [pc, #16]	; (8007bfc <prvSampleTimeNow+0x3c>)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000df8 	.word	0x20000df8

08007c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d812      	bhi.n	8007c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d302      	bcc.n	8007c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e01b      	b.n	8007c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c3a:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <prvInsertTimerInActiveList+0x7c>)
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f7fe fa44 	bl	80060d2 <vListInsert>
 8007c4a:	e012      	b.n	8007c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d206      	bcs.n	8007c62 <prvInsertTimerInActiveList+0x62>
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d302      	bcc.n	8007c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	e007      	b.n	8007c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <prvInsertTimerInActiveList+0x80>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7fe fa30 	bl	80060d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c72:	697b      	ldr	r3, [r7, #20]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000dec 	.word	0x20000dec
 8007c80:	20000de8 	.word	0x20000de8

08007c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	; 0x38
 8007c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c8a:	e099      	b.n	8007dc0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da17      	bge.n	8007cc2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	3304      	adds	r3, #4
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <prvProcessReceivedCommands+0x2e>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e7fe      	b.n	8007cb0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb8:	6850      	ldr	r0, [r2, #4]
 8007cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	db7a      	blt.n	8007dbe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fa33 	bl	8006144 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cde:	463b      	mov	r3, r7
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff ff6d 	bl	8007bc0 <prvSampleTimeNow>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d868      	bhi.n	8007dc0 <prvProcessReceivedCommands+0x13c>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <prvProcessReceivedCommands+0x70>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d1d 	.word	0x08007d1d
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	08007dc1 	.word	0x08007dc1
 8007d04:	08007d77 	.word	0x08007d77
 8007d08:	08007dad 	.word	0x08007dad
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d1d 	.word	0x08007d1d
 8007d14:	08007dc1 	.word	0x08007dc1
 8007d18:	08007d77 	.word	0x08007d77
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	18d1      	adds	r1, r2, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2a:	f7ff ff69 	bl	8007c00 <prvInsertTimerInActiveList>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d045      	beq.n	8007dc0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d13d      	bne.n	8007dc0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	441a      	add	r2, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	2300      	movs	r3, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d56:	f7ff fe23 	bl	80079a0 <xTimerGenericCommand>
 8007d5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d12e      	bne.n	8007dc0 <prvProcessReceivedCommands+0x13c>
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	61bb      	str	r3, [r7, #24]
 8007d74:	e7fe      	b.n	8007d74 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <prvProcessReceivedCommands+0x114>
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e7fe      	b.n	8007d96 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	18d1      	adds	r1, r2, r3
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da6:	f7ff ff2b 	bl	8007c00 <prvInsertTimerInActiveList>
					break;
 8007daa:	e009      	b.n	8007dc0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db8:	f000 fbb4 	bl	8008524 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dbc:	e000      	b.n	8007dc0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007dbe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <prvProcessReceivedCommands+0x15c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	1d39      	adds	r1, r7, #4
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fc71 	bl	80066b0 <xQueueReceive>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f47f af5b 	bne.w	8007c8c <prvProcessReceivedCommands+0x8>
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	3730      	adds	r7, #48	; 0x30
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000df0 	.word	0x20000df0

08007de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dea:	e044      	b.n	8007e76 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dec:	4b2b      	ldr	r3, [pc, #172]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe f99d 	bl	8006144 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d12d      	bne.n	8007e76 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d90e      	bls.n	8007e4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e38:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f7fe f945 	bl	80060d2 <vListInsert>
 8007e48:	e015      	b.n	8007e76 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	2100      	movs	r1, #0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff fda3 	bl	80079a0 <xTimerGenericCommand>
 8007e5a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <prvSwitchTimerLists+0x92>
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	e7fe      	b.n	8007e74 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1b5      	bne.n	8007dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e86:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <prvSwitchTimerLists+0xbc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <prvSwitchTimerLists+0xb8>)
 8007e8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e8e:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <prvSwitchTimerLists+0xbc>)
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6013      	str	r3, [r2, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000de8 	.word	0x20000de8
 8007ea0:	20000dec 	.word	0x20000dec

08007ea4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007eaa:	f000 f95f 	bl	800816c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007eae:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <prvCheckForValidListAndQueue+0x60>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d120      	bne.n	8007ef8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007eb6:	4814      	ldr	r0, [pc, #80]	; (8007f08 <prvCheckForValidListAndQueue+0x64>)
 8007eb8:	f7fe f8ba 	bl	8006030 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ebc:	4813      	ldr	r0, [pc, #76]	; (8007f0c <prvCheckForValidListAndQueue+0x68>)
 8007ebe:	f7fe f8b7 	bl	8006030 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ec2:	4b13      	ldr	r3, [pc, #76]	; (8007f10 <prvCheckForValidListAndQueue+0x6c>)
 8007ec4:	4a10      	ldr	r2, [pc, #64]	; (8007f08 <prvCheckForValidListAndQueue+0x64>)
 8007ec6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ec8:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <prvCheckForValidListAndQueue+0x70>)
 8007eca:	4a10      	ldr	r2, [pc, #64]	; (8007f0c <prvCheckForValidListAndQueue+0x68>)
 8007ecc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <prvCheckForValidListAndQueue+0x74>)
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <prvCheckForValidListAndQueue+0x78>)
 8007ed6:	2110      	movs	r1, #16
 8007ed8:	200a      	movs	r0, #10
 8007eda:	f7fe f9c5 	bl	8006268 <xQueueGenericCreateStatic>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <prvCheckForValidListAndQueue+0x60>)
 8007ee2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <prvCheckForValidListAndQueue+0x60>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <prvCheckForValidListAndQueue+0x60>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	490b      	ldr	r1, [pc, #44]	; (8007f20 <prvCheckForValidListAndQueue+0x7c>)
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fdc8 	bl	8006a88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ef8:	f000 f966 	bl	80081c8 <vPortExitCritical>
}
 8007efc:	bf00      	nop
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000df0 	.word	0x20000df0
 8007f08:	20000dc0 	.word	0x20000dc0
 8007f0c:	20000dd4 	.word	0x20000dd4
 8007f10:	20000de8 	.word	0x20000de8
 8007f14:	20000dec 	.word	0x20000dec
 8007f18:	20000e9c 	.word	0x20000e9c
 8007f1c:	20000dfc 	.word	0x20000dfc
 8007f20:	0800a06c 	.word	0x0800a06c

08007f24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3b04      	subs	r3, #4
 8007f34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b04      	subs	r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f54:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <pxPortInitialiseStack+0x64>)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b14      	subs	r3, #20
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f06f 0202 	mvn.w	r2, #2
 8007f72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3b20      	subs	r3, #32
 8007f78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	08007f8d 	.word	0x08007f8d

08007f8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <prvTaskExitError+0x50>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9e:	d009      	beq.n	8007fb4 <prvTaskExitError+0x28>
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e7fe      	b.n	8007fb2 <prvTaskExitError+0x26>
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fc6:	bf00      	nop
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0fc      	beq.n	8007fc8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000118 	.word	0x20000118

08007fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <pxCurrentTCBConst2>)
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6808      	ldr	r0, [r1, #0]
 8007fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	f380 8809 	msr	PSP, r0
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8811 	msr	BASEPRI, r0
 8007ffa:	4770      	bx	lr
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst2>:
 8008000:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008008:	4808      	ldr	r0, [pc, #32]	; (800802c <prvPortStartFirstTask+0x24>)
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	f380 8808 	msr	MSP, r0
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8814 	msr	CONTROL, r0
 800801a:	b662      	cpsie	i
 800801c:	b661      	cpsie	f
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	df00      	svc	0
 8008028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800802a:	bf00      	nop
 800802c:	e000ed08 	.word	0xe000ed08

08008030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008036:	4b44      	ldr	r3, [pc, #272]	; (8008148 <xPortStartScheduler+0x118>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a44      	ldr	r2, [pc, #272]	; (800814c <xPortStartScheduler+0x11c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d109      	bne.n	8008054 <xPortStartScheduler+0x24>
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	e7fe      	b.n	8008052 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008054:	4b3c      	ldr	r3, [pc, #240]	; (8008148 <xPortStartScheduler+0x118>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3d      	ldr	r2, [pc, #244]	; (8008150 <xPortStartScheduler+0x120>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d109      	bne.n	8008072 <xPortStartScheduler+0x42>
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e7fe      	b.n	8008070 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008072:	4b38      	ldr	r3, [pc, #224]	; (8008154 <xPortStartScheduler+0x124>)
 8008074:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008094:	b2da      	uxtb	r2, r3
 8008096:	4b30      	ldr	r3, [pc, #192]	; (8008158 <xPortStartScheduler+0x128>)
 8008098:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800809a:	4b30      	ldr	r3, [pc, #192]	; (800815c <xPortStartScheduler+0x12c>)
 800809c:	2207      	movs	r2, #7
 800809e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080a0:	e009      	b.n	80080b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80080a2:	4b2e      	ldr	r3, [pc, #184]	; (800815c <xPortStartScheduler+0x12c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a2c      	ldr	r2, [pc, #176]	; (800815c <xPortStartScheduler+0x12c>)
 80080aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080be:	2b80      	cmp	r3, #128	; 0x80
 80080c0:	d0ef      	beq.n	80080a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080c2:	4b26      	ldr	r3, [pc, #152]	; (800815c <xPortStartScheduler+0x12c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1c3 0307 	rsb	r3, r3, #7
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d009      	beq.n	80080e2 <xPortStartScheduler+0xb2>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	e7fe      	b.n	80080e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080e2:	4b1e      	ldr	r3, [pc, #120]	; (800815c <xPortStartScheduler+0x12c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	4a1c      	ldr	r2, [pc, #112]	; (800815c <xPortStartScheduler+0x12c>)
 80080ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <xPortStartScheduler+0x12c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080f4:	4a19      	ldr	r2, [pc, #100]	; (800815c <xPortStartScheduler+0x12c>)
 80080f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008100:	4b17      	ldr	r3, [pc, #92]	; (8008160 <xPortStartScheduler+0x130>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a16      	ldr	r2, [pc, #88]	; (8008160 <xPortStartScheduler+0x130>)
 8008106:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800810a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800810c:	4b14      	ldr	r3, [pc, #80]	; (8008160 <xPortStartScheduler+0x130>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <xPortStartScheduler+0x130>)
 8008112:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008116:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008118:	f000 f8d6 	bl	80082c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800811c:	4b11      	ldr	r3, [pc, #68]	; (8008164 <xPortStartScheduler+0x134>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008122:	f000 f8f5 	bl	8008310 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008126:	4b10      	ldr	r3, [pc, #64]	; (8008168 <xPortStartScheduler+0x138>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a0f      	ldr	r2, [pc, #60]	; (8008168 <xPortStartScheduler+0x138>)
 800812c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008130:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008132:	f7ff ff69 	bl	8008008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008136:	f7ff f8a7 	bl	8007288 <vTaskSwitchContext>
	prvTaskExitError();
 800813a:	f7ff ff27 	bl	8007f8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed00 	.word	0xe000ed00
 800814c:	410fc271 	.word	0x410fc271
 8008150:	410fc270 	.word	0x410fc270
 8008154:	e000e400 	.word	0xe000e400
 8008158:	20000eec 	.word	0x20000eec
 800815c:	20000ef0 	.word	0x20000ef0
 8008160:	e000ed20 	.word	0xe000ed20
 8008164:	20000118 	.word	0x20000118
 8008168:	e000ef34 	.word	0xe000ef34

0800816c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <vPortEnterCritical+0x54>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a0d      	ldr	r2, [pc, #52]	; (80081c0 <vPortEnterCritical+0x54>)
 800818c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800818e:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <vPortEnterCritical+0x54>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10e      	bne.n	80081b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <vPortEnterCritical+0x58>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <vPortEnterCritical+0x48>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	e7fe      	b.n	80081b2 <vPortEnterCritical+0x46>
	}
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000118 	.word	0x20000118
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <vPortExitCritical+0x4c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <vPortExitCritical+0x22>
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e7fe      	b.n	80081e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <vPortExitCritical+0x4c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4a08      	ldr	r2, [pc, #32]	; (8008214 <vPortExitCritical+0x4c>)
 80081f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081f4:	4b07      	ldr	r3, [pc, #28]	; (8008214 <vPortExitCritical+0x4c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <vPortExitCritical+0x3e>
 80081fc:	2300      	movs	r3, #0
 80081fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000118 	.word	0x20000118
	...

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008244:	f380 8811 	msr	BASEPRI, r0
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f7ff f81a 	bl	8007288 <vTaskSwitchContext>
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f380 8811 	msr	BASEPRI, r0
 800825c:	bc09      	pop	{r0, r3}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f01e 0f10 	tst.w	lr, #16
 800826a:	bf08      	it	eq
 800826c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008270:	f380 8809 	msr	PSP, r0
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst>:
 8008280:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a0:	f7fe ff34 	bl	800710c <xTaskIncrementTick>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082aa:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <SysTick_Handler+0x3c>)
 80082ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <vPortSetupTimerInterrupt+0x34>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortSetupTimerInterrupt+0x38>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <vPortSetupTimerInterrupt+0x3c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <vPortSetupTimerInterrupt+0x40>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	099b      	lsrs	r3, r3, #6
 80082e4:	4a09      	ldr	r2, [pc, #36]	; (800830c <vPortSetupTimerInterrupt+0x44>)
 80082e6:	3b01      	subs	r3, #1
 80082e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ea:	4b04      	ldr	r3, [pc, #16]	; (80082fc <vPortSetupTimerInterrupt+0x34>)
 80082ec:	2207      	movs	r2, #7
 80082ee:	601a      	str	r2, [r3, #0]
}
 80082f0:	bf00      	nop
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	e000e010 	.word	0xe000e010
 8008300:	e000e018 	.word	0xe000e018
 8008304:	20000000 	.word	0x20000000
 8008308:	10624dd3 	.word	0x10624dd3
 800830c:	e000e014 	.word	0xe000e014

08008310 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008310:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008320 <vPortEnableVFP+0x10>
 8008314:	6801      	ldr	r1, [r0, #0]
 8008316:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800831a:	6001      	str	r1, [r0, #0]
 800831c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800831e:	bf00      	nop
 8008320:	e000ed88 	.word	0xe000ed88

08008324 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800832a:	f3ef 8305 	mrs	r3, IPSR
 800832e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b0f      	cmp	r3, #15
 8008334:	d913      	bls.n	800835e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <vPortValidateInterruptPriority+0x6c>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008340:	4b14      	ldr	r3, [pc, #80]	; (8008394 <vPortValidateInterruptPriority+0x70>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	7afa      	ldrb	r2, [r7, #11]
 8008346:	429a      	cmp	r2, r3
 8008348:	d209      	bcs.n	800835e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	e7fe      	b.n	800835c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800835e:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <vPortValidateInterruptPriority+0x74>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <vPortValidateInterruptPriority+0x78>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d909      	bls.n	8008382 <vPortValidateInterruptPriority+0x5e>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	e7fe      	b.n	8008380 <vPortValidateInterruptPriority+0x5c>
	}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000e3f0 	.word	0xe000e3f0
 8008394:	20000eec 	.word	0x20000eec
 8008398:	e000ed0c 	.word	0xe000ed0c
 800839c:	20000ef0 	.word	0x20000ef0

080083a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08a      	sub	sp, #40	; 0x28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083ac:	f7fe fdf4 	bl	8006f98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083b0:	4b57      	ldr	r3, [pc, #348]	; (8008510 <pvPortMalloc+0x170>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083b8:	f000 f90c 	bl	80085d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083bc:	4b55      	ldr	r3, [pc, #340]	; (8008514 <pvPortMalloc+0x174>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f040 808c 	bne.w	80084e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01c      	beq.n	800840a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80083d0:	2208      	movs	r2, #8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d013      	beq.n	800840a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f023 0307 	bic.w	r3, r3, #7
 80083e8:	3308      	adds	r3, #8
 80083ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <pvPortMalloc+0x6a>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	e7fe      	b.n	8008408 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d068      	beq.n	80084e2 <pvPortMalloc+0x142>
 8008410:	4b41      	ldr	r3, [pc, #260]	; (8008518 <pvPortMalloc+0x178>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d863      	bhi.n	80084e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800841a:	4b40      	ldr	r3, [pc, #256]	; (800851c <pvPortMalloc+0x17c>)
 800841c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800841e:	4b3f      	ldr	r3, [pc, #252]	; (800851c <pvPortMalloc+0x17c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008424:	e004      	b.n	8008430 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <pvPortMalloc+0xa2>
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f1      	bne.n	8008426 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008442:	4b33      	ldr	r3, [pc, #204]	; (8008510 <pvPortMalloc+0x170>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	d04a      	beq.n	80084e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	4413      	add	r3, r2
 8008454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	2308      	movs	r3, #8
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	d91e      	bls.n	80084ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800846e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	2b00      	cmp	r3, #0
 800847e:	d009      	beq.n	8008494 <pvPortMalloc+0xf4>
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
 8008492:	e7fe      	b.n	8008492 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	1ad2      	subs	r2, r2, r3
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084a6:	69b8      	ldr	r0, [r7, #24]
 80084a8:	f000 f8f6 	bl	8008698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <pvPortMalloc+0x178>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <pvPortMalloc+0x178>)
 80084b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084ba:	4b17      	ldr	r3, [pc, #92]	; (8008518 <pvPortMalloc+0x178>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <pvPortMalloc+0x180>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d203      	bcs.n	80084ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <pvPortMalloc+0x178>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a15      	ldr	r2, [pc, #84]	; (8008520 <pvPortMalloc+0x180>)
 80084cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <pvPortMalloc+0x174>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084e2:	f7fe fd67 	bl	8006fb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <pvPortMalloc+0x164>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	e7fe      	b.n	8008502 <pvPortMalloc+0x162>
	return pvReturn;
 8008504:	69fb      	ldr	r3, [r7, #28]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3728      	adds	r7, #40	; 0x28
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20004afc 	.word	0x20004afc
 8008514:	20004b08 	.word	0x20004b08
 8008518:	20004b00 	.word	0x20004b00
 800851c:	20004af4 	.word	0x20004af4
 8008520:	20004b04 	.word	0x20004b04

08008524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d046      	beq.n	80085c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008536:	2308      	movs	r3, #8
 8008538:	425b      	negs	r3, r3
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4413      	add	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	4b20      	ldr	r3, [pc, #128]	; (80085cc <vPortFree+0xa8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4013      	ands	r3, r2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <vPortFree+0x42>
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e7fe      	b.n	8008564 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <vPortFree+0x5e>
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60bb      	str	r3, [r7, #8]
 8008580:	e7fe      	b.n	8008580 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <vPortFree+0xa8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d019      	beq.n	80085c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d115      	bne.n	80085c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <vPortFree+0xa8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085a8:	f7fe fcf6 	bl	8006f98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <vPortFree+0xac>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <vPortFree+0xac>)
 80085b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f000 f86c 	bl	8008698 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085c0:	f7fe fcf8 	bl	8006fb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085c4:	bf00      	nop
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20004b08 	.word	0x20004b08
 80085d0:	20004b00 	.word	0x20004b00

080085d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085e0:	4b27      	ldr	r3, [pc, #156]	; (8008680 <prvHeapInit+0xac>)
 80085e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3307      	adds	r3, #7
 80085f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <prvHeapInit+0xac>)
 8008604:	4413      	add	r3, r2
 8008606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <prvHeapInit+0xb0>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008612:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <prvHeapInit+0xb0>)
 8008614:	2200      	movs	r2, #0
 8008616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008620:	2208      	movs	r2, #8
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0307 	bic.w	r3, r3, #7
 800862e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a15      	ldr	r2, [pc, #84]	; (8008688 <prvHeapInit+0xb4>)
 8008634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <prvHeapInit+0xb4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <prvHeapInit+0xb4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <prvHeapInit+0xb4>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	4a0a      	ldr	r2, [pc, #40]	; (800868c <prvHeapInit+0xb8>)
 8008662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4a09      	ldr	r2, [pc, #36]	; (8008690 <prvHeapInit+0xbc>)
 800866a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800866c:	4b09      	ldr	r3, [pc, #36]	; (8008694 <prvHeapInit+0xc0>)
 800866e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000ef4 	.word	0x20000ef4
 8008684:	20004af4 	.word	0x20004af4
 8008688:	20004afc 	.word	0x20004afc
 800868c:	20004b04 	.word	0x20004b04
 8008690:	20004b00 	.word	0x20004b00
 8008694:	20004b08 	.word	0x20004b08

08008698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086a0:	4b28      	ldr	r3, [pc, #160]	; (8008744 <prvInsertBlockIntoFreeList+0xac>)
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e002      	b.n	80086ac <prvInsertBlockIntoFreeList+0x14>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d8f7      	bhi.n	80086a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d108      	bne.n	80086da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	441a      	add	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d118      	bne.n	8008720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <prvInsertBlockIntoFreeList+0xb0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d00d      	beq.n	8008716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	441a      	add	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e008      	b.n	8008728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <prvInsertBlockIntoFreeList+0xb0>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e003      	b.n	8008728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d002      	beq.n	8008736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20004af4 	.word	0x20004af4
 8008748:	20004afc 	.word	0x20004afc

0800874c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008750:	2200      	movs	r2, #0
 8008752:	4912      	ldr	r1, [pc, #72]	; (800879c <MX_USB_DEVICE_Init+0x50>)
 8008754:	4812      	ldr	r0, [pc, #72]	; (80087a0 <MX_USB_DEVICE_Init+0x54>)
 8008756:	f7fc fa83 	bl	8004c60 <USBD_Init>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008760:	f7f8 f860 	bl	8000824 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008764:	490f      	ldr	r1, [pc, #60]	; (80087a4 <MX_USB_DEVICE_Init+0x58>)
 8008766:	480e      	ldr	r0, [pc, #56]	; (80087a0 <MX_USB_DEVICE_Init+0x54>)
 8008768:	f7fc fab2 	bl	8004cd0 <USBD_RegisterClass>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008772:	f7f8 f857 	bl	8000824 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008776:	490c      	ldr	r1, [pc, #48]	; (80087a8 <MX_USB_DEVICE_Init+0x5c>)
 8008778:	4809      	ldr	r0, [pc, #36]	; (80087a0 <MX_USB_DEVICE_Init+0x54>)
 800877a:	f7fc fa01 	bl	8004b80 <USBD_CDC_RegisterInterface>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008784:	f7f8 f84e 	bl	8000824 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008788:	4805      	ldr	r0, [pc, #20]	; (80087a0 <MX_USB_DEVICE_Init+0x54>)
 800878a:	f7fc fac7 	bl	8004d1c <USBD_Start>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008794:	f7f8 f846 	bl	8000824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008798:	bf00      	nop
 800879a:	bd80      	pop	{r7, pc}
 800879c:	2000012c 	.word	0x2000012c
 80087a0:	20004ba0 	.word	0x20004ba0
 80087a4:	20000014 	.word	0x20000014
 80087a8:	2000011c 	.word	0x2000011c

080087ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087b0:	2200      	movs	r2, #0
 80087b2:	4905      	ldr	r1, [pc, #20]	; (80087c8 <CDC_Init_FS+0x1c>)
 80087b4:	4805      	ldr	r0, [pc, #20]	; (80087cc <CDC_Init_FS+0x20>)
 80087b6:	f7fc f9fa 	bl	8004bae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80087ba:	4905      	ldr	r1, [pc, #20]	; (80087d0 <CDC_Init_FS+0x24>)
 80087bc:	4803      	ldr	r0, [pc, #12]	; (80087cc <CDC_Init_FS+0x20>)
 80087be:	f7fc fa10 	bl	8004be2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	2000563c 	.word	0x2000563c
 80087cc:	20004ba0 	.word	0x20004ba0
 80087d0:	20004e3c 	.word	0x20004e3c

080087d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087da:	4618      	mov	r0, r3
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	6039      	str	r1, [r7, #0]
 80087ee:	71fb      	strb	r3, [r7, #7]
 80087f0:	4613      	mov	r3, r2
 80087f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b23      	cmp	r3, #35	; 0x23
 80087f8:	d84a      	bhi.n	8008890 <CDC_Control_FS+0xac>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <CDC_Control_FS+0x1c>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008891 	.word	0x08008891
 8008804:	08008891 	.word	0x08008891
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008891 	.word	0x08008891
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	08008891 	.word	0x08008891
 8008830:	08008891 	.word	0x08008891
 8008834:	08008891 	.word	0x08008891
 8008838:	08008891 	.word	0x08008891
 800883c:	08008891 	.word	0x08008891
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	08008891 	.word	0x08008891
 8008860:	08008891 	.word	0x08008891
 8008864:	08008891 	.word	0x08008891
 8008868:	08008891 	.word	0x08008891
 800886c:	08008891 	.word	0x08008891
 8008870:	08008891 	.word	0x08008891
 8008874:	08008891 	.word	0x08008891
 8008878:	08008891 	.word	0x08008891
 800887c:	08008891 	.word	0x08008891
 8008880:	08008891 	.word	0x08008891
 8008884:	08008891 	.word	0x08008891
 8008888:	08008891 	.word	0x08008891
 800888c:	08008891 	.word	0x08008891
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008890:	bf00      	nop
  }

  return (USBD_OK);
 8008892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4805      	ldr	r0, [pc, #20]	; (80088c4 <CDC_Receive_FS+0x24>)
 80088ae:	f7fc f998 	bl	8004be2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088b2:	4804      	ldr	r0, [pc, #16]	; (80088c4 <CDC_Receive_FS+0x24>)
 80088b4:	f7fc f9a9 	bl	8004c0a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80088b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20004ba0 	.word	0x20004ba0

080088c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2212      	movs	r2, #18
 80088d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088da:	4b03      	ldr	r3, [pc, #12]	; (80088e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088dc:	4618      	mov	r0, r3
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000148 	.word	0x20000148

080088ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	6039      	str	r1, [r7, #0]
 80088f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2204      	movs	r2, #4
 80088fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088fe:	4b03      	ldr	r3, [pc, #12]	; (800890c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	2000015c 	.word	0x2000015c

08008910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4907      	ldr	r1, [pc, #28]	; (8008944 <USBD_FS_ProductStrDescriptor+0x34>)
 8008926:	4808      	ldr	r0, [pc, #32]	; (8008948 <USBD_FS_ProductStrDescriptor+0x38>)
 8008928:	f7fd f930 	bl	8005b8c <USBD_GetString>
 800892c:	e004      	b.n	8008938 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	4904      	ldr	r1, [pc, #16]	; (8008944 <USBD_FS_ProductStrDescriptor+0x34>)
 8008932:	4805      	ldr	r0, [pc, #20]	; (8008948 <USBD_FS_ProductStrDescriptor+0x38>)
 8008934:	f7fd f92a 	bl	8005b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20005e3c 	.word	0x20005e3c
 8008948:	0800a074 	.word	0x0800a074

0800894c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	4904      	ldr	r1, [pc, #16]	; (800896c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800895c:	4804      	ldr	r0, [pc, #16]	; (8008970 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800895e:	f7fd f915 	bl	8005b8c <USBD_GetString>
  return USBD_StrDesc;
 8008962:	4b02      	ldr	r3, [pc, #8]	; (800896c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20005e3c 	.word	0x20005e3c
 8008970:	0800a08c 	.word	0x0800a08c

08008974 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	221a      	movs	r2, #26
 8008984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008986:	f000 f843 	bl	8008a10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800898a:	4b02      	ldr	r3, [pc, #8]	; (8008994 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000160 	.word	0x20000160

08008998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4907      	ldr	r1, [pc, #28]	; (80089cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80089ae:	4808      	ldr	r0, [pc, #32]	; (80089d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089b0:	f7fd f8ec 	bl	8005b8c <USBD_GetString>
 80089b4:	e004      	b.n	80089c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	4904      	ldr	r1, [pc, #16]	; (80089cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80089ba:	4805      	ldr	r0, [pc, #20]	; (80089d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089bc:	f7fd f8e6 	bl	8005b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c0:	4b02      	ldr	r3, [pc, #8]	; (80089cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20005e3c 	.word	0x20005e3c
 80089d0:	0800a0a0 	.word	0x0800a0a0

080089d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d105      	bne.n	80089f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	4907      	ldr	r1, [pc, #28]	; (8008a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089ea:	4808      	ldr	r0, [pc, #32]	; (8008a0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089ec:	f7fd f8ce 	bl	8005b8c <USBD_GetString>
 80089f0:	e004      	b.n	80089fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4904      	ldr	r1, [pc, #16]	; (8008a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089f6:	4805      	ldr	r0, [pc, #20]	; (8008a0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089f8:	f7fd f8c8 	bl	8005b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20005e3c 	.word	0x20005e3c
 8008a0c:	0800a0ac 	.word	0x0800a0ac

08008a10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <Get_SerialNum+0x44>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <Get_SerialNum+0x48>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a22:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <Get_SerialNum+0x4c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a36:	2208      	movs	r2, #8
 8008a38:	4909      	ldr	r1, [pc, #36]	; (8008a60 <Get_SerialNum+0x50>)
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 f814 	bl	8008a68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a40:	2204      	movs	r2, #4
 8008a42:	4908      	ldr	r1, [pc, #32]	; (8008a64 <Get_SerialNum+0x54>)
 8008a44:	68b8      	ldr	r0, [r7, #8]
 8008a46:	f000 f80f 	bl	8008a68 <IntToUnicode>
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	1fff7a10 	.word	0x1fff7a10
 8008a58:	1fff7a14 	.word	0x1fff7a14
 8008a5c:	1fff7a18 	.word	0x1fff7a18
 8008a60:	20000162 	.word	0x20000162
 8008a64:	20000172 	.word	0x20000172

08008a68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
 8008a7e:	e027      	b.n	8008ad0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	0f1b      	lsrs	r3, r3, #28
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d80b      	bhi.n	8008aa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	0f1b      	lsrs	r3, r3, #28
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	4619      	mov	r1, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	440b      	add	r3, r1
 8008a98:	3230      	adds	r2, #48	; 0x30
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	e00a      	b.n	8008ab6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	0f1b      	lsrs	r3, r3, #28
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	440b      	add	r3, r1
 8008ab0:	3237      	adds	r2, #55	; 0x37
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	3301      	adds	r3, #1
 8008ace:	75fb      	strb	r3, [r7, #23]
 8008ad0:	7dfa      	ldrb	r2, [r7, #23]
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d3d3      	bcc.n	8008a80 <IntToUnicode+0x18>
  }
}
 8008ad8:	bf00      	nop
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08a      	sub	sp, #40	; 0x28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	60da      	str	r2, [r3, #12]
 8008afa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b04:	d147      	bne.n	8008b96 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0e:	4a24      	ldr	r2, [pc, #144]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b10:	f043 0301 	orr.w	r3, r3, #1
 8008b14:	6313      	str	r3, [r2, #48]	; 0x30
 8008b16:	4b22      	ldr	r3, [pc, #136]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	4619      	mov	r1, r3
 8008b36:	481b      	ldr	r0, [pc, #108]	; (8008ba4 <HAL_PCD_MspInit+0xc0>)
 8008b38:	f7f8 f950 	bl	8000ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b42:	2302      	movs	r3, #2
 8008b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b4e:	230a      	movs	r3, #10
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	4619      	mov	r1, r3
 8008b58:	4812      	ldr	r0, [pc, #72]	; (8008ba4 <HAL_PCD_MspInit+0xc0>)
 8008b5a:	f7f8 f93f 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b5e:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b62:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b68:	6353      	str	r3, [r2, #52]	; 0x34
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b78:	6453      	str	r3, [r2, #68]	; 0x44
 8008b7a:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <HAL_PCD_MspInit+0xbc>)
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008b86:	2200      	movs	r2, #0
 8008b88:	2105      	movs	r1, #5
 8008b8a:	2043      	movs	r0, #67	; 0x43
 8008b8c:	f7f8 f8fc 	bl	8000d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b90:	2043      	movs	r0, #67	; 0x43
 8008b92:	f7f8 f915 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b96:	bf00      	nop
 8008b98:	3728      	adds	r7, #40	; 0x28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	40023800 	.word	0x40023800
 8008ba4:	40020000 	.word	0x40020000

08008ba8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fc f8f5 	bl	8004dae <USBD_LL_SetupStage>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f7fc f925 	bl	8004e44 <USBD_LL_DataOutStage>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	1a9b      	subs	r3, r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	3348      	adds	r3, #72	; 0x48
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f7fc f97c 	bl	8004f26 <USBD_LL_DataInStage>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fc fa8a 	bl	800515e <USBD_LL_SOF>
}
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
 8008c6a:	e008      	b.n	8008c7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d102      	bne.n	8008c7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c74:	2301      	movs	r3, #1
 8008c76:	73fb      	strb	r3, [r7, #15]
 8008c78:	e001      	b.n	8008c7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c7a:	f7f7 fdd3 	bl	8000824 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c84:	7bfa      	ldrb	r2, [r7, #15]
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fc fa32 	bl	80050f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fc f9eb 	bl	8005070 <USBD_LL_Reset>
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fc fa2d 	bl	8005112 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6812      	ldr	r2, [r2, #0]
 8008cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <HAL_PCD_SuspendCallback+0x48>)
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	4a03      	ldr	r2, [pc, #12]	; (8008cec <HAL_PCD_SuspendCallback+0x48>)
 8008cde:	f043 0306 	orr.w	r3, r3, #6
 8008ce2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fc fa1c 	bl	800513c <USBD_LL_Resume>
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fc fa42 	bl	80051ac <USBD_LL_IsoOUTIncomplete>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fc fa23 	bl	8005192 <USBD_LL_IsoINIncomplete>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fc fa2f 	bl	80051c6 <USBD_LL_DevConnected>
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fc fa2c 	bl	80051dc <USBD_LL_DevDisconnected>
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d13c      	bne.n	8008e16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d9c:	4a20      	ldr	r2, [pc, #128]	; (8008e20 <USBD_LL_Init+0x94>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a1e      	ldr	r2, [pc, #120]	; (8008e20 <USBD_LL_Init+0x94>)
 8008da8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dac:	4b1c      	ldr	r3, [pc, #112]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008db2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <USBD_LL_Init+0x94>)
 8008db6:	2204      	movs	r2, #4
 8008db8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dba:	4b19      	ldr	r3, [pc, #100]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dc6:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dc8:	2202      	movs	r2, #2
 8008dca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dcc:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008dd2:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008dde:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <USBD_LL_Init+0x94>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <USBD_LL_Init+0x94>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008dea:	480d      	ldr	r0, [pc, #52]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dec:	f7f8 f9ec 	bl	80011c8 <HAL_PCD_Init>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008df6:	f7f7 fd15 	bl	8000824 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008dfa:	2180      	movs	r1, #128	; 0x80
 8008dfc:	4808      	ldr	r0, [pc, #32]	; (8008e20 <USBD_LL_Init+0x94>)
 8008dfe:	f7f9 fb48 	bl	8002492 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e02:	2240      	movs	r2, #64	; 0x40
 8008e04:	2100      	movs	r1, #0
 8008e06:	4806      	ldr	r0, [pc, #24]	; (8008e20 <USBD_LL_Init+0x94>)
 8008e08:	f7f9 fafc 	bl	8002404 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e0c:	2280      	movs	r2, #128	; 0x80
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4803      	ldr	r0, [pc, #12]	; (8008e20 <USBD_LL_Init+0x94>)
 8008e12:	f7f9 faf7 	bl	8002404 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	2000603c 	.word	0x2000603c

08008e24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f8 fad5 	bl	80013ea <HAL_PCD_Start>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f92e 	bl	80090a8 <USBD_Get_USB_Status>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	4608      	mov	r0, r1
 8008e64:	4611      	mov	r1, r2
 8008e66:	461a      	mov	r2, r3
 8008e68:	4603      	mov	r3, r0
 8008e6a:	70fb      	strb	r3, [r7, #3]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70bb      	strb	r3, [r7, #2]
 8008e70:	4613      	mov	r3, r2
 8008e72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008e82:	78bb      	ldrb	r3, [r7, #2]
 8008e84:	883a      	ldrh	r2, [r7, #0]
 8008e86:	78f9      	ldrb	r1, [r7, #3]
 8008e88:	f7f8 feae 	bl	8001be8 <HAL_PCD_EP_Open>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 f908 	bl	80090a8 <USBD_Get_USB_Status>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f8 fef7 	bl	8001cb8 <HAL_PCD_EP_Close>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f8e9 	bl	80090a8 <USBD_Get_USB_Status>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f8 ffcf 	bl	8001ea6 <HAL_PCD_EP_SetStall>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f8ca 	bl	80090a8 <USBD_Get_USB_Status>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f9 f814 	bl	8001f6e <HAL_PCD_EP_ClrStall>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f8ab 	bl	80090a8 <USBD_Get_USB_Status>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f72:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	da0b      	bge.n	8008f94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f82:	68f9      	ldr	r1, [r7, #12]
 8008f84:	4613      	mov	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	333e      	adds	r3, #62	; 0x3e
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	e00b      	b.n	8008fac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7f8 fde1 	bl	8001b9e <HAL_PCD_SetAddress>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f860 	bl	80090a8 <USBD_Get_USB_Status>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	461a      	mov	r2, r3
 8009002:	460b      	mov	r3, r1
 8009004:	72fb      	strb	r3, [r7, #11]
 8009006:	4613      	mov	r3, r2
 8009008:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	7af9      	ldrb	r1, [r7, #11]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f7f8 fef8 	bl	8001e12 <HAL_PCD_EP_Transmit>
 8009022:	4603      	mov	r3, r0
 8009024:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f83d 	bl	80090a8 <USBD_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009032:	7dbb      	ldrb	r3, [r7, #22]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	461a      	mov	r2, r3
 8009048:	460b      	mov	r3, r1
 800904a:	72fb      	strb	r3, [r7, #11]
 800904c:	4613      	mov	r3, r2
 800904e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800905e:	893b      	ldrh	r3, [r7, #8]
 8009060:	7af9      	ldrb	r1, [r7, #11]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f7f8 fe72 	bl	8001d4c <HAL_PCD_EP_Receive>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f81a 	bl	80090a8 <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009078:	7dbb      	ldrb	r3, [r7, #22]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f8 fea2 	bl	8001de2 <HAL_PCD_EP_GetRxCount>
 800909e:	4603      	mov	r3, r0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d817      	bhi.n	80090ec <USBD_Get_USB_Status+0x44>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <USBD_Get_USB_Status+0x1c>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090db 	.word	0x080090db
 80090cc:	080090e1 	.word	0x080090e1
 80090d0:	080090e7 	.word	0x080090e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
    break;
 80090d8:	e00b      	b.n	80090f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	73fb      	strb	r3, [r7, #15]
    break;
 80090de:	e008      	b.n	80090f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090e0:	2301      	movs	r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
    break;
 80090e4:	e005      	b.n	80090f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ea:	e002      	b.n	80090f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090ec:	2302      	movs	r3, #2
 80090ee:	73fb      	strb	r3, [r7, #15]
    break;
 80090f0:	bf00      	nop
  }
  return usb_status;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <__errno>:
 8009100:	4b01      	ldr	r3, [pc, #4]	; (8009108 <__errno+0x8>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000017c 	.word	0x2000017c

0800910c <__libc_init_array>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4e0d      	ldr	r6, [pc, #52]	; (8009144 <__libc_init_array+0x38>)
 8009110:	4c0d      	ldr	r4, [pc, #52]	; (8009148 <__libc_init_array+0x3c>)
 8009112:	1ba4      	subs	r4, r4, r6
 8009114:	10a4      	asrs	r4, r4, #2
 8009116:	2500      	movs	r5, #0
 8009118:	42a5      	cmp	r5, r4
 800911a:	d109      	bne.n	8009130 <__libc_init_array+0x24>
 800911c:	4e0b      	ldr	r6, [pc, #44]	; (800914c <__libc_init_array+0x40>)
 800911e:	4c0c      	ldr	r4, [pc, #48]	; (8009150 <__libc_init_array+0x44>)
 8009120:	f000 ff6a 	bl	8009ff8 <_init>
 8009124:	1ba4      	subs	r4, r4, r6
 8009126:	10a4      	asrs	r4, r4, #2
 8009128:	2500      	movs	r5, #0
 800912a:	42a5      	cmp	r5, r4
 800912c:	d105      	bne.n	800913a <__libc_init_array+0x2e>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009134:	4798      	blx	r3
 8009136:	3501      	adds	r5, #1
 8009138:	e7ee      	b.n	8009118 <__libc_init_array+0xc>
 800913a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800913e:	4798      	blx	r3
 8009140:	3501      	adds	r5, #1
 8009142:	e7f2      	b.n	800912a <__libc_init_array+0x1e>
 8009144:	0800a1bc 	.word	0x0800a1bc
 8009148:	0800a1bc 	.word	0x0800a1bc
 800914c:	0800a1bc 	.word	0x0800a1bc
 8009150:	0800a1c0 	.word	0x0800a1c0

08009154 <malloc>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <malloc+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 b86d 	b.w	8009238 <_malloc_r>
 800915e:	bf00      	nop
 8009160:	2000017c 	.word	0x2000017c

08009164 <free>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <free+0xc>)
 8009166:	4601      	mov	r1, r0
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	f000 b817 	b.w	800919c <_free_r>
 800916e:	bf00      	nop
 8009170:	2000017c 	.word	0x2000017c

08009174 <memcpy>:
 8009174:	b510      	push	{r4, lr}
 8009176:	1e43      	subs	r3, r0, #1
 8009178:	440a      	add	r2, r1
 800917a:	4291      	cmp	r1, r2
 800917c:	d100      	bne.n	8009180 <memcpy+0xc>
 800917e:	bd10      	pop	{r4, pc}
 8009180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009188:	e7f7      	b.n	800917a <memcpy+0x6>

0800918a <memset>:
 800918a:	4402      	add	r2, r0
 800918c:	4603      	mov	r3, r0
 800918e:	4293      	cmp	r3, r2
 8009190:	d100      	bne.n	8009194 <memset+0xa>
 8009192:	4770      	bx	lr
 8009194:	f803 1b01 	strb.w	r1, [r3], #1
 8009198:	e7f9      	b.n	800918e <memset+0x4>
	...

0800919c <_free_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4605      	mov	r5, r0
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d045      	beq.n	8009230 <_free_r+0x94>
 80091a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a8:	1f0c      	subs	r4, r1, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfb8      	it	lt
 80091ae:	18e4      	addlt	r4, r4, r3
 80091b0:	f000 f9a2 	bl	80094f8 <__malloc_lock>
 80091b4:	4a1f      	ldr	r2, [pc, #124]	; (8009234 <_free_r+0x98>)
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	4610      	mov	r0, r2
 80091ba:	b933      	cbnz	r3, 80091ca <_free_r+0x2e>
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	6014      	str	r4, [r2, #0]
 80091c0:	4628      	mov	r0, r5
 80091c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c6:	f000 b998 	b.w	80094fa <__malloc_unlock>
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	d90c      	bls.n	80091e8 <_free_r+0x4c>
 80091ce:	6821      	ldr	r1, [r4, #0]
 80091d0:	1862      	adds	r2, r4, r1
 80091d2:	4293      	cmp	r3, r2
 80091d4:	bf04      	itt	eq
 80091d6:	681a      	ldreq	r2, [r3, #0]
 80091d8:	685b      	ldreq	r3, [r3, #4]
 80091da:	6063      	str	r3, [r4, #4]
 80091dc:	bf04      	itt	eq
 80091de:	1852      	addeq	r2, r2, r1
 80091e0:	6022      	streq	r2, [r4, #0]
 80091e2:	6004      	str	r4, [r0, #0]
 80091e4:	e7ec      	b.n	80091c0 <_free_r+0x24>
 80091e6:	4613      	mov	r3, r2
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	b10a      	cbz	r2, 80091f0 <_free_r+0x54>
 80091ec:	42a2      	cmp	r2, r4
 80091ee:	d9fa      	bls.n	80091e6 <_free_r+0x4a>
 80091f0:	6819      	ldr	r1, [r3, #0]
 80091f2:	1858      	adds	r0, r3, r1
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d10b      	bne.n	8009210 <_free_r+0x74>
 80091f8:	6820      	ldr	r0, [r4, #0]
 80091fa:	4401      	add	r1, r0
 80091fc:	1858      	adds	r0, r3, r1
 80091fe:	4282      	cmp	r2, r0
 8009200:	6019      	str	r1, [r3, #0]
 8009202:	d1dd      	bne.n	80091c0 <_free_r+0x24>
 8009204:	6810      	ldr	r0, [r2, #0]
 8009206:	6852      	ldr	r2, [r2, #4]
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	4401      	add	r1, r0
 800920c:	6019      	str	r1, [r3, #0]
 800920e:	e7d7      	b.n	80091c0 <_free_r+0x24>
 8009210:	d902      	bls.n	8009218 <_free_r+0x7c>
 8009212:	230c      	movs	r3, #12
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	e7d3      	b.n	80091c0 <_free_r+0x24>
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	1821      	adds	r1, r4, r0
 800921c:	428a      	cmp	r2, r1
 800921e:	bf04      	itt	eq
 8009220:	6811      	ldreq	r1, [r2, #0]
 8009222:	6852      	ldreq	r2, [r2, #4]
 8009224:	6062      	str	r2, [r4, #4]
 8009226:	bf04      	itt	eq
 8009228:	1809      	addeq	r1, r1, r0
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	605c      	str	r4, [r3, #4]
 800922e:	e7c7      	b.n	80091c0 <_free_r+0x24>
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	bf00      	nop
 8009234:	20004b0c 	.word	0x20004b0c

08009238 <_malloc_r>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	1ccd      	adds	r5, r1, #3
 800923c:	f025 0503 	bic.w	r5, r5, #3
 8009240:	3508      	adds	r5, #8
 8009242:	2d0c      	cmp	r5, #12
 8009244:	bf38      	it	cc
 8009246:	250c      	movcc	r5, #12
 8009248:	2d00      	cmp	r5, #0
 800924a:	4606      	mov	r6, r0
 800924c:	db01      	blt.n	8009252 <_malloc_r+0x1a>
 800924e:	42a9      	cmp	r1, r5
 8009250:	d903      	bls.n	800925a <_malloc_r+0x22>
 8009252:	230c      	movs	r3, #12
 8009254:	6033      	str	r3, [r6, #0]
 8009256:	2000      	movs	r0, #0
 8009258:	bd70      	pop	{r4, r5, r6, pc}
 800925a:	f000 f94d 	bl	80094f8 <__malloc_lock>
 800925e:	4a21      	ldr	r2, [pc, #132]	; (80092e4 <_malloc_r+0xac>)
 8009260:	6814      	ldr	r4, [r2, #0]
 8009262:	4621      	mov	r1, r4
 8009264:	b991      	cbnz	r1, 800928c <_malloc_r+0x54>
 8009266:	4c20      	ldr	r4, [pc, #128]	; (80092e8 <_malloc_r+0xb0>)
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	b91b      	cbnz	r3, 8009274 <_malloc_r+0x3c>
 800926c:	4630      	mov	r0, r6
 800926e:	f000 f869 	bl	8009344 <_sbrk_r>
 8009272:	6020      	str	r0, [r4, #0]
 8009274:	4629      	mov	r1, r5
 8009276:	4630      	mov	r0, r6
 8009278:	f000 f864 	bl	8009344 <_sbrk_r>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d124      	bne.n	80092ca <_malloc_r+0x92>
 8009280:	230c      	movs	r3, #12
 8009282:	6033      	str	r3, [r6, #0]
 8009284:	4630      	mov	r0, r6
 8009286:	f000 f938 	bl	80094fa <__malloc_unlock>
 800928a:	e7e4      	b.n	8009256 <_malloc_r+0x1e>
 800928c:	680b      	ldr	r3, [r1, #0]
 800928e:	1b5b      	subs	r3, r3, r5
 8009290:	d418      	bmi.n	80092c4 <_malloc_r+0x8c>
 8009292:	2b0b      	cmp	r3, #11
 8009294:	d90f      	bls.n	80092b6 <_malloc_r+0x7e>
 8009296:	600b      	str	r3, [r1, #0]
 8009298:	50cd      	str	r5, [r1, r3]
 800929a:	18cc      	adds	r4, r1, r3
 800929c:	4630      	mov	r0, r6
 800929e:	f000 f92c 	bl	80094fa <__malloc_unlock>
 80092a2:	f104 000b 	add.w	r0, r4, #11
 80092a6:	1d23      	adds	r3, r4, #4
 80092a8:	f020 0007 	bic.w	r0, r0, #7
 80092ac:	1ac3      	subs	r3, r0, r3
 80092ae:	d0d3      	beq.n	8009258 <_malloc_r+0x20>
 80092b0:	425a      	negs	r2, r3
 80092b2:	50e2      	str	r2, [r4, r3]
 80092b4:	e7d0      	b.n	8009258 <_malloc_r+0x20>
 80092b6:	428c      	cmp	r4, r1
 80092b8:	684b      	ldr	r3, [r1, #4]
 80092ba:	bf16      	itet	ne
 80092bc:	6063      	strne	r3, [r4, #4]
 80092be:	6013      	streq	r3, [r2, #0]
 80092c0:	460c      	movne	r4, r1
 80092c2:	e7eb      	b.n	800929c <_malloc_r+0x64>
 80092c4:	460c      	mov	r4, r1
 80092c6:	6849      	ldr	r1, [r1, #4]
 80092c8:	e7cc      	b.n	8009264 <_malloc_r+0x2c>
 80092ca:	1cc4      	adds	r4, r0, #3
 80092cc:	f024 0403 	bic.w	r4, r4, #3
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d005      	beq.n	80092e0 <_malloc_r+0xa8>
 80092d4:	1a21      	subs	r1, r4, r0
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f834 	bl	8009344 <_sbrk_r>
 80092dc:	3001      	adds	r0, #1
 80092de:	d0cf      	beq.n	8009280 <_malloc_r+0x48>
 80092e0:	6025      	str	r5, [r4, #0]
 80092e2:	e7db      	b.n	800929c <_malloc_r+0x64>
 80092e4:	20004b0c 	.word	0x20004b0c
 80092e8:	20004b10 	.word	0x20004b10

080092ec <iprintf>:
 80092ec:	b40f      	push	{r0, r1, r2, r3}
 80092ee:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <iprintf+0x2c>)
 80092f0:	b513      	push	{r0, r1, r4, lr}
 80092f2:	681c      	ldr	r4, [r3, #0]
 80092f4:	b124      	cbz	r4, 8009300 <iprintf+0x14>
 80092f6:	69a3      	ldr	r3, [r4, #24]
 80092f8:	b913      	cbnz	r3, 8009300 <iprintf+0x14>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f872 	bl	80093e4 <__sinit>
 8009300:	ab05      	add	r3, sp, #20
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	68a1      	ldr	r1, [r4, #8]
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	4620      	mov	r0, r4
 800930a:	f000 f921 	bl	8009550 <_vfiprintf_r>
 800930e:	b002      	add	sp, #8
 8009310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009314:	b004      	add	sp, #16
 8009316:	4770      	bx	lr
 8009318:	2000017c 	.word	0x2000017c

0800931c <putchar>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <putchar+0x24>)
 8009320:	681c      	ldr	r4, [r3, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	b124      	cbz	r4, 8009330 <putchar+0x14>
 8009326:	69a3      	ldr	r3, [r4, #24]
 8009328:	b913      	cbnz	r3, 8009330 <putchar+0x14>
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f85a 	bl	80093e4 <__sinit>
 8009330:	68a2      	ldr	r2, [r4, #8]
 8009332:	4629      	mov	r1, r5
 8009334:	4620      	mov	r0, r4
 8009336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933a:	f000 bba7 	b.w	8009a8c <_putc_r>
 800933e:	bf00      	nop
 8009340:	2000017c 	.word	0x2000017c

08009344 <_sbrk_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4c06      	ldr	r4, [pc, #24]	; (8009360 <_sbrk_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4605      	mov	r5, r0
 800934c:	4608      	mov	r0, r1
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	f7f7 fb92 	bl	8000a78 <_sbrk>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_sbrk_r+0x1a>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	b103      	cbz	r3, 800935e <_sbrk_r+0x1a>
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20006444 	.word	0x20006444

08009364 <std>:
 8009364:	2300      	movs	r3, #0
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	e9c0 3300 	strd	r3, r3, [r0]
 800936e:	6083      	str	r3, [r0, #8]
 8009370:	8181      	strh	r1, [r0, #12]
 8009372:	6643      	str	r3, [r0, #100]	; 0x64
 8009374:	81c2      	strh	r2, [r0, #14]
 8009376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800937a:	6183      	str	r3, [r0, #24]
 800937c:	4619      	mov	r1, r3
 800937e:	2208      	movs	r2, #8
 8009380:	305c      	adds	r0, #92	; 0x5c
 8009382:	f7ff ff02 	bl	800918a <memset>
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x38>)
 8009388:	6263      	str	r3, [r4, #36]	; 0x24
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std+0x3c>)
 800938c:	62a3      	str	r3, [r4, #40]	; 0x28
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std+0x40>)
 8009390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <std+0x44>)
 8009394:	6224      	str	r4, [r4, #32]
 8009396:	6323      	str	r3, [r4, #48]	; 0x30
 8009398:	bd10      	pop	{r4, pc}
 800939a:	bf00      	nop
 800939c:	08009af9 	.word	0x08009af9
 80093a0:	08009b1b 	.word	0x08009b1b
 80093a4:	08009b53 	.word	0x08009b53
 80093a8:	08009b77 	.word	0x08009b77

080093ac <_cleanup_r>:
 80093ac:	4901      	ldr	r1, [pc, #4]	; (80093b4 <_cleanup_r+0x8>)
 80093ae:	f000 b885 	b.w	80094bc <_fwalk_reent>
 80093b2:	bf00      	nop
 80093b4:	08009e51 	.word	0x08009e51

080093b8 <__sfmoreglue>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	1e4a      	subs	r2, r1, #1
 80093bc:	2568      	movs	r5, #104	; 0x68
 80093be:	4355      	muls	r5, r2
 80093c0:	460e      	mov	r6, r1
 80093c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093c6:	f7ff ff37 	bl	8009238 <_malloc_r>
 80093ca:	4604      	mov	r4, r0
 80093cc:	b140      	cbz	r0, 80093e0 <__sfmoreglue+0x28>
 80093ce:	2100      	movs	r1, #0
 80093d0:	e9c0 1600 	strd	r1, r6, [r0]
 80093d4:	300c      	adds	r0, #12
 80093d6:	60a0      	str	r0, [r4, #8]
 80093d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093dc:	f7ff fed5 	bl	800918a <memset>
 80093e0:	4620      	mov	r0, r4
 80093e2:	bd70      	pop	{r4, r5, r6, pc}

080093e4 <__sinit>:
 80093e4:	6983      	ldr	r3, [r0, #24]
 80093e6:	b510      	push	{r4, lr}
 80093e8:	4604      	mov	r4, r0
 80093ea:	bb33      	cbnz	r3, 800943a <__sinit+0x56>
 80093ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80093f0:	6503      	str	r3, [r0, #80]	; 0x50
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <__sinit+0x58>)
 80093f4:	4a12      	ldr	r2, [pc, #72]	; (8009440 <__sinit+0x5c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6282      	str	r2, [r0, #40]	; 0x28
 80093fa:	4298      	cmp	r0, r3
 80093fc:	bf04      	itt	eq
 80093fe:	2301      	moveq	r3, #1
 8009400:	6183      	streq	r3, [r0, #24]
 8009402:	f000 f81f 	bl	8009444 <__sfp>
 8009406:	6060      	str	r0, [r4, #4]
 8009408:	4620      	mov	r0, r4
 800940a:	f000 f81b 	bl	8009444 <__sfp>
 800940e:	60a0      	str	r0, [r4, #8]
 8009410:	4620      	mov	r0, r4
 8009412:	f000 f817 	bl	8009444 <__sfp>
 8009416:	2200      	movs	r2, #0
 8009418:	60e0      	str	r0, [r4, #12]
 800941a:	2104      	movs	r1, #4
 800941c:	6860      	ldr	r0, [r4, #4]
 800941e:	f7ff ffa1 	bl	8009364 <std>
 8009422:	2201      	movs	r2, #1
 8009424:	2109      	movs	r1, #9
 8009426:	68a0      	ldr	r0, [r4, #8]
 8009428:	f7ff ff9c 	bl	8009364 <std>
 800942c:	2202      	movs	r2, #2
 800942e:	2112      	movs	r1, #18
 8009430:	68e0      	ldr	r0, [r4, #12]
 8009432:	f7ff ff97 	bl	8009364 <std>
 8009436:	2301      	movs	r3, #1
 8009438:	61a3      	str	r3, [r4, #24]
 800943a:	bd10      	pop	{r4, pc}
 800943c:	0800a11c 	.word	0x0800a11c
 8009440:	080093ad 	.word	0x080093ad

08009444 <__sfp>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <__sfp+0x70>)
 8009448:	681e      	ldr	r6, [r3, #0]
 800944a:	69b3      	ldr	r3, [r6, #24]
 800944c:	4607      	mov	r7, r0
 800944e:	b913      	cbnz	r3, 8009456 <__sfp+0x12>
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff ffc7 	bl	80093e4 <__sinit>
 8009456:	3648      	adds	r6, #72	; 0x48
 8009458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800945c:	3b01      	subs	r3, #1
 800945e:	d503      	bpl.n	8009468 <__sfp+0x24>
 8009460:	6833      	ldr	r3, [r6, #0]
 8009462:	b133      	cbz	r3, 8009472 <__sfp+0x2e>
 8009464:	6836      	ldr	r6, [r6, #0]
 8009466:	e7f7      	b.n	8009458 <__sfp+0x14>
 8009468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800946c:	b16d      	cbz	r5, 800948a <__sfp+0x46>
 800946e:	3468      	adds	r4, #104	; 0x68
 8009470:	e7f4      	b.n	800945c <__sfp+0x18>
 8009472:	2104      	movs	r1, #4
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ff9f 	bl	80093b8 <__sfmoreglue>
 800947a:	6030      	str	r0, [r6, #0]
 800947c:	2800      	cmp	r0, #0
 800947e:	d1f1      	bne.n	8009464 <__sfp+0x20>
 8009480:	230c      	movs	r3, #12
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4604      	mov	r4, r0
 8009486:	4620      	mov	r0, r4
 8009488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948a:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <__sfp+0x74>)
 800948c:	6665      	str	r5, [r4, #100]	; 0x64
 800948e:	e9c4 5500 	strd	r5, r5, [r4]
 8009492:	60a5      	str	r5, [r4, #8]
 8009494:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009498:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800949c:	2208      	movs	r2, #8
 800949e:	4629      	mov	r1, r5
 80094a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094a4:	f7ff fe71 	bl	800918a <memset>
 80094a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094b0:	e7e9      	b.n	8009486 <__sfp+0x42>
 80094b2:	bf00      	nop
 80094b4:	0800a11c 	.word	0x0800a11c
 80094b8:	ffff0001 	.word	0xffff0001

080094bc <_fwalk_reent>:
 80094bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c0:	4680      	mov	r8, r0
 80094c2:	4689      	mov	r9, r1
 80094c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094c8:	2600      	movs	r6, #0
 80094ca:	b914      	cbnz	r4, 80094d2 <_fwalk_reent+0x16>
 80094cc:	4630      	mov	r0, r6
 80094ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80094d6:	3f01      	subs	r7, #1
 80094d8:	d501      	bpl.n	80094de <_fwalk_reent+0x22>
 80094da:	6824      	ldr	r4, [r4, #0]
 80094dc:	e7f5      	b.n	80094ca <_fwalk_reent+0xe>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d907      	bls.n	80094f4 <_fwalk_reent+0x38>
 80094e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094e8:	3301      	adds	r3, #1
 80094ea:	d003      	beq.n	80094f4 <_fwalk_reent+0x38>
 80094ec:	4629      	mov	r1, r5
 80094ee:	4640      	mov	r0, r8
 80094f0:	47c8      	blx	r9
 80094f2:	4306      	orrs	r6, r0
 80094f4:	3568      	adds	r5, #104	; 0x68
 80094f6:	e7ee      	b.n	80094d6 <_fwalk_reent+0x1a>

080094f8 <__malloc_lock>:
 80094f8:	4770      	bx	lr

080094fa <__malloc_unlock>:
 80094fa:	4770      	bx	lr

080094fc <__sfputc_r>:
 80094fc:	6893      	ldr	r3, [r2, #8]
 80094fe:	3b01      	subs	r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	b410      	push	{r4}
 8009504:	6093      	str	r3, [r2, #8]
 8009506:	da08      	bge.n	800951a <__sfputc_r+0x1e>
 8009508:	6994      	ldr	r4, [r2, #24]
 800950a:	42a3      	cmp	r3, r4
 800950c:	db01      	blt.n	8009512 <__sfputc_r+0x16>
 800950e:	290a      	cmp	r1, #10
 8009510:	d103      	bne.n	800951a <__sfputc_r+0x1e>
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	f000 bb33 	b.w	8009b80 <__swbuf_r>
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	1c58      	adds	r0, r3, #1
 800951e:	6010      	str	r0, [r2, #0]
 8009520:	7019      	strb	r1, [r3, #0]
 8009522:	4608      	mov	r0, r1
 8009524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009528:	4770      	bx	lr

0800952a <__sfputs_r>:
 800952a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	4614      	mov	r4, r2
 8009532:	18d5      	adds	r5, r2, r3
 8009534:	42ac      	cmp	r4, r5
 8009536:	d101      	bne.n	800953c <__sfputs_r+0x12>
 8009538:	2000      	movs	r0, #0
 800953a:	e007      	b.n	800954c <__sfputs_r+0x22>
 800953c:	463a      	mov	r2, r7
 800953e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffda 	bl	80094fc <__sfputc_r>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d1f3      	bne.n	8009534 <__sfputs_r+0xa>
 800954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009550 <_vfiprintf_r>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	460c      	mov	r4, r1
 8009556:	b09d      	sub	sp, #116	; 0x74
 8009558:	4617      	mov	r7, r2
 800955a:	461d      	mov	r5, r3
 800955c:	4606      	mov	r6, r0
 800955e:	b118      	cbz	r0, 8009568 <_vfiprintf_r+0x18>
 8009560:	6983      	ldr	r3, [r0, #24]
 8009562:	b90b      	cbnz	r3, 8009568 <_vfiprintf_r+0x18>
 8009564:	f7ff ff3e 	bl	80093e4 <__sinit>
 8009568:	4b7c      	ldr	r3, [pc, #496]	; (800975c <_vfiprintf_r+0x20c>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d158      	bne.n	8009620 <_vfiprintf_r+0xd0>
 800956e:	6874      	ldr	r4, [r6, #4]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	0718      	lsls	r0, r3, #28
 8009574:	d55e      	bpl.n	8009634 <_vfiprintf_r+0xe4>
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05b      	beq.n	8009634 <_vfiprintf_r+0xe4>
 800957c:	2300      	movs	r3, #0
 800957e:	9309      	str	r3, [sp, #36]	; 0x24
 8009580:	2320      	movs	r3, #32
 8009582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009586:	2330      	movs	r3, #48	; 0x30
 8009588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800958c:	9503      	str	r5, [sp, #12]
 800958e:	f04f 0b01 	mov.w	fp, #1
 8009592:	46b8      	mov	r8, r7
 8009594:	4645      	mov	r5, r8
 8009596:	f815 3b01 	ldrb.w	r3, [r5], #1
 800959a:	b10b      	cbz	r3, 80095a0 <_vfiprintf_r+0x50>
 800959c:	2b25      	cmp	r3, #37	; 0x25
 800959e:	d154      	bne.n	800964a <_vfiprintf_r+0xfa>
 80095a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80095a4:	d00b      	beq.n	80095be <_vfiprintf_r+0x6e>
 80095a6:	4653      	mov	r3, sl
 80095a8:	463a      	mov	r2, r7
 80095aa:	4621      	mov	r1, r4
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff ffbc 	bl	800952a <__sfputs_r>
 80095b2:	3001      	adds	r0, #1
 80095b4:	f000 80c2 	beq.w	800973c <_vfiprintf_r+0x1ec>
 80095b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ba:	4453      	add	r3, sl
 80095bc:	9309      	str	r3, [sp, #36]	; 0x24
 80095be:	f898 3000 	ldrb.w	r3, [r8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 80ba 	beq.w	800973c <_vfiprintf_r+0x1ec>
 80095c8:	2300      	movs	r3, #0
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095da:	931a      	str	r3, [sp, #104]	; 0x68
 80095dc:	46a8      	mov	r8, r5
 80095de:	2205      	movs	r2, #5
 80095e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80095e4:	485e      	ldr	r0, [pc, #376]	; (8009760 <_vfiprintf_r+0x210>)
 80095e6:	f7f6 fe03 	bl	80001f0 <memchr>
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	bb78      	cbnz	r0, 800964e <_vfiprintf_r+0xfe>
 80095ee:	06d9      	lsls	r1, r3, #27
 80095f0:	bf44      	itt	mi
 80095f2:	2220      	movmi	r2, #32
 80095f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80095f8:	071a      	lsls	r2, r3, #28
 80095fa:	bf44      	itt	mi
 80095fc:	222b      	movmi	r2, #43	; 0x2b
 80095fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009602:	782a      	ldrb	r2, [r5, #0]
 8009604:	2a2a      	cmp	r2, #42	; 0x2a
 8009606:	d02a      	beq.n	800965e <_vfiprintf_r+0x10e>
 8009608:	9a07      	ldr	r2, [sp, #28]
 800960a:	46a8      	mov	r8, r5
 800960c:	2000      	movs	r0, #0
 800960e:	250a      	movs	r5, #10
 8009610:	4641      	mov	r1, r8
 8009612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	2b09      	cmp	r3, #9
 800961a:	d969      	bls.n	80096f0 <_vfiprintf_r+0x1a0>
 800961c:	b360      	cbz	r0, 8009678 <_vfiprintf_r+0x128>
 800961e:	e024      	b.n	800966a <_vfiprintf_r+0x11a>
 8009620:	4b50      	ldr	r3, [pc, #320]	; (8009764 <_vfiprintf_r+0x214>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d101      	bne.n	800962a <_vfiprintf_r+0xda>
 8009626:	68b4      	ldr	r4, [r6, #8]
 8009628:	e7a2      	b.n	8009570 <_vfiprintf_r+0x20>
 800962a:	4b4f      	ldr	r3, [pc, #316]	; (8009768 <_vfiprintf_r+0x218>)
 800962c:	429c      	cmp	r4, r3
 800962e:	bf08      	it	eq
 8009630:	68f4      	ldreq	r4, [r6, #12]
 8009632:	e79d      	b.n	8009570 <_vfiprintf_r+0x20>
 8009634:	4621      	mov	r1, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fb06 	bl	8009c48 <__swsetup_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	d09d      	beq.n	800957c <_vfiprintf_r+0x2c>
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b01d      	add	sp, #116	; 0x74
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964a:	46a8      	mov	r8, r5
 800964c:	e7a2      	b.n	8009594 <_vfiprintf_r+0x44>
 800964e:	4a44      	ldr	r2, [pc, #272]	; (8009760 <_vfiprintf_r+0x210>)
 8009650:	1a80      	subs	r0, r0, r2
 8009652:	fa0b f000 	lsl.w	r0, fp, r0
 8009656:	4318      	orrs	r0, r3
 8009658:	9004      	str	r0, [sp, #16]
 800965a:	4645      	mov	r5, r8
 800965c:	e7be      	b.n	80095dc <_vfiprintf_r+0x8c>
 800965e:	9a03      	ldr	r2, [sp, #12]
 8009660:	1d11      	adds	r1, r2, #4
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	9103      	str	r1, [sp, #12]
 8009666:	2a00      	cmp	r2, #0
 8009668:	db01      	blt.n	800966e <_vfiprintf_r+0x11e>
 800966a:	9207      	str	r2, [sp, #28]
 800966c:	e004      	b.n	8009678 <_vfiprintf_r+0x128>
 800966e:	4252      	negs	r2, r2
 8009670:	f043 0302 	orr.w	r3, r3, #2
 8009674:	9207      	str	r2, [sp, #28]
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	f898 3000 	ldrb.w	r3, [r8]
 800967c:	2b2e      	cmp	r3, #46	; 0x2e
 800967e:	d10e      	bne.n	800969e <_vfiprintf_r+0x14e>
 8009680:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009684:	2b2a      	cmp	r3, #42	; 0x2a
 8009686:	d138      	bne.n	80096fa <_vfiprintf_r+0x1aa>
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	1d1a      	adds	r2, r3, #4
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	9203      	str	r2, [sp, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfb8      	it	lt
 8009694:	f04f 33ff 	movlt.w	r3, #4294967295
 8009698:	f108 0802 	add.w	r8, r8, #2
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	4d33      	ldr	r5, [pc, #204]	; (800976c <_vfiprintf_r+0x21c>)
 80096a0:	f898 1000 	ldrb.w	r1, [r8]
 80096a4:	2203      	movs	r2, #3
 80096a6:	4628      	mov	r0, r5
 80096a8:	f7f6 fda2 	bl	80001f0 <memchr>
 80096ac:	b140      	cbz	r0, 80096c0 <_vfiprintf_r+0x170>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	1b40      	subs	r0, r0, r5
 80096b2:	fa03 f000 	lsl.w	r0, r3, r0
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	4303      	orrs	r3, r0
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	f898 1000 	ldrb.w	r1, [r8]
 80096c4:	482a      	ldr	r0, [pc, #168]	; (8009770 <_vfiprintf_r+0x220>)
 80096c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ca:	2206      	movs	r2, #6
 80096cc:	f108 0701 	add.w	r7, r8, #1
 80096d0:	f7f6 fd8e 	bl	80001f0 <memchr>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d037      	beq.n	8009748 <_vfiprintf_r+0x1f8>
 80096d8:	4b26      	ldr	r3, [pc, #152]	; (8009774 <_vfiprintf_r+0x224>)
 80096da:	bb1b      	cbnz	r3, 8009724 <_vfiprintf_r+0x1d4>
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	3307      	adds	r3, #7
 80096e0:	f023 0307 	bic.w	r3, r3, #7
 80096e4:	3308      	adds	r3, #8
 80096e6:	9303      	str	r3, [sp, #12]
 80096e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ea:	444b      	add	r3, r9
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	e750      	b.n	8009592 <_vfiprintf_r+0x42>
 80096f0:	fb05 3202 	mla	r2, r5, r2, r3
 80096f4:	2001      	movs	r0, #1
 80096f6:	4688      	mov	r8, r1
 80096f8:	e78a      	b.n	8009610 <_vfiprintf_r+0xc0>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f108 0801 	add.w	r8, r8, #1
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	4619      	mov	r1, r3
 8009704:	250a      	movs	r5, #10
 8009706:	4640      	mov	r0, r8
 8009708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970c:	3a30      	subs	r2, #48	; 0x30
 800970e:	2a09      	cmp	r2, #9
 8009710:	d903      	bls.n	800971a <_vfiprintf_r+0x1ca>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0c3      	beq.n	800969e <_vfiprintf_r+0x14e>
 8009716:	9105      	str	r1, [sp, #20]
 8009718:	e7c1      	b.n	800969e <_vfiprintf_r+0x14e>
 800971a:	fb05 2101 	mla	r1, r5, r1, r2
 800971e:	2301      	movs	r3, #1
 8009720:	4680      	mov	r8, r0
 8009722:	e7f0      	b.n	8009706 <_vfiprintf_r+0x1b6>
 8009724:	ab03      	add	r3, sp, #12
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	4622      	mov	r2, r4
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <_vfiprintf_r+0x228>)
 800972c:	a904      	add	r1, sp, #16
 800972e:	4630      	mov	r0, r6
 8009730:	f3af 8000 	nop.w
 8009734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009738:	4681      	mov	r9, r0
 800973a:	d1d5      	bne.n	80096e8 <_vfiprintf_r+0x198>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	065b      	lsls	r3, r3, #25
 8009740:	f53f af7e 	bmi.w	8009640 <_vfiprintf_r+0xf0>
 8009744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009746:	e77d      	b.n	8009644 <_vfiprintf_r+0xf4>
 8009748:	ab03      	add	r3, sp, #12
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	4622      	mov	r2, r4
 800974e:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <_vfiprintf_r+0x228>)
 8009750:	a904      	add	r1, sp, #16
 8009752:	4630      	mov	r0, r6
 8009754:	f000 f888 	bl	8009868 <_printf_i>
 8009758:	e7ec      	b.n	8009734 <_vfiprintf_r+0x1e4>
 800975a:	bf00      	nop
 800975c:	0800a140 	.word	0x0800a140
 8009760:	0800a180 	.word	0x0800a180
 8009764:	0800a160 	.word	0x0800a160
 8009768:	0800a120 	.word	0x0800a120
 800976c:	0800a186 	.word	0x0800a186
 8009770:	0800a18a 	.word	0x0800a18a
 8009774:	00000000 	.word	0x00000000
 8009778:	0800952b 	.word	0x0800952b

0800977c <_printf_common>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	4691      	mov	r9, r2
 8009782:	461f      	mov	r7, r3
 8009784:	688a      	ldr	r2, [r1, #8]
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800978c:	4293      	cmp	r3, r2
 800978e:	bfb8      	it	lt
 8009790:	4613      	movlt	r3, r2
 8009792:	f8c9 3000 	str.w	r3, [r9]
 8009796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800979a:	4606      	mov	r6, r0
 800979c:	460c      	mov	r4, r1
 800979e:	b112      	cbz	r2, 80097a6 <_printf_common+0x2a>
 80097a0:	3301      	adds	r3, #1
 80097a2:	f8c9 3000 	str.w	r3, [r9]
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	0699      	lsls	r1, r3, #26
 80097aa:	bf42      	ittt	mi
 80097ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097b0:	3302      	addmi	r3, #2
 80097b2:	f8c9 3000 	strmi.w	r3, [r9]
 80097b6:	6825      	ldr	r5, [r4, #0]
 80097b8:	f015 0506 	ands.w	r5, r5, #6
 80097bc:	d107      	bne.n	80097ce <_printf_common+0x52>
 80097be:	f104 0a19 	add.w	sl, r4, #25
 80097c2:	68e3      	ldr	r3, [r4, #12]
 80097c4:	f8d9 2000 	ldr.w	r2, [r9]
 80097c8:	1a9b      	subs	r3, r3, r2
 80097ca:	42ab      	cmp	r3, r5
 80097cc:	dc28      	bgt.n	8009820 <_printf_common+0xa4>
 80097ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	3300      	adds	r3, #0
 80097d6:	bf18      	it	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	0692      	lsls	r2, r2, #26
 80097dc:	d42d      	bmi.n	800983a <_printf_common+0xbe>
 80097de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097e2:	4639      	mov	r1, r7
 80097e4:	4630      	mov	r0, r6
 80097e6:	47c0      	blx	r8
 80097e8:	3001      	adds	r0, #1
 80097ea:	d020      	beq.n	800982e <_printf_common+0xb2>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	68e5      	ldr	r5, [r4, #12]
 80097f0:	f8d9 2000 	ldr.w	r2, [r9]
 80097f4:	f003 0306 	and.w	r3, r3, #6
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	bf08      	it	eq
 80097fc:	1aad      	subeq	r5, r5, r2
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	6922      	ldr	r2, [r4, #16]
 8009802:	bf0c      	ite	eq
 8009804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009808:	2500      	movne	r5, #0
 800980a:	4293      	cmp	r3, r2
 800980c:	bfc4      	itt	gt
 800980e:	1a9b      	subgt	r3, r3, r2
 8009810:	18ed      	addgt	r5, r5, r3
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	341a      	adds	r4, #26
 8009818:	454d      	cmp	r5, r9
 800981a:	d11a      	bne.n	8009852 <_printf_common+0xd6>
 800981c:	2000      	movs	r0, #0
 800981e:	e008      	b.n	8009832 <_printf_common+0xb6>
 8009820:	2301      	movs	r3, #1
 8009822:	4652      	mov	r2, sl
 8009824:	4639      	mov	r1, r7
 8009826:	4630      	mov	r0, r6
 8009828:	47c0      	blx	r8
 800982a:	3001      	adds	r0, #1
 800982c:	d103      	bne.n	8009836 <_printf_common+0xba>
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009836:	3501      	adds	r5, #1
 8009838:	e7c3      	b.n	80097c2 <_printf_common+0x46>
 800983a:	18e1      	adds	r1, r4, r3
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	2030      	movs	r0, #48	; 0x30
 8009840:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009844:	4422      	add	r2, r4
 8009846:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800984a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800984e:	3302      	adds	r3, #2
 8009850:	e7c5      	b.n	80097de <_printf_common+0x62>
 8009852:	2301      	movs	r3, #1
 8009854:	4622      	mov	r2, r4
 8009856:	4639      	mov	r1, r7
 8009858:	4630      	mov	r0, r6
 800985a:	47c0      	blx	r8
 800985c:	3001      	adds	r0, #1
 800985e:	d0e6      	beq.n	800982e <_printf_common+0xb2>
 8009860:	f109 0901 	add.w	r9, r9, #1
 8009864:	e7d8      	b.n	8009818 <_printf_common+0x9c>
	...

08009868 <_printf_i>:
 8009868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800986c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009870:	460c      	mov	r4, r1
 8009872:	7e09      	ldrb	r1, [r1, #24]
 8009874:	b085      	sub	sp, #20
 8009876:	296e      	cmp	r1, #110	; 0x6e
 8009878:	4617      	mov	r7, r2
 800987a:	4606      	mov	r6, r0
 800987c:	4698      	mov	r8, r3
 800987e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009880:	f000 80b3 	beq.w	80099ea <_printf_i+0x182>
 8009884:	d822      	bhi.n	80098cc <_printf_i+0x64>
 8009886:	2963      	cmp	r1, #99	; 0x63
 8009888:	d036      	beq.n	80098f8 <_printf_i+0x90>
 800988a:	d80a      	bhi.n	80098a2 <_printf_i+0x3a>
 800988c:	2900      	cmp	r1, #0
 800988e:	f000 80b9 	beq.w	8009a04 <_printf_i+0x19c>
 8009892:	2958      	cmp	r1, #88	; 0x58
 8009894:	f000 8083 	beq.w	800999e <_printf_i+0x136>
 8009898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800989c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098a0:	e032      	b.n	8009908 <_printf_i+0xa0>
 80098a2:	2964      	cmp	r1, #100	; 0x64
 80098a4:	d001      	beq.n	80098aa <_printf_i+0x42>
 80098a6:	2969      	cmp	r1, #105	; 0x69
 80098a8:	d1f6      	bne.n	8009898 <_printf_i+0x30>
 80098aa:	6820      	ldr	r0, [r4, #0]
 80098ac:	6813      	ldr	r3, [r2, #0]
 80098ae:	0605      	lsls	r5, r0, #24
 80098b0:	f103 0104 	add.w	r1, r3, #4
 80098b4:	d52a      	bpl.n	800990c <_printf_i+0xa4>
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6011      	str	r1, [r2, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	da03      	bge.n	80098c6 <_printf_i+0x5e>
 80098be:	222d      	movs	r2, #45	; 0x2d
 80098c0:	425b      	negs	r3, r3
 80098c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098c6:	486f      	ldr	r0, [pc, #444]	; (8009a84 <_printf_i+0x21c>)
 80098c8:	220a      	movs	r2, #10
 80098ca:	e039      	b.n	8009940 <_printf_i+0xd8>
 80098cc:	2973      	cmp	r1, #115	; 0x73
 80098ce:	f000 809d 	beq.w	8009a0c <_printf_i+0x1a4>
 80098d2:	d808      	bhi.n	80098e6 <_printf_i+0x7e>
 80098d4:	296f      	cmp	r1, #111	; 0x6f
 80098d6:	d020      	beq.n	800991a <_printf_i+0xb2>
 80098d8:	2970      	cmp	r1, #112	; 0x70
 80098da:	d1dd      	bne.n	8009898 <_printf_i+0x30>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	f043 0320 	orr.w	r3, r3, #32
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	e003      	b.n	80098ee <_printf_i+0x86>
 80098e6:	2975      	cmp	r1, #117	; 0x75
 80098e8:	d017      	beq.n	800991a <_printf_i+0xb2>
 80098ea:	2978      	cmp	r1, #120	; 0x78
 80098ec:	d1d4      	bne.n	8009898 <_printf_i+0x30>
 80098ee:	2378      	movs	r3, #120	; 0x78
 80098f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098f4:	4864      	ldr	r0, [pc, #400]	; (8009a88 <_printf_i+0x220>)
 80098f6:	e055      	b.n	80099a4 <_printf_i+0x13c>
 80098f8:	6813      	ldr	r3, [r2, #0]
 80098fa:	1d19      	adds	r1, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6011      	str	r1, [r2, #0]
 8009900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009908:	2301      	movs	r3, #1
 800990a:	e08c      	b.n	8009a26 <_printf_i+0x1be>
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6011      	str	r1, [r2, #0]
 8009910:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009914:	bf18      	it	ne
 8009916:	b21b      	sxthne	r3, r3
 8009918:	e7cf      	b.n	80098ba <_printf_i+0x52>
 800991a:	6813      	ldr	r3, [r2, #0]
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1d18      	adds	r0, r3, #4
 8009920:	6010      	str	r0, [r2, #0]
 8009922:	0628      	lsls	r0, r5, #24
 8009924:	d501      	bpl.n	800992a <_printf_i+0xc2>
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	e002      	b.n	8009930 <_printf_i+0xc8>
 800992a:	0668      	lsls	r0, r5, #25
 800992c:	d5fb      	bpl.n	8009926 <_printf_i+0xbe>
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	4854      	ldr	r0, [pc, #336]	; (8009a84 <_printf_i+0x21c>)
 8009932:	296f      	cmp	r1, #111	; 0x6f
 8009934:	bf14      	ite	ne
 8009936:	220a      	movne	r2, #10
 8009938:	2208      	moveq	r2, #8
 800993a:	2100      	movs	r1, #0
 800993c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009940:	6865      	ldr	r5, [r4, #4]
 8009942:	60a5      	str	r5, [r4, #8]
 8009944:	2d00      	cmp	r5, #0
 8009946:	f2c0 8095 	blt.w	8009a74 <_printf_i+0x20c>
 800994a:	6821      	ldr	r1, [r4, #0]
 800994c:	f021 0104 	bic.w	r1, r1, #4
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d13d      	bne.n	80099d2 <_printf_i+0x16a>
 8009956:	2d00      	cmp	r5, #0
 8009958:	f040 808e 	bne.w	8009a78 <_printf_i+0x210>
 800995c:	4665      	mov	r5, ip
 800995e:	2a08      	cmp	r2, #8
 8009960:	d10b      	bne.n	800997a <_printf_i+0x112>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	07db      	lsls	r3, r3, #31
 8009966:	d508      	bpl.n	800997a <_printf_i+0x112>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	429a      	cmp	r2, r3
 800996e:	bfde      	ittt	le
 8009970:	2330      	movle	r3, #48	; 0x30
 8009972:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009976:	f105 35ff 	addle.w	r5, r5, #4294967295
 800997a:	ebac 0305 	sub.w	r3, ip, r5
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f8cd 8000 	str.w	r8, [sp]
 8009984:	463b      	mov	r3, r7
 8009986:	aa03      	add	r2, sp, #12
 8009988:	4621      	mov	r1, r4
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff fef6 	bl	800977c <_printf_common>
 8009990:	3001      	adds	r0, #1
 8009992:	d14d      	bne.n	8009a30 <_printf_i+0x1c8>
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	b005      	add	sp, #20
 800999a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800999e:	4839      	ldr	r0, [pc, #228]	; (8009a84 <_printf_i+0x21c>)
 80099a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099a4:	6813      	ldr	r3, [r2, #0]
 80099a6:	6821      	ldr	r1, [r4, #0]
 80099a8:	1d1d      	adds	r5, r3, #4
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6015      	str	r5, [r2, #0]
 80099ae:	060a      	lsls	r2, r1, #24
 80099b0:	d50b      	bpl.n	80099ca <_printf_i+0x162>
 80099b2:	07ca      	lsls	r2, r1, #31
 80099b4:	bf44      	itt	mi
 80099b6:	f041 0120 	orrmi.w	r1, r1, #32
 80099ba:	6021      	strmi	r1, [r4, #0]
 80099bc:	b91b      	cbnz	r3, 80099c6 <_printf_i+0x15e>
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	f022 0220 	bic.w	r2, r2, #32
 80099c4:	6022      	str	r2, [r4, #0]
 80099c6:	2210      	movs	r2, #16
 80099c8:	e7b7      	b.n	800993a <_printf_i+0xd2>
 80099ca:	064d      	lsls	r5, r1, #25
 80099cc:	bf48      	it	mi
 80099ce:	b29b      	uxthmi	r3, r3
 80099d0:	e7ef      	b.n	80099b2 <_printf_i+0x14a>
 80099d2:	4665      	mov	r5, ip
 80099d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80099d8:	fb02 3311 	mls	r3, r2, r1, r3
 80099dc:	5cc3      	ldrb	r3, [r0, r3]
 80099de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80099e2:	460b      	mov	r3, r1
 80099e4:	2900      	cmp	r1, #0
 80099e6:	d1f5      	bne.n	80099d4 <_printf_i+0x16c>
 80099e8:	e7b9      	b.n	800995e <_printf_i+0xf6>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	6825      	ldr	r5, [r4, #0]
 80099ee:	6961      	ldr	r1, [r4, #20]
 80099f0:	1d18      	adds	r0, r3, #4
 80099f2:	6010      	str	r0, [r2, #0]
 80099f4:	0628      	lsls	r0, r5, #24
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	d501      	bpl.n	80099fe <_printf_i+0x196>
 80099fa:	6019      	str	r1, [r3, #0]
 80099fc:	e002      	b.n	8009a04 <_printf_i+0x19c>
 80099fe:	066a      	lsls	r2, r5, #25
 8009a00:	d5fb      	bpl.n	80099fa <_printf_i+0x192>
 8009a02:	8019      	strh	r1, [r3, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	6123      	str	r3, [r4, #16]
 8009a08:	4665      	mov	r5, ip
 8009a0a:	e7b9      	b.n	8009980 <_printf_i+0x118>
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	1d19      	adds	r1, r3, #4
 8009a10:	6011      	str	r1, [r2, #0]
 8009a12:	681d      	ldr	r5, [r3, #0]
 8009a14:	6862      	ldr	r2, [r4, #4]
 8009a16:	2100      	movs	r1, #0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f7f6 fbe9 	bl	80001f0 <memchr>
 8009a1e:	b108      	cbz	r0, 8009a24 <_printf_i+0x1bc>
 8009a20:	1b40      	subs	r0, r0, r5
 8009a22:	6060      	str	r0, [r4, #4]
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a2e:	e7a7      	b.n	8009980 <_printf_i+0x118>
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	462a      	mov	r2, r5
 8009a34:	4639      	mov	r1, r7
 8009a36:	4630      	mov	r0, r6
 8009a38:	47c0      	blx	r8
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d0aa      	beq.n	8009994 <_printf_i+0x12c>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	079b      	lsls	r3, r3, #30
 8009a42:	d413      	bmi.n	8009a6c <_printf_i+0x204>
 8009a44:	68e0      	ldr	r0, [r4, #12]
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	4298      	cmp	r0, r3
 8009a4a:	bfb8      	it	lt
 8009a4c:	4618      	movlt	r0, r3
 8009a4e:	e7a3      	b.n	8009998 <_printf_i+0x130>
 8009a50:	2301      	movs	r3, #1
 8009a52:	464a      	mov	r2, r9
 8009a54:	4639      	mov	r1, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	47c0      	blx	r8
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d09a      	beq.n	8009994 <_printf_i+0x12c>
 8009a5e:	3501      	adds	r5, #1
 8009a60:	68e3      	ldr	r3, [r4, #12]
 8009a62:	9a03      	ldr	r2, [sp, #12]
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	42ab      	cmp	r3, r5
 8009a68:	dcf2      	bgt.n	8009a50 <_printf_i+0x1e8>
 8009a6a:	e7eb      	b.n	8009a44 <_printf_i+0x1dc>
 8009a6c:	2500      	movs	r5, #0
 8009a6e:	f104 0919 	add.w	r9, r4, #25
 8009a72:	e7f5      	b.n	8009a60 <_printf_i+0x1f8>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1ac      	bne.n	80099d2 <_printf_i+0x16a>
 8009a78:	7803      	ldrb	r3, [r0, #0]
 8009a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a82:	e76c      	b.n	800995e <_printf_i+0xf6>
 8009a84:	0800a191 	.word	0x0800a191
 8009a88:	0800a1a2 	.word	0x0800a1a2

08009a8c <_putc_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460d      	mov	r5, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	4606      	mov	r6, r0
 8009a94:	b118      	cbz	r0, 8009a9e <_putc_r+0x12>
 8009a96:	6983      	ldr	r3, [r0, #24]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_putc_r+0x12>
 8009a9a:	f7ff fca3 	bl	80093e4 <__sinit>
 8009a9e:	4b13      	ldr	r3, [pc, #76]	; (8009aec <_putc_r+0x60>)
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d112      	bne.n	8009aca <_putc_r+0x3e>
 8009aa4:	6874      	ldr	r4, [r6, #4]
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	da16      	bge.n	8009ade <_putc_r+0x52>
 8009ab0:	69a2      	ldr	r2, [r4, #24]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	db02      	blt.n	8009abc <_putc_r+0x30>
 8009ab6:	b2eb      	uxtb	r3, r5
 8009ab8:	2b0a      	cmp	r3, #10
 8009aba:	d110      	bne.n	8009ade <_putc_r+0x52>
 8009abc:	4622      	mov	r2, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ac6:	f000 b85b 	b.w	8009b80 <__swbuf_r>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <_putc_r+0x64>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	d101      	bne.n	8009ad4 <_putc_r+0x48>
 8009ad0:	68b4      	ldr	r4, [r6, #8]
 8009ad2:	e7e8      	b.n	8009aa6 <_putc_r+0x1a>
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <_putc_r+0x68>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	bf08      	it	eq
 8009ada:	68f4      	ldreq	r4, [r6, #12]
 8009adc:	e7e3      	b.n	8009aa6 <_putc_r+0x1a>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	6022      	str	r2, [r4, #0]
 8009ae4:	701d      	strb	r5, [r3, #0]
 8009ae6:	b2e8      	uxtb	r0, r5
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
 8009aea:	bf00      	nop
 8009aec:	0800a140 	.word	0x0800a140
 8009af0:	0800a160 	.word	0x0800a160
 8009af4:	0800a120 	.word	0x0800a120

08009af8 <__sread>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	460c      	mov	r4, r1
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	f000 fa46 	bl	8009f90 <_read_r>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	bfab      	itete	ge
 8009b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b0c:	181b      	addge	r3, r3, r0
 8009b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b12:	bfac      	ite	ge
 8009b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b16:	81a3      	strhlt	r3, [r4, #12]
 8009b18:	bd10      	pop	{r4, pc}

08009b1a <__swrite>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	461f      	mov	r7, r3
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	05db      	lsls	r3, r3, #23
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	4616      	mov	r6, r2
 8009b2a:	d505      	bpl.n	8009b38 <__swrite+0x1e>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	f000 f9b6 	bl	8009ea4 <_lseek_r>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	f000 b869 	b.w	8009c24 <_write_r>

08009b52 <__sseek>:
 8009b52:	b510      	push	{r4, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5a:	f000 f9a3 	bl	8009ea4 <_lseek_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	bf15      	itete	ne
 8009b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6e:	81a3      	strheq	r3, [r4, #12]
 8009b70:	bf18      	it	ne
 8009b72:	81a3      	strhne	r3, [r4, #12]
 8009b74:	bd10      	pop	{r4, pc}

08009b76 <__sclose>:
 8009b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7a:	f000 b8d3 	b.w	8009d24 <_close_r>
	...

08009b80 <__swbuf_r>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	460e      	mov	r6, r1
 8009b84:	4614      	mov	r4, r2
 8009b86:	4605      	mov	r5, r0
 8009b88:	b118      	cbz	r0, 8009b92 <__swbuf_r+0x12>
 8009b8a:	6983      	ldr	r3, [r0, #24]
 8009b8c:	b90b      	cbnz	r3, 8009b92 <__swbuf_r+0x12>
 8009b8e:	f7ff fc29 	bl	80093e4 <__sinit>
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <__swbuf_r+0x98>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	d12a      	bne.n	8009bee <__swbuf_r+0x6e>
 8009b98:	686c      	ldr	r4, [r5, #4]
 8009b9a:	69a3      	ldr	r3, [r4, #24]
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	071a      	lsls	r2, r3, #28
 8009ba2:	d52e      	bpl.n	8009c02 <__swbuf_r+0x82>
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	b363      	cbz	r3, 8009c02 <__swbuf_r+0x82>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	6820      	ldr	r0, [r4, #0]
 8009bac:	1ac0      	subs	r0, r0, r3
 8009bae:	6963      	ldr	r3, [r4, #20]
 8009bb0:	b2f6      	uxtb	r6, r6
 8009bb2:	4283      	cmp	r3, r0
 8009bb4:	4637      	mov	r7, r6
 8009bb6:	dc04      	bgt.n	8009bc2 <__swbuf_r+0x42>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f948 	bl	8009e50 <_fflush_r>
 8009bc0:	bb28      	cbnz	r0, 8009c0e <__swbuf_r+0x8e>
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	60a3      	str	r3, [r4, #8]
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	6022      	str	r2, [r4, #0]
 8009bce:	701e      	strb	r6, [r3, #0]
 8009bd0:	6963      	ldr	r3, [r4, #20]
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	d004      	beq.n	8009be2 <__swbuf_r+0x62>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	07db      	lsls	r3, r3, #31
 8009bdc:	d519      	bpl.n	8009c12 <__swbuf_r+0x92>
 8009bde:	2e0a      	cmp	r6, #10
 8009be0:	d117      	bne.n	8009c12 <__swbuf_r+0x92>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f933 	bl	8009e50 <_fflush_r>
 8009bea:	b190      	cbz	r0, 8009c12 <__swbuf_r+0x92>
 8009bec:	e00f      	b.n	8009c0e <__swbuf_r+0x8e>
 8009bee:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <__swbuf_r+0x9c>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d101      	bne.n	8009bf8 <__swbuf_r+0x78>
 8009bf4:	68ac      	ldr	r4, [r5, #8]
 8009bf6:	e7d0      	b.n	8009b9a <__swbuf_r+0x1a>
 8009bf8:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <__swbuf_r+0xa0>)
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	bf08      	it	eq
 8009bfe:	68ec      	ldreq	r4, [r5, #12]
 8009c00:	e7cb      	b.n	8009b9a <__swbuf_r+0x1a>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f000 f81f 	bl	8009c48 <__swsetup_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0cc      	beq.n	8009ba8 <__swbuf_r+0x28>
 8009c0e:	f04f 37ff 	mov.w	r7, #4294967295
 8009c12:	4638      	mov	r0, r7
 8009c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	0800a140 	.word	0x0800a140
 8009c1c:	0800a160 	.word	0x0800a160
 8009c20:	0800a120 	.word	0x0800a120

08009c24 <_write_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4c07      	ldr	r4, [pc, #28]	; (8009c44 <_write_r+0x20>)
 8009c28:	4605      	mov	r5, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f6 fecf 	bl	80009d6 <_write>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_write_r+0x1e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_write_r+0x1e>
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20006444 	.word	0x20006444

08009c48 <__swsetup_r>:
 8009c48:	4b32      	ldr	r3, [pc, #200]	; (8009d14 <__swsetup_r+0xcc>)
 8009c4a:	b570      	push	{r4, r5, r6, lr}
 8009c4c:	681d      	ldr	r5, [r3, #0]
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460c      	mov	r4, r1
 8009c52:	b125      	cbz	r5, 8009c5e <__swsetup_r+0x16>
 8009c54:	69ab      	ldr	r3, [r5, #24]
 8009c56:	b913      	cbnz	r3, 8009c5e <__swsetup_r+0x16>
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f7ff fbc3 	bl	80093e4 <__sinit>
 8009c5e:	4b2e      	ldr	r3, [pc, #184]	; (8009d18 <__swsetup_r+0xd0>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	d10f      	bne.n	8009c84 <__swsetup_r+0x3c>
 8009c64:	686c      	ldr	r4, [r5, #4]
 8009c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	0715      	lsls	r5, r2, #28
 8009c6e:	d42c      	bmi.n	8009cca <__swsetup_r+0x82>
 8009c70:	06d0      	lsls	r0, r2, #27
 8009c72:	d411      	bmi.n	8009c98 <__swsetup_r+0x50>
 8009c74:	2209      	movs	r2, #9
 8009c76:	6032      	str	r2, [r6, #0]
 8009c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c82:	e03e      	b.n	8009d02 <__swsetup_r+0xba>
 8009c84:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <__swsetup_r+0xd4>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	d101      	bne.n	8009c8e <__swsetup_r+0x46>
 8009c8a:	68ac      	ldr	r4, [r5, #8]
 8009c8c:	e7eb      	b.n	8009c66 <__swsetup_r+0x1e>
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <__swsetup_r+0xd8>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	bf08      	it	eq
 8009c94:	68ec      	ldreq	r4, [r5, #12]
 8009c96:	e7e6      	b.n	8009c66 <__swsetup_r+0x1e>
 8009c98:	0751      	lsls	r1, r2, #29
 8009c9a:	d512      	bpl.n	8009cc2 <__swsetup_r+0x7a>
 8009c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9e:	b141      	cbz	r1, 8009cb2 <__swsetup_r+0x6a>
 8009ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	d002      	beq.n	8009cae <__swsetup_r+0x66>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff fa77 	bl	800919c <_free_r>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6063      	str	r3, [r4, #4]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0308 	orr.w	r3, r3, #8
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	b94b      	cbnz	r3, 8009ce2 <__swsetup_r+0x9a>
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cd8:	d003      	beq.n	8009ce2 <__swsetup_r+0x9a>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f000 f917 	bl	8009f10 <__smakebuf_r>
 8009ce2:	89a2      	ldrh	r2, [r4, #12]
 8009ce4:	f012 0301 	ands.w	r3, r2, #1
 8009ce8:	d00c      	beq.n	8009d04 <__swsetup_r+0xbc>
 8009cea:	2300      	movs	r3, #0
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	6963      	ldr	r3, [r4, #20]
 8009cf0:	425b      	negs	r3, r3
 8009cf2:	61a3      	str	r3, [r4, #24]
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	b953      	cbnz	r3, 8009d0e <__swsetup_r+0xc6>
 8009cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009d00:	d1ba      	bne.n	8009c78 <__swsetup_r+0x30>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	0792      	lsls	r2, r2, #30
 8009d06:	bf58      	it	pl
 8009d08:	6963      	ldrpl	r3, [r4, #20]
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	e7f2      	b.n	8009cf4 <__swsetup_r+0xac>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e7f7      	b.n	8009d02 <__swsetup_r+0xba>
 8009d12:	bf00      	nop
 8009d14:	2000017c 	.word	0x2000017c
 8009d18:	0800a140 	.word	0x0800a140
 8009d1c:	0800a160 	.word	0x0800a160
 8009d20:	0800a120 	.word	0x0800a120

08009d24 <_close_r>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	4c06      	ldr	r4, [pc, #24]	; (8009d40 <_close_r+0x1c>)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	4608      	mov	r0, r1
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	f7f6 fe6d 	bl	8000a0e <_close>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	d102      	bne.n	8009d3e <_close_r+0x1a>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	b103      	cbz	r3, 8009d3e <_close_r+0x1a>
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	20006444 	.word	0x20006444

08009d44 <__sflush_r>:
 8009d44:	898a      	ldrh	r2, [r1, #12]
 8009d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	0710      	lsls	r0, r2, #28
 8009d4e:	460c      	mov	r4, r1
 8009d50:	d458      	bmi.n	8009e04 <__sflush_r+0xc0>
 8009d52:	684b      	ldr	r3, [r1, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dc05      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc02      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d0f9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d70:	682f      	ldr	r7, [r5, #0]
 8009d72:	6a21      	ldr	r1, [r4, #32]
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	d032      	beq.n	8009dde <__sflush_r+0x9a>
 8009d78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	075a      	lsls	r2, r3, #29
 8009d7e:	d505      	bpl.n	8009d8c <__sflush_r+0x48>
 8009d80:	6863      	ldr	r3, [r4, #4]
 8009d82:	1ac0      	subs	r0, r0, r3
 8009d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d86:	b10b      	cbz	r3, 8009d8c <__sflush_r+0x48>
 8009d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d8a:	1ac0      	subs	r0, r0, r3
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d92:	6a21      	ldr	r1, [r4, #32]
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b0      	blx	r6
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	d106      	bne.n	8009dac <__sflush_r+0x68>
 8009d9e:	6829      	ldr	r1, [r5, #0]
 8009da0:	291d      	cmp	r1, #29
 8009da2:	d848      	bhi.n	8009e36 <__sflush_r+0xf2>
 8009da4:	4a29      	ldr	r2, [pc, #164]	; (8009e4c <__sflush_r+0x108>)
 8009da6:	40ca      	lsrs	r2, r1
 8009da8:	07d6      	lsls	r6, r2, #31
 8009daa:	d544      	bpl.n	8009e36 <__sflush_r+0xf2>
 8009dac:	2200      	movs	r2, #0
 8009dae:	6062      	str	r2, [r4, #4]
 8009db0:	04d9      	lsls	r1, r3, #19
 8009db2:	6922      	ldr	r2, [r4, #16]
 8009db4:	6022      	str	r2, [r4, #0]
 8009db6:	d504      	bpl.n	8009dc2 <__sflush_r+0x7e>
 8009db8:	1c42      	adds	r2, r0, #1
 8009dba:	d101      	bne.n	8009dc0 <__sflush_r+0x7c>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b903      	cbnz	r3, 8009dc2 <__sflush_r+0x7e>
 8009dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8009dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc4:	602f      	str	r7, [r5, #0]
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	d0c9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d002      	beq.n	8009dd8 <__sflush_r+0x94>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7ff f9e2 	bl	800919c <_free_r>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	6360      	str	r0, [r4, #52]	; 0x34
 8009ddc:	e7c0      	b.n	8009d60 <__sflush_r+0x1c>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	1c41      	adds	r1, r0, #1
 8009de6:	d1c8      	bne.n	8009d7a <__sflush_r+0x36>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0c5      	beq.n	8009d7a <__sflush_r+0x36>
 8009dee:	2b1d      	cmp	r3, #29
 8009df0:	d001      	beq.n	8009df6 <__sflush_r+0xb2>
 8009df2:	2b16      	cmp	r3, #22
 8009df4:	d101      	bne.n	8009dfa <__sflush_r+0xb6>
 8009df6:	602f      	str	r7, [r5, #0]
 8009df8:	e7b1      	b.n	8009d5e <__sflush_r+0x1a>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	e7ad      	b.n	8009d60 <__sflush_r+0x1c>
 8009e04:	690f      	ldr	r7, [r1, #16]
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d0a9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009e0a:	0793      	lsls	r3, r2, #30
 8009e0c:	680e      	ldr	r6, [r1, #0]
 8009e0e:	bf08      	it	eq
 8009e10:	694b      	ldreq	r3, [r1, #20]
 8009e12:	600f      	str	r7, [r1, #0]
 8009e14:	bf18      	it	ne
 8009e16:	2300      	movne	r3, #0
 8009e18:	eba6 0807 	sub.w	r8, r6, r7
 8009e1c:	608b      	str	r3, [r1, #8]
 8009e1e:	f1b8 0f00 	cmp.w	r8, #0
 8009e22:	dd9c      	ble.n	8009d5e <__sflush_r+0x1a>
 8009e24:	4643      	mov	r3, r8
 8009e26:	463a      	mov	r2, r7
 8009e28:	6a21      	ldr	r1, [r4, #32]
 8009e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b0      	blx	r6
 8009e30:	2800      	cmp	r0, #0
 8009e32:	dc06      	bgt.n	8009e42 <__sflush_r+0xfe>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e78e      	b.n	8009d60 <__sflush_r+0x1c>
 8009e42:	4407      	add	r7, r0
 8009e44:	eba8 0800 	sub.w	r8, r8, r0
 8009e48:	e7e9      	b.n	8009e1e <__sflush_r+0xda>
 8009e4a:	bf00      	nop
 8009e4c:	20400001 	.word	0x20400001

08009e50 <_fflush_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b1db      	cbz	r3, 8009e92 <_fflush_r+0x42>
 8009e5a:	b118      	cbz	r0, 8009e64 <_fflush_r+0x14>
 8009e5c:	6983      	ldr	r3, [r0, #24]
 8009e5e:	b90b      	cbnz	r3, 8009e64 <_fflush_r+0x14>
 8009e60:	f7ff fac0 	bl	80093e4 <__sinit>
 8009e64:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <_fflush_r+0x48>)
 8009e66:	429c      	cmp	r4, r3
 8009e68:	d109      	bne.n	8009e7e <_fflush_r+0x2e>
 8009e6a:	686c      	ldr	r4, [r5, #4]
 8009e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e70:	b17b      	cbz	r3, 8009e92 <_fflush_r+0x42>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e7a:	f7ff bf63 	b.w	8009d44 <__sflush_r>
 8009e7e:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <_fflush_r+0x4c>)
 8009e80:	429c      	cmp	r4, r3
 8009e82:	d101      	bne.n	8009e88 <_fflush_r+0x38>
 8009e84:	68ac      	ldr	r4, [r5, #8]
 8009e86:	e7f1      	b.n	8009e6c <_fflush_r+0x1c>
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <_fflush_r+0x50>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	bf08      	it	eq
 8009e8e:	68ec      	ldreq	r4, [r5, #12]
 8009e90:	e7ec      	b.n	8009e6c <_fflush_r+0x1c>
 8009e92:	2000      	movs	r0, #0
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	0800a140 	.word	0x0800a140
 8009e9c:	0800a160 	.word	0x0800a160
 8009ea0:	0800a120 	.word	0x0800a120

08009ea4 <_lseek_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4c07      	ldr	r4, [pc, #28]	; (8009ec4 <_lseek_r+0x20>)
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	4608      	mov	r0, r1
 8009eac:	4611      	mov	r1, r2
 8009eae:	2200      	movs	r2, #0
 8009eb0:	6022      	str	r2, [r4, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f7f6 fdd2 	bl	8000a5c <_lseek>
 8009eb8:	1c43      	adds	r3, r0, #1
 8009eba:	d102      	bne.n	8009ec2 <_lseek_r+0x1e>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	b103      	cbz	r3, 8009ec2 <_lseek_r+0x1e>
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	bd38      	pop	{r3, r4, r5, pc}
 8009ec4:	20006444 	.word	0x20006444

08009ec8 <__swhatbuf_r>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	460e      	mov	r6, r1
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	2900      	cmp	r1, #0
 8009ed2:	b096      	sub	sp, #88	; 0x58
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	461d      	mov	r5, r3
 8009ed8:	da07      	bge.n	8009eea <__swhatbuf_r+0x22>
 8009eda:	2300      	movs	r3, #0
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	89b3      	ldrh	r3, [r6, #12]
 8009ee0:	061a      	lsls	r2, r3, #24
 8009ee2:	d410      	bmi.n	8009f06 <__swhatbuf_r+0x3e>
 8009ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ee8:	e00e      	b.n	8009f08 <__swhatbuf_r+0x40>
 8009eea:	466a      	mov	r2, sp
 8009eec:	f000 f862 	bl	8009fb4 <_fstat_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	dbf2      	blt.n	8009eda <__swhatbuf_r+0x12>
 8009ef4:	9a01      	ldr	r2, [sp, #4]
 8009ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009efe:	425a      	negs	r2, r3
 8009f00:	415a      	adcs	r2, r3
 8009f02:	602a      	str	r2, [r5, #0]
 8009f04:	e7ee      	b.n	8009ee4 <__swhatbuf_r+0x1c>
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	2000      	movs	r0, #0
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	b016      	add	sp, #88	; 0x58
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}

08009f10 <__smakebuf_r>:
 8009f10:	898b      	ldrh	r3, [r1, #12]
 8009f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f14:	079d      	lsls	r5, r3, #30
 8009f16:	4606      	mov	r6, r0
 8009f18:	460c      	mov	r4, r1
 8009f1a:	d507      	bpl.n	8009f2c <__smakebuf_r+0x1c>
 8009f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	6123      	str	r3, [r4, #16]
 8009f24:	2301      	movs	r3, #1
 8009f26:	6163      	str	r3, [r4, #20]
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	ab01      	add	r3, sp, #4
 8009f2e:	466a      	mov	r2, sp
 8009f30:	f7ff ffca 	bl	8009ec8 <__swhatbuf_r>
 8009f34:	9900      	ldr	r1, [sp, #0]
 8009f36:	4605      	mov	r5, r0
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff f97d 	bl	8009238 <_malloc_r>
 8009f3e:	b948      	cbnz	r0, 8009f54 <__smakebuf_r+0x44>
 8009f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f44:	059a      	lsls	r2, r3, #22
 8009f46:	d4ef      	bmi.n	8009f28 <__smakebuf_r+0x18>
 8009f48:	f023 0303 	bic.w	r3, r3, #3
 8009f4c:	f043 0302 	orr.w	r3, r3, #2
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	e7e3      	b.n	8009f1c <__smakebuf_r+0xc>
 8009f54:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <__smakebuf_r+0x7c>)
 8009f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	9b00      	ldr	r3, [sp, #0]
 8009f64:	6163      	str	r3, [r4, #20]
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	6120      	str	r0, [r4, #16]
 8009f6a:	b15b      	cbz	r3, 8009f84 <__smakebuf_r+0x74>
 8009f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f70:	4630      	mov	r0, r6
 8009f72:	f000 f831 	bl	8009fd8 <_isatty_r>
 8009f76:	b128      	cbz	r0, 8009f84 <__smakebuf_r+0x74>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f023 0303 	bic.w	r3, r3, #3
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	431d      	orrs	r5, r3
 8009f88:	81a5      	strh	r5, [r4, #12]
 8009f8a:	e7cd      	b.n	8009f28 <__smakebuf_r+0x18>
 8009f8c:	080093ad 	.word	0x080093ad

08009f90 <_read_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4c07      	ldr	r4, [pc, #28]	; (8009fb0 <_read_r+0x20>)
 8009f94:	4605      	mov	r5, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	6022      	str	r2, [r4, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f6 fcfc 	bl	800099c <_read>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_read_r+0x1e>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_read_r+0x1e>
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20006444 	.word	0x20006444

08009fb4 <_fstat_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4c07      	ldr	r4, [pc, #28]	; (8009fd4 <_fstat_r+0x20>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4605      	mov	r5, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	f7f6 fd30 	bl	8000a26 <_fstat>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d102      	bne.n	8009fd0 <_fstat_r+0x1c>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	b103      	cbz	r3, 8009fd0 <_fstat_r+0x1c>
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20006444 	.word	0x20006444

08009fd8 <_isatty_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4c06      	ldr	r4, [pc, #24]	; (8009ff4 <_isatty_r+0x1c>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4605      	mov	r5, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	f7f6 fd2f 	bl	8000a46 <_isatty>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_isatty_r+0x1a>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_isatty_r+0x1a>
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	20006444 	.word	0x20006444

08009ff8 <_init>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr

0800a004 <_fini>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr
